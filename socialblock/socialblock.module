<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2024
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides a Social block.
 */

use Abraham\TwitterOAuth\TwitterOAuth;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\encrypt\Entity\EncryptionProfile;

/**
 * @return array
 */
function socialblock_get_forum_vocabularies(): array {

  $vocabs = [];
  $systemVocabs = Vocabulary::loadMultiple();
  if ($systemVocabs !== NULL) {
    foreach ($systemVocabs as $vocab) {
      if ($vocab->label() === 'Forums') {
        $container = \Drupal::getContainer();
        if ($container !== NULL) {
          $vocabs = $container->get('entity_type.manager')->getStorage('taxonomy_term')->loadTree($vocab->id());
        }
      }
    }
  }

  return $vocabs;
}

/**
 * @return array
 */
function socialblock_get_forum_term_ids(): array {

  $vocabs = socialblock_get_forum_vocabularies();

  $tids = [];
  if ($vocabs !== NULL) {
    foreach ($vocabs as $vocab) {
      $tids[$vocab->tid] = (int) $vocab->tid;
    }
  }

  return $tids;
}

/**
 * @param DateInterval $di
 *
 * @return string
 */
function socialblock_get_timediff(DateInterval $di): string {

  $translate = \Drupal::translation();

  $years = $di->y;
  $months = $di->m;
  $days = $di->d;
  $hours = $di->h;
  $minutes = $di->i;
  $seconds = $di->s;

  $secondsString = $translate
    ->formatPlural($seconds, '1 second ago', '@count seconds ago');
  $minutesString = $translate
    ->formatPlural($minutes, '1 minute ago', '@count minutes ago');
  $hoursString = $translate
    ->formatPlural($hours, '1 hour ago', '@count hours ago');
  $daysString = $translate
    ->formatPlural($days, '1 day ago', '@count days ago');
  $monthsString = $translate
    ->formatPlural($months, '1 month ago', '@count months ago');
  $yearsString = $translate
    ->formatPlural($minutes, '1 year ago', '@count years ago');

  $diff = $years === 0 ? ($months === 0 ? ($days === 0 ? ($hours === 0 ? ($minutes === 0 ? ($seconds === 0 ? t('Just now') : $secondsString) : $minutesString) : $hoursString) : $daysString) : $monthsString) : $yearsString;

  return $diff;
}

/**
 * @param DateInterval $di
 *
 * @return null|string
 */
function socialblock_get_tweet_timediff(DateInterval $di): ?string {

  $years = $di->y;
  $months = $di->m;
  $days = $di->d;
  $hours = $di->h;
  $minutes = $di->i;
  $seconds = $di->s;
  $diff = $years === 0 ? ($months === 0 ? ($days === 0 ? ($hours === 0 ? ($minutes === 0 ? ($seconds === 0 ? t('now') : $seconds . t('s')) : $minutes . t('m')) : $hours . t('h')) : $days . t('d')) : $months . t('M')) : $years . t('y');

  return $diff;
}


/**
 * @param $credentials
 * @param $api
 * @param $params
 *
 * @return array|null|object
 */
function socialblock_call_twitter_api($credentials, $api, $params) {

  $consumerKey = $credentials['consumerKey'];
  $consumerSecret = $credentials['consumerSecret'];
  $accessToken = $credentials['accessToken'];
  $accessTokenSecret = $credentials['accessTokenSecret'];

  $connection = new TwitterOAuth($consumerKey, $consumerSecret, $accessToken, $accessTokenSecret);
  $connection->host = 'https://api.twitter.com/1.1';
  $response = $connection->get($api, $params);

  if (isset($response->errors)) {
    $response = NULL;
  }
  elseif ($api === 'search/tweets') {
    $response = $response->statuses;
  }

  return $response;
}

/**
 * @param $cred
 *
 * @return int
 */
function socialblock_not_rate_limited($cred): int {
  $result = socialblock_call_twitter_api($cred, 'application/rate_limit_status', ['resources' => 'statuses']);
  $remaining = 0;
  if (isset($result->resources->statuses->{'/statuses/user_timeline'}->remaining) && $result->resources->statuses->{'/statuses/user_timeline'}->remaining > 0) {
    $remaining = $result->resources->statuses->{'/statuses/user_timeline'}->remaining;
  }
  return $remaining;
}

/**
 * @param $a
 * @param $b
 *
 * @return int
 */
function socialblock_sort_by_created($a, $b): int {
  $at = (int) ($a->tweet ? strtotime($a->created_at) : $a->created->getValue()[0]['value']);
  $bt = (int) ($b->tweet ? strtotime($b->created_at) : $b->created->getValue()[0]['value']);
  if ($at === $bt) {
    return 0;
  }
  return $at < $bt ? 1 : -1;
}

/**
 * @param $url
 *
 * @return string
 */
function socialblock_expand_url($url): string {
  $returnValue = NULL;
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url);
  curl_setopt($ch, CURLOPT_HEADER, TRUE);
  curl_setopt($ch, CURLOPT_NOBODY, 1);
  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, FALSE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($ch, CURLOPT_TIMEOUT, 10);
  $a = curl_exec($ch);
  curl_close($ch);
  if (preg_match('#Location: (.*)#', $a, $r)) {
    $returnValue = trim($r[1]);
  }
  else {
    $returnValue = $url;
  }
  return $returnValue;
}
