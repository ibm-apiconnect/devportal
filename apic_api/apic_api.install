<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2022
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\Views;
use Drupal\node\Entity\Node;

/**
 * Ensure content type is translation enabled
 */
function apic_api_update_8111() {
  \Drupal::configFactory()
    ->getEditable('language.content_settings.node.api')
    ->set('langcode', 'en')
    ->set('status', TRUE)
    ->set('dependencies', ['config' => [0 => 'node.type.api'], 'module' => [0 => 'content_translation']])
    ->set('third_party_settings', ['content_translation' => ['enabled' => TRUE]])
    ->set('id', 'node.api')
    ->set('target_entity_type_id', 'node')
    ->set('target_bundle', 'api')
    ->set('default_langcode', 'site_default')
    ->set('language_alterable', FALSE)
    ->save();

  $view = Views::getView('apis');
  if ($view !== NULL) {
    $filters = $view->getDisplay()->getOption('filters');
    if (!array_key_exists('select_translation', $filters)) {
      $filters['select_translation'] = [
        'id' => 'select_translation',
        'table' => 'node_field_data',
        'field' => 'select_translation',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => '=',
        'value' => 'default',
        'group' => 1,
        'exposed' => FALSE,
        'expose' => [
          'operator_id' => '',
          'label' => '',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => '',
          'identifier' => '',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
          ],
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'priorities' => '',
        'default_language_only' => 0,
        'include_content_with_unpublished_translation' => 0,
        'entity_type' => 'node',
        'plugin_id' => 'select_translation_filter',
      ];
      $view->getDisplay()->setOption('filters', $filters);
      $view->save();
    }
    $view2 = Views::getView('apis');
    if ($view2 !== NULL) {
      $view2->setDisplay('page_1');
      $view2->getDisplay()->setOption('rendering_language', '***LANGUAGE_language_interface***');
      $view2->save();
    }
  }
}

/**
 * Use taxonomy search with depth
 */
function apic_api_update_8112() {

  $view = Views::getView('apis');
  if ($view !== NULL) {
    $filters = $view->getDisplay()->getOption('filters');
    // remove old tid based filter
    if (array_key_exists('tid', $filters)) {
      unset($filters['tid']);
    }
    // add new tid with depth
    if (!array_key_exists('term_node_tid_depth', $filters)) {
      $filters['term_node_tid_depth'] = [
        'id' => 'term_node_tid_depth',
        'table' => 'node_field_data',
        'field' => 'term_node_tid_depth',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => 'or',
        'value' => NULL,
        'group' => 1,
        'exposed' => TRUE,
        'expose' => [
          'operator_id' => 'term_node_tid_depth_op',
          'label' => 'Category',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => 'term_node_tid_depth_op',
          'identifier' => 'term_node_tid_depth',
          'required' => FALSE,
          'remember' => TRUE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
          ],
          'reduce' => FALSE,
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'reduce_duplicates' => FALSE,
        'type' => 'cshs',
        'limit' => TRUE,
        'hierarchy' => FALSE,
        'error_message' => TRUE,
        'depth' => 0,
        'vid' => 'tags',
        'parent' => '0',
        'level_labels' => '',
        'force_deepest' => 0,
        'entity_type' => 'node',
        'plugin_id' => 'taxonomy_index_tid_depth',
      ];
      if (!isset($filters['type']['group'])) {
        $filters['type']['group'] = 1;
      }
    }
    $view->getDisplay()->setOption('filters', $filters);
    $filter_groups = $view->getDisplay()->getOption('filter_groups');
    if (!isset($filter_groups)) {
      $filter_groups = ['operator' => 'AND', 'groups' => [1 => 'AND']];
      $view->getDisplay()->setOption('filter_groups', $filter_groups);
    }
    $view->save();
  }
}

/**
 * Changes :
 *  - add api_encodedswagger to api
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8113() {

  // check if new field exists, skip if it does
  // it shouldn't, but better safe than sorry
  $newFieldConfig = FieldConfig::loadByName('node', 'api', 'api_encodedswagger');
  if (!isset($newFieldConfig)) {

    // Create a new field storage 'api_encodedswagger'
    $fieldStorageConfig = FieldStorageConfig::create([
      'field_name' => 'api_encodedswagger',
      'entity_type' => 'node',
      'type' => 'string_long',
      'required' => FALSE,
      'cardinality' => 1,
    ]);
    $fieldStorageConfig->save();

    // Create a new field for the api module
    $fieldConfig = FieldConfig::create([
      'field_name' => 'api_encodedswagger',
      'entity_type' => 'node',
      'bundle' => 'api',
      'label' => t('Encoded Open API Document'),
    ]);
    $fieldConfig->save();

    // Modify entity form display modes to show application_image field
    $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.api.default');
    if ($formDisplay !== NULL) {
      $values = $formDisplay->getComponent('api_swagger');
      if ($values !== NULL) {
        $formDisplay->setComponent('api_encodedswagger', $values); // copy all existing settings across from api_swagger field
        $formDisplay->save();
      }
    }

    // Do the same for the view display modes
    $displayModes = ['default', 'card', 'teaser'];
    foreach ($displayModes as $displayMode) {
      $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.' . $displayMode);
      if ($viewDisplay !== NULL) {
        $values = $viewDisplay->getComponent('api_swagger');
        if ($values !== NULL) {
          $viewDisplay->setComponent('api_encodedswagger', $values); // copy all existing settings across from api_swagger field
          $viewDisplay->save();
        }
      }
    }
  }
}

/**
 * Update the field storage id for api_state to correct for a typo in early fixpacks
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8114() {
  $fieldConfig = FieldConfig::loadByName('node', 'api', 'api_state');
  $storage = $fieldConfig->getFieldStorageDefinition();
  if ($storage !== NULL) {
    $storage->set('id', 'node.api_state');
    $storage->save();
  }
}

/**
 * Update the field storage for the protocol field to include graphql
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8115() {
  $fieldConfig = FieldConfig::loadByName('node', 'api', 'api_protocol');
  $storage = $fieldConfig->getFieldStorageDefinition();
  if ($storage !== NULL) {
    $allowed_values = $storage->getSetting('allowed_values');
    if (!array_key_exists('graphql', $allowed_values)) {
      $allowed_values['graphql'] = 'GraphQL';
      $storage->setSetting('allowed_values', $allowed_values);
      $storage->save();
    }
  }
}


/**
 * Add new entity_view_display and api views for product display
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8116() {
  $evd_id = 'node.api.embedded';
  try {
    $evd_storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');
    if ($evd_storage->load($evd_id) === NULL) {
      \Drupal::logger('apic_api_update')->notice('creating entity_view_display embedded');

      $items = [
        'status' => TRUE,
        'id' => $evd_id,
        'targetEntityType' => 'node',
        'bundle' => 'api',
        'mode' => 'embedded',
        'content' => [
          'api_oaiversion' => [
            'type' => 'list_default',
            'weight' => 0,
            'label' => 'hidden',
            'settings' => [],
            'third_party_settings' => [],
            'region' => 'content',
          ],
          'api_protocol' => [
            'type' => 'list_default',
            'weight' => 0,
            'label' => 'hidden',
            'settings' => [],
            'third_party_settings' => [],
            'region' => 'content',
          ],
          'apic_description' => [
            'type' => 'smart_trim',
            'weight' => 0,
            'label' => 'hidden',
            'settings' => [
              'trim_length' => 600,
              'trim_type' => 'chars',
              'trim_suffix' => '',
              'wrap_output' => FALSE,
              'wrap_class' => 'trimmed',
              'more_link' => FALSE,
              'more_class' => 'more-link',
              'more_text' => 'More',
              'summary_handler' => 'full',
              'trim_options' => [],
            ],
            'third_party_settings' => [],
            'region' => 'content',
          ],
          'apic_image' => [
            'type' => 'image',
            'weight' => 0,
            'label' => 'hidden',
            'settings' => [
              'image_style' => '',
              'image_link' => '',
            ],
            'third_party_settings' => [],
            'region' => 'content',
          ],
          'apic_rating' => [
            'type' => 'voting_api_formatter',
            'weight' => 20,
            'label' => 'hidden',
            'settings' => [
              'style' => 'bootstrap-stars',
              'readonly' => '1',
              'show_results' => 0,
              'values' => [],
              'show_own_vote' => FALSE,
            ],
            'third_party_settings' => [],
            'region' => 'content',
          ],
          'apic_summary' => [
            'weight' => 15,
            'label' => 'above',
            'settings' => [],
            'third_party_settings' => [],
            'type' => 'basic_string',
            'region' => 'content',
          ],
          'apic_version' => [
            'type' => 'string',
            'weight' => 0,
            'label' => 'hidden',
            'settings' => [
              'link_to_entity' => FALSE,
            ],
            'third_party_settings' => [],
            'region' => 'content',
          ],
          'links' => [
            'weight' => 100,
            'region' => 'content',
            'settings' => [],
            'third_party_settings' => [],
          ],
        ],
        'hidden' => [
          'api_ibmconfiguration' => TRUE,
          'api_id' => TRUE,
          'api_soapversion' => TRUE,
          'api_state' => TRUE,
          'api_swagger' => TRUE,
          'api_encodedswagger' => TRUE,
          'api_swaggertags' => TRUE,
          'api_wsdl' => TRUE,
          'api_xibmname' => TRUE,
          'apic_attachments' => TRUE,
          'apic_catalog_id' => TRUE,
          'apic_hostname' => TRUE,
          'apic_pathalias' => TRUE,
          'apic_provider_id' => TRUE,
          'apic_ref' => TRUE,
          'apic_tags' => TRUE,
          'apic_url' => TRUE,
          'comment' => TRUE,
          'langcode' => TRUE,
        ],
      ];
      $new_api_view_display = $evd_storage->create($items);
      $new_api_view_display->save();
    }
  } catch (InvalidPluginDefinitionException | PluginNotFoundException $e) {
  }
  $view_id = 'product_content';
  $view_storage = \Drupal::service('entity_type.manager')->getStorage('view');
  if ($view_storage->load($view_id) === NULL) {
    $viewItems = [
      'id' => 'product_content',
      'label' => 'Product Content',
      'module' => 'views',
      'description' => '',
      'tag' => '',
      'base_table' => 'node_field_data',
      'base_field' => 'nid',
      'display' => [
        'default' => [
          'display_plugin' => 'default',
          'id' => 'default',
          'display_title' => 'Master',
          'position' => 0,
          'display_options' => [
            'access' => [
              'type' => 'perm',
              'options' => [
                'perm' => 'access content',
              ],
            ],
            'cache' => [
              'type' => 'tag',
              'options' => [],
            ],
            'query' => [
              'type' => 'views_query',
              'options' => [
                'disable_sql_rewrite' => FALSE,
                'distinct' => FALSE,
                'replica' => FALSE,
                'query_comment' => '',
                'query_tags' => [],
              ],
            ],
            'exposed_form' => [
              'type' => 'basic',
              'options' => [
                'submit_button' => 'Apply',
                'reset_button' => FALSE,
                'reset_button_label' => 'Reset',
                'exposed_sorts_label' => 'Sort by',
                'expose_sort_order' => TRUE,
                'sort_asc_label' => 'Asc',
                'sort_desc_label' => 'Desc',
              ],
            ],
            'pager' => [
              'type' => 'full',
              'options' => [
                'items_per_page' => 12,
                'offset' => 0,
                'id' => 0,
                'total_pages' => NULL,
                'tags' => [
                  'previous' => '‹‹',
                  'next' => '››',
                  'first' => '« First',
                  'last' => 'Last »',
                ],
                'expose' => [
                  'items_per_page' => FALSE,
                  'items_per_page_label' => 'APIs per page',
                  'items_per_page_options' => '6, 12, 30, 60',
                  'items_per_page_options_all' => FALSE,
                  'items_per_page_options_all_label' => '- All -',
                  'offset' => FALSE,
                  'offset_label' => 'Offset',
                ],
                'quantity' => 9,
              ],
            ],
            'style' => [
              'type' => 'views_bootstrap_list_group',
              'options' => [
                'row_class' => '',
                'default_row_class' => TRUE,
                'uses_fields' => FALSE,
                'title_field' => 'title',
              ],
            ],
            'row' => [
              'type' => 'entity:node',
              'options' => [
                'view_mode' => 'embedded',
              ],
            ],
            'fields' => [
              'title' => [
                'id' => 'title',
                'table' => 'node_field_data',
                'field' => 'title',
                'entity_type' => 'node',
                'entity_field' => 'title',
                'label' => '',
                'alter' => [
                  'alter_text' => FALSE,
                  'make_link' => FALSE,
                  'absolute' => FALSE,
                  'trim' => FALSE,
                  'word_boundary' => FALSE,
                  'ellipsis' => FALSE,
                  'strip_tags' => FALSE,
                  'html' => FALSE,
                ],
                'hide_empty' => FALSE,
                'empty_zero' => FALSE,
                'settings' => [
                  'link_to_entity' => TRUE,
                ],
                'plugin_id' => 'field',
                'relationship' => 'none',
                'group_type' => 'group',
                'admin_label' => '',
                'exclude' => FALSE,
                'element_type' => '',
                'element_class' => '',
                'element_label_type' => '',
                'element_label_class' => '',
                'element_label_colon' => TRUE,
                'element_wrapper_type' => '',
                'element_wrapper_class' => '',
                'element_default_classes' => TRUE,
                'empty' => '',
                'hide_alter_empty' => TRUE,
                'click_sort_column' => 'value',
                'type' => 'string',
                'group_column' => 'value',
                'group_columns' => [],
                'group_rows' => TRUE,
                'delta_limit' => 0,
                'delta_offset' => 0,
                'delta_reversed' => FALSE,
                'delta_first_last' => FALSE,
                'multi_type' => 'separator',
                'separator' => ', ',
                'field_api_classes' => FALSE,
              ],
            ],
            'filters' => [
              'status' => [
                'value' => '1',
                'table' => 'node_field_data',
                'field' => 'status',
                'plugin_id' => 'boolean',
                'entity_type' => 'node',
                'entity_field' => 'status',
                'id' => 'status',
                'expose' => [
                  'operator' => '',
                  'operator_limit_selection' => FALSE,
                  'operator_list' => [],
                ],
                'group' => 1,
              ],
              'type' => [
                'id' => 'type',
                'table' => 'node_field_data',
                'field' => 'type',
                'value' => [
                  'api' => 'api',
                ],
                'entity_type' => 'node',
                'entity_field' => 'type',
                'plugin_id' => 'bundle',
                'expose' => [
                  'operator_limit_selection' => FALSE,
                  'operator_list' => [],
                ],
              ],
              'select_translation' => [
                'id' => 'select_translation',
                'table' => 'node_field_data',
                'field' => 'select_translation',
                'relationship' => 'none',
                'group_type' => 'group',
                'admin_label' => '',
                'operator' => '=',
                'value' => 'default',
                'group' => 1,
                'exposed' => FALSE,
                'expose' => [
                  'operator_id' => '',
                  'label' => '',
                  'description' => '',
                  'use_operator' => FALSE,
                  'operator' => '',
                  'operator_limit_selection' => FALSE,
                  'operator_list' => [],
                  'identifier' => '',
                  'required' => FALSE,
                  'remember' => FALSE,
                  'multiple' => FALSE,
                  'remember_roles' => [
                    'authenticated' => 'authenticated',
                  ],
                ],
                'is_grouped' => FALSE,
                'group_info' => [
                  'label' => '',
                  'description' => '',
                  'identifier' => '',
                  'optional' => TRUE,
                  'widget' => 'select',
                  'multiple' => FALSE,
                  'remember' => FALSE,
                  'default_group' => 'All',
                  'default_group_multiple' => [],
                  'group_items' => [],
                ],
                'priorities' => '',
                'default_language_only' => 0,
                'include_content_with_unpublished_translation' => 0,
                'entity_type' => 'node',
                'plugin_id' => 'select_translation_filter',
              ],
            ],
            'sorts' => [
              'created' => [
                'id' => 'created',
                'table' => 'node_field_data',
                'field' => 'created',
                'order' => 'DESC',
                'entity_type' => 'node',
                'entity_field' => 'created',
                'plugin_id' => 'date',
                'relationship' => 'none',
                'group_type' => 'group',
                'admin_label' => '',
                'exposed' => FALSE,
                'expose' => [
                  'label' => '',
                ],
                'granularity' => 'second',
              ],
            ],
            'title' => 'Product Content',
            'header' => [],
            'footer' => [],
            'empty' => [],
            'relationships' => [],
            'arguments' => [
              'nid' => [
                'id' => 'nid',
                'table' => 'node_field_data',
                'field' => 'nid',
                'relationship' => 'none',
                'group_type' => 'group',
                'admin_label' => '',
                'default_action' => 'empty',
                'exception' => [
                  'value' => 'all',
                  'title_enable' => FALSE,
                  'title' => 'All',
                ],
                'title_enable' => FALSE,
                'title' => '',
                'default_argument_type' => 'fixed',
                'default_argument_options' => [
                  'argument' => '',
                ],
                'default_argument_skip_url' => FALSE,
                'summary_options' => [
                  'base_path' => '',
                  'count' => TRUE,
                  'items_per_page' => 25,
                  'override' => FALSE,
                ],
                'summary' => [
                  'sort_order' => 'asc',
                  'number_of_records' => 0,
                  'format' => 'default_summary',
                ],
                'specify_validation' => FALSE,
                'validate' => [
                  'type' => 'none',
                  'fail' => 'not found',
                ],
                'validate_options' => [],
                'break_phrase' => FALSE,
                'not' => FALSE,
                'entity_type' => 'node',
                'entity_field' => 'nid',
                'plugin_id' => 'node_nid',
              ],
            ],
            'display_extenders' => [],
            'css_class' => 'apicProductApiList',
          ],
          'cache_metadata' => [
            'max-age' => -1,
            'contexts' => [
              0 => 'languages:language_content',
              1 => 'languages:language_interface',
              2 => 'url',
              3 => 'url.query_args',
              4 => 'user.node_grants:view',
              5 => 'user.permissions',
            ],
            'tags' => [],
          ],
        ],
        'block_1' => [
          'display_plugin' => 'block',
          'id' => 'block_1',
          'display_title' => 'Block',
          'position' => 2,
          'display_options' => [
            'display_extenders' => [],
            'style' => [
              'type' => 'default',
            ],
            'defaults' => [
              'style' => FALSE,
              'row' => FALSE,
              'pager' => FALSE,
              'fields' => FALSE,
            ],
            'row' => [
              'type' => 'fields',
            ],
            'pager' => [
              'type' => 'full',
              'options' => [
                'items_per_page' => 5,
                'offset' => 0,
                'id' => 0,
                'total_pages' => NULL,
                'expose' => [
                  'items_per_page' => FALSE,
                  'items_per_page_label' => 'Items per page',
                  'items_per_page_options' => '5, 10, 25, 50',
                  'items_per_page_options_all' => FALSE,
                  'items_per_page_options_all_label' => '- All -',
                  'offset' => FALSE,
                  'offset_label' => 'Offset',
                ],
                'tags' => [
                  'previous' => '‹ Previous',
                  'next' => 'Next ›',
                  'first' => '« First',
                  'last' => 'Last »',
                ],
                'quantity' => 9,
              ],
            ],
            'fields' => [
              'title' => [
                'id' => 'title',
                'table' => 'node_field_data',
                'field' => 'title',
                'settings' => [
                  'link_to_entity' => TRUE,
                ],
                'plugin_id' => 'field',
                'relationship' => 'none',
                'group_type' => 'group',
                'admin_label' => '',
                'label' => '',
                'exclude' => FALSE,
                'alter' => [
                  'alter_text' => FALSE,
                  'text' => '',
                  'make_link' => FALSE,
                  'path' => '',
                  'absolute' => FALSE,
                  'external' => FALSE,
                  'replace_spaces' => FALSE,
                  'path_case' => 'none',
                  'trim_whitespace' => FALSE,
                  'alt' => '',
                  'rel' => '',
                  'link_class' => '',
                  'prefix' => '',
                  'suffix' => '',
                  'target' => '',
                  'nl2br' => FALSE,
                  'max_length' => 0,
                  'word_boundary' => TRUE,
                  'ellipsis' => TRUE,
                  'more_link' => FALSE,
                  'more_link_text' => '',
                  'more_link_path' => '',
                  'strip_tags' => FALSE,
                  'trim' => FALSE,
                  'preserve_tags' => '',
                  'html' => FALSE,
                ],
                'element_type' => '',
                'element_class' => '',
                'element_label_type' => '',
                'element_label_class' => '',
                'element_label_colon' => TRUE,
                'element_wrapper_type' => '',
                'element_wrapper_class' => '',
                'element_default_classes' => TRUE,
                'empty' => '',
                'hide_empty' => FALSE,
                'empty_zero' => FALSE,
                'hide_alter_empty' => TRUE,
                'click_sort_column' => 'value',
                'type' => 'string',
                'group_column' => 'value',
                'group_columns' => [],
                'group_rows' => TRUE,
                'delta_limit' => 0,
                'delta_offset' => 0,
                'delta_reversed' => FALSE,
                'delta_first_last' => FALSE,
                'multi_type' => 'separator',
                'separator' => ', ',
                'field_api_classes' => FALSE,
              ],
            ],
          ],
          'cache_metadata' => [
            'max-age' => -1,
            'contexts' => [
              0 => 'languages:language_content',
              1 => 'languages:language_interface',
              2 => 'url',
              3 => 'url.query_args',
              4 => 'user.node_grants:view',
              5 => 'user.permissions',
            ],
            'tags' => [],
          ],
        ],
        'page_1' => [
          'display_plugin' => 'page',
          'id' => 'page_1',
          'display_title' => 'Page',
          'position' => 1,
          'display_options' => [
            'display_extenders' => [],
            'path' => 'product_content',
            'rendering_language' => '***LANGUAGE_language_interface***',
          ],
          'cache_metadata' => [
            'max-age' => -1,
            'contexts' => [
              0 => 'languages:language_interface',
              1 => 'url',
              2 => 'url.query_args',
              3 => 'user.node_grants:view',
              4 => 'user.permissions',
            ],
            'tags' => [],
          ],
        ],
      ],
    ];
    $new_api_view = $view_storage->create($viewItems);
    $new_api_view->save();
  }
}

/**
 * Making sure that product description is translatable
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8117() {

  $apicDescriptionFieldConfig = FieldConfig::loadByName('node', 'api', 'apic_description');
  if ($apicDescriptionFieldConfig !== NULL) {
    $apicDescriptionFieldConfig->set('translatable', TRUE);
    $apicDescriptionFieldConfig->save();
  }
}

/**
 * update the gutter width for latest masonry views
 */
function apic_api_update_8118() {
  $view = Views::getView('apis');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0) {
      $style['options']['gutterWidth'] = "20";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
  }
}

/**
 * update the gutter width for latest masonry views
 *
 * bumped the second digit to ensure the change happens if migrating from 2018 to 10 too
 */
function apic_api_update_8201() {
  $view = Views::getView('apis');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0 || (int) $style['options']['gutterWidth'] === 20) {
      $style['options']['gutterWidth'] = "2";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
    $pager = $view->getDisplay()->getOption('pager');
    if ((int) $pager['options']['items_per_page'] === 5) {
      $pager['options']['items_per_page'] = 10;
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
    if ($pager['options']['expose']['items_per_page_options'] !== '10, 25, 50, 75') {
      $pager['options']['expose']['items_per_page_options'] = '10, 25, 50, 75';
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
  }
}

/**
 * Add api_state to the embedded view mode
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8202() {
  $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.embedded');
  if ($formDisplay !== NULL) {
    $values = [
      'type' => 'list_default',
      'weight' => 21,
      'region' => 'content',
      'label' => 'hidden',
    ];
    $formDisplay->setComponent('api_state', $values);
    $formDisplay->save();
  }
  // update product_content to use views_bootstrap_list_group
  $view = Views::getView('product_content');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if (($style !== NULL) && $style['type'] !== 'views_bootstrap_list_group') {
      $style['type'] = 'views_bootstrap_list_group';
      $style['options'] = [];
      $style['options']['row_class'] = '';
      $style['options']['default_row_class'] = TRUE;
      $style['options']['uses_fields'] = FALSE;
      $style['options']['title_field'] = 'title';
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
  }
}

/**
 * update the empty state for the view
 *
 */
function apic_api_update_8203() {
  $view = Views::getView('apis');
  if ($view !== NULL) {
    $empty = $view->getDisplay()->getOption('empty');
    if (!isset($empty['entity_block'])) {
      $empty['entity_block'] = [
        'id' => 'entity_block',
        'table' => 'views',
        'field' => 'entity_block',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'empty' => TRUE,
        'tokenize' => TRUE,
        'target' => 'noapisblock',
        'view_mode' => 'default',
        'bypass_access' => FALSE,
        'plugin_id' => 'entity',
      ];
      if (isset($empty['area'])) {
        unset($empty['area']);
      }
      $view->getDisplay()->setOption('empty', $empty);
      $view->save();
    }
  }
  $view = Views::getView('product_content');
  if ($view !== NULL) {
    $empty = $view->getDisplay()->getOption('empty');
    if (!isset($empty['entity_block'])) {
      $empty['entity_block'] = [
        'id' => 'entity_block',
        'table' => 'views',
        'field' => 'entity_block',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'empty' => TRUE,
        'tokenize' => TRUE,
        'target' => 'noapisblock',
        'view_mode' => 'default',
        'bypass_access' => FALSE,
        'plugin_id' => 'entity',
      ];
      if (isset($empty['area'])) {
        unset($empty['area']);
      }
      $view->getDisplay()->setOption('empty', $empty);
      $view->save();
    }
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8204() {
  $fieldConfig = FieldConfig::loadByName('node', 'apic_api', 'comment');
  if ($fieldConfig !== NULL) {
    $settings = $fieldConfig->get('settings');
    if ($settings['preview'] !== 0) {
      $settings['preview'] = 0;
      $fieldConfig->set('settings', $settings);
      $fieldConfig->save();
    }
  }
}

/**
 * Update the field storage for the protocol field to include kafka and mq
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8205() {
  $fieldConfig = FieldConfig::loadByName('node', 'api', 'api_protocol');
  $storage = $fieldConfig->getFieldStorageDefinition();
  if ($storage !== NULL) {
    $allowed_values = $storage->getSetting('allowed_values');
    if (!array_key_exists('kafka', $allowed_values)) {
      $allowed_values['kafka'] = 'Kafka';
      $storage->setSetting('allowed_values', $allowed_values);
      $storage->save();
    }
    if (!array_key_exists('mq', $allowed_values)) {
      $allowed_values['mq'] = 'MQ';
      $storage->setSetting('allowed_values', $allowed_values);
      $storage->save();
    }
  }
  $fieldConfig = FieldConfig::loadByName('node', 'api', 'api_oaiversion');
  $storage = $fieldConfig->getFieldStorageDefinition();
  if ($storage !== NULL) {
    $allowed_values = $storage->getSetting('allowed_values');
    if (!array_key_exists('asyncapi2', $allowed_values)) {
      $allowed_values['asyncapi2'] = 'Async API v2';
      $storage->setSetting('allowed_values', $allowed_values);
      $storage->save();
    }
  }
  if ($fieldConfig->get('label') !== 'Specification') {
    $fieldConfig->set('label', 'Specification');
    $fieldConfig->save();
  }
}

/**
 * Update the field storage for the protocol field to include asyncapi
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8206() {
  $fieldConfig = FieldConfig::loadByName('node', 'api', 'api_protocol');
  $storage = $fieldConfig->getFieldStorageDefinition();
  if ($storage !== NULL) {
    $allowed_values = $storage->getSetting('allowed_values');
    if (!array_key_exists('asyncapi', $allowed_values)) {
      $allowed_values['asyncapi'] = 'AsyncAPI';
      $storage->setSetting('allowed_values', $allowed_values);
      $storage->save();
    }
  }
}

/**
 * Add api_state and api_swagger fields to the view modes
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8207() {
  $stateValues = [
    'type' => 'list_default',
    'weight' => 21,
    'region' => 'content',
    'label' => 'hidden',
  ];
  $swaggerValues = [
    'type' => 'basic_string',
    'weight' => 0,
    'region' => 'content',
    'label' => 'hidden',
  ];

  $cardFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.card');
  if ($cardFormDisplay !== NULL) {
    $cardFormDisplay->setComponent('api_state', $stateValues);
    $cardFormDisplay->setComponent('api_swagger', $swaggerValues);
    $cardFormDisplay->save();
  }

  $teaserFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.teaser');
  if ($teaserFormDisplay !== NULL) {
    $teaserFormDisplay->setComponent('api_state', $stateValues);
    $teaserFormDisplay->setComponent('api_swagger', $swaggerValues);
    $teaserFormDisplay->save();
  }

  $embeddedFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.embedded');
  if ($embeddedFormDisplay !== NULL) {
    $embeddedFormDisplay->setComponent('api_state', $stateValues);
    $embeddedFormDisplay->setComponent('api_swagger', $swaggerValues);
    $embeddedFormDisplay->save();
  }

  $defaultFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.default');
  if ($defaultFormDisplay !== NULL) {
    // default already has the api_swagger field set
    $defaultFormDisplay->setComponent('api_state', $stateValues);
    $defaultFormDisplay->save();
  }
}

/**
 * Add apic_pathalias field to the view modes
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8208() {
  $fieldValues = [
    'type' => 'string',
    'weight' => 112,
    'region' => 'content',
    'label' => 'hidden',
  ];

  $cardFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.card');
  if ($cardFormDisplay !== NULL) {
    $cardFormDisplay->setComponent('apic_pathalias', $fieldValues);
    $cardFormDisplay->save();
  }

  $teaserFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.teaser');
  if ($teaserFormDisplay !== NULL) {
    $teaserFormDisplay->setComponent('apic_pathalias', $fieldValues);
    $teaserFormDisplay->save();
  }

  $embeddedFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.embedded');
  if ($embeddedFormDisplay !== NULL) {
    $embeddedFormDisplay->setComponent('apic_pathalias', $fieldValues);
    $embeddedFormDisplay->save();
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8209() {
  // Create a new field for the api module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'apic_created_at',
    'field_type' => 'timestamp',
    'entity_type' => 'node',
    'bundle' => 'api',
    'translatable' => FALSE,
    'label' => t('Creation time'),
  ]);
  $fieldConfig->save();

  // Create a new field for the api module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'apic_updated_at',
    'field_type' => 'timestamp',
    'entity_type' => 'node',
    'bundle' => 'api',
    'translatable' => FALSE,
    'label' => t('Modification time'),
  ]);
  $fieldConfig->save();
}

/**
 * Fix view sort
 */
function apic_api_update_8302() {
  // update product_content to use ID based sort
  $view = Views::getView('product_content');
  if ($view !== NULL) {
    $sorts = $view->getDisplay()->getOption('sorts');
    if (($sorts !== NULL) && isset($sorts['created'])) {
      unset($sorts['created']);
    }
    if (($sorts !== NULL) && !isset($sorts['nid'])) {
      $sorts['nid'] = [
        'id' => 'nid',
        'table' => 'node_field_data',
        'field' => 'nid',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'order' => 'DESC',
        'exposed' => FALSE,
        'expose' => [
          'label' => '',
        ],
        'entity_type' => 'node',
        'entity_field' => 'nid',
        'plugin_id' => 'standard',
      ];
    }
    $view->getDisplay()->setOption('sorts', $sorts);
    $view->save();
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_api_update_8303() {
  // Set the api_swaggertags field to unlimited cardinality
  $fieldConfig = FieldConfig::loadByName('node', 'api', 'api_swaggertags');
  if ($fieldConfig != NULL) {
    $fieldConfig->set('cardinality', -1);
    $fieldConfig->save();
  }
}

function apic_api_update_10001() {
  $field_config = FieldConfig::loadByName('node', 'api', 'apic_attachments');
  $field_config->setSetting('file_extensions', 'txt doc pdf xls ppt pptx docx xlsx rtf odt ods odp md json yaml yml tgz tar zip');
  $field_config->save();
}

function apic_api_update_10002() {
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'api');
  $access_control_handler = \Drupal::entityTypeManager()
    ->getAccessControlHandler('node');
  $nids = $query->accessCheck(FALSE)->execute();
  foreach (array_chunk($nids, 50) as $chunk) {
    $nodes = Node::loadMultiple($chunk);
    if ($nodes !== NULL) {
      foreach ($nodes as $node) {
        $grants = $access_control_handler
          ->acquireGrants($node);
        \Drupal::service('node.grant_storage')
          ->write($node, $grants);
      }
    }
  }
}

/**
* Remove AddToAny Config
*/
function apic_api_update_10003() {
  $ids = [ 'embedded', 'card', 'default', 'teaser' ];
  foreach ($ids as $id) {
    $view = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.api.' . $id);
    if ($view !== NULL) {
      $view->removeComponent('addtoany');
      $view_hidden = $view->get('hidden');
      unset($view_hidden['addtoany']);
      $view->set('hidden', $view_hidden);
      $view->save();
    }
  }
}

/**
 * update the gutter width unit for latest masonry views
 */
function apic_api_update_10004() {
  $view = Views::getView('apis');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if (!str_ends_with($style['options']['gutterWidth'], 'px')) {
      $style['options']['gutterWidth'].="px";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function apic_api_update_dependencies(): array {
  return [
    'apic_api' => [
      // ibm_apim 8104 must run before apic_api 8116.
      // apic_app 8106 is removing old config entities and they need removal before view update in 8116
      8116 => [
        'ibm_apim' => 8104,
        'apic_app' => 8106,
      ],
      // consumerorg creates the storage for the created_at and updated_at fields so has to run first
      8209 => [
        'consumerorg' => 8201,
      ],
    ],
  ];
}
