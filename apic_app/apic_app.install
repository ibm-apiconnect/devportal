<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2021
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Installation and upgrade logic for the apic_app module.
 */

use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Database\Database;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Session\UserSession;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;
use Drupal\views\Views;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\apic_app\ApplicationSubscriptionSchema;
use Drupal\apic_app\ApplicationCredentialsSchema;

function apic_app_install() {
  // This config automatically gets added need to remove so we don't remove the view when forums are disabled.
  apic_app_removeConfigDependency("views.view.applications", "user.role.authenticated");
}

/**
 * Changes from 8.x-1.0 to 8.x-1.1 :
 *  - remove apic_image from application
 *  - add application_image to application
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8101() {

  // check if new field exists, skip if it does
  // it shouldn't, but better safe than sorry
  $newFieldConfig = FieldConfig::loadByName('node', 'application', 'application_image');
  if (!isset($newFieldConfig) || empty($newFieldConfig)) {
    /**
     * 1. Gather all apic_image values for applications and store for later
     * 2. Create 'application_image' storage
     * 3. Create 'application_image' field
     * 4. Get current settings for 'apic_image' from entity form display for 'application'
     * 5. Add 'application_image' to 'application' entity form display using settings for 'apic_image'
     * 6. Repeat 4. and 5. for entity display
     * 7. Remove apic_image field from 'application'
     * 8. Set values for new 'application_image' field based on 'apic_image' of 'application'
     **/

    // Collect all values for apic_image associated with applications
    $query = \Drupal::entityQuery('node');
    $query->condition('type', 'application');
    $results = $query->execute();

    $existingApplicationImages = [];
    if (isset($results)) {
      foreach ($results as $result) {
        $application = Node::load($result);
        if ($application !== NULL) {
          $existingApplicationImages[$result] = $application->get('apic_image')->getValue();
        }
      }
    }

    // Create a new field storage 'application_image'
    $fieldStorageConfig = FieldStorageConfig::create([
      'field_name' => 'application_image',
      'entity_type' => 'node',
      'type' => 'image',
      'required' => FALSE,
      'cardinality' => 1,
    ]);
    $fieldStorageConfig->save();

    // Create a new field for the application module
    $fieldConfig = FieldConfig::create([
      'field_name' => 'application_image',
      'entity_type' => 'node',
      'bundle' => 'application',
      'label' => t('Image'),
    ]);
    $fieldConfig->save();

    // Modify entity form display modes to show application_image field
    $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.application.default');
    if ($formDisplay !== NULL) {
      $formDisplay->setComponent('application_image', $formDisplay->getComponent('apic_image')); // copy all existing settings across from old field
      $formDisplay->save();
    }

    // Do the same for the view display modes
    $displayModes = ['default', 'card', 'content_browser', 'subscribewizard', 'teaser'];
    foreach ($displayModes as $displayMode) {
      $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.application.' . $displayMode);
      if ($viewDisplay !== NULL) {
        $viewDisplay->setComponent('application_image', $viewDisplay->getComponent('apic_image')); // copy all existing settings across from old field
        $viewDisplay->save();
      }
    }

    // Put the values we stored from apic_image back in to application_image
    foreach ($existingApplicationImages as $nodeId => $image) {
      $application = Node::load($nodeId);
      if ($application !== NULL) {
        $application->set('application_image', $image);
        $application->save();
      }
    }

    // Remove the old apic_image field from application
    $fieldConfig = FieldConfig::loadByName('node', 'application', 'apic_image');
    $fieldConfig->delete();
  }
}

/**
 * Changes from 8.x-1.1 to 8.x-1.2 :
 *  - change field length for application_redirect_endpoints
 */
function apic_app_update_8102() {
  $fieldStorageConfig = FieldStorageConfig::loadByName('node', 'application_redirect_endpoints');
  $length = $fieldStorageConfig->getSetting('max_length');
  if (!isset($length) || !is_int($length) || $length < 999) {
    $length = 999;
  }
  $fieldStorageConfig->setSetting('max_length', $length);
  $isAscii = $fieldStorageConfig->getSetting('is_ascii');
  if (!isset($isAscii)) {
    $isAscii = FALSE;
  }
  $fieldStorageConfig->setSetting('is_ascii', $isAscii);
  $fieldStorageConfig->save();
}

/**
 * Changes from 8.x-1.3 to 8.x-1.4 :
 *  - hide scheduler fields
 */
function apic_app_update_8103() {
  // Modify entity form display modes to hide the scheduler and moderation fields by default
  $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.application.default');
  if ($formDisplay !== NULL) {
    foreach (['publish_on', 'unpublish_on', 'moderation_state'] as $field_name) {
      $component = $formDisplay->getComponent($field_name);
      if (isset($component)) {
        $formDisplay->removeComponent($field_name);
      }
    }
    $formDisplay->save();
  }
}

/**
 * Changes from 8.x-1.4 to 8.x-1.5 :
 *  - add subscription_refs field
 *  - add credentials_refs field
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8104() {
  // Create a new field storage 'application_image'
  $fieldStorageConfig = FieldStorageConfig::create([
    'field_name' => 'application_subscription_refs',
    'entity_type' => 'node',
    'type' => 'entity_reference',
    'required' => FALSE,
    'translatable' => FALSE,
    'cardinality' => -1,
    'settings' => ['target_type' => 'apic_app_subscription'],
  ]);
  $fieldStorageConfig->save();

  $fieldStorageConfig = FieldStorageConfig::create([
    'field_name' => 'application_credentials_refs',
    'entity_type' => 'node',
    'type' => 'entity_reference',
    'required' => FALSE,
    'translatable' => FALSE,
    'cardinality' => -1,
    'settings' => ['target_type' => 'apic_app_credentials'],
  ]);
  $fieldStorageConfig->save();

  // Create a new field for the application module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'application_subscription_refs',
    'entity_type' => 'node',
    'bundle' => 'application',
    'translatable' => FALSE,
    'field_type' => 'entity_reference',
    'label' => t('Subscription References'),
    'settings' => ['handler' => 'default:apic_app_subscription', 'handler_settings' => ['target_bundles' => NULL, 'auto_create' => FALSE]],
  ]);
  $fieldConfig->save();

  // Create a new field for the application module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'application_credentials_refs',
    'entity_type' => 'node',
    'bundle' => 'application',
    'translatable' => FALSE,
    'field_type' => 'entity_reference',
    'label' => t('Credentials References'),
    'settings' => ['handler' => 'default:apic_app_credentials', 'handler_settings' => ['target_bundles' => NULL, 'auto_create' => FALSE]],
  ]);
  $fieldConfig->save();

  // Modify entity form display modes to show application_image field
  $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.application.default');
  if ($viewDisplay !== NULL) {
    // ensure we can handle this existing already too
    $component = $viewDisplay->getComponent('application_subscription_refs');
    if (isset($component)) {
      $viewDisplay->removeComponent('application_subscription_refs');
    }
    // remove old subscriptions field
    $component = $viewDisplay->getComponent('application_subscriptions');
    if (isset($component)) {
      $viewDisplay->removeComponent('application_subscriptions');
    }
    // add our new field
    $viewDisplay->setComponent('application_subscription_refs', [
      'weight' => 118,
      'label' => 'above',
      'settings' => ['link' => TRUE],
      'region' => 'content',
      'type' => 'entity_reference_label',
    ]);
    // ensure we can handle this existing already too
    $component = $viewDisplay->getComponent('application_credentials_refs');
    if (isset($component)) {
      $viewDisplay->removeComponent('application_credentials_refs');
    }
    // remove old credentials field
    $component = $viewDisplay->getComponent('application_credentials');
    if (isset($component)) {
      $viewDisplay->removeComponent('application_credentials');
    }
    // add our new field
    $viewDisplay->setComponent('application_credentials_refs', [
      'weight' => 113,
      'label' => 'above',
      'settings' => ['link' => TRUE],
      'region' => 'content',
      'type' => 'entity_reference_label',
    ]);
    $viewDisplay->save();
  }

  // Modify entity form display modes to hide the old subscriptions and credentials fields (and new ones)
  $formDisplay = \Drupal::entityTypeManager()->getStorage('entity_form_display')->load('node.application.default');
  if ($formDisplay !== NULL) {
    foreach ([
               'application_subscriptions',
               'application_subscription_refs',
               'application_credentials',
               'application_credentials_refs',
             ] as $field_name) {
      $component = $formDisplay->getComponent($field_name);
      if (isset($component)) {
        $formDisplay->removeComponent($field_name);
      }
    }
    $formDisplay->save();
  }

}


/**
 * Updates for the new subscription and credential entities
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8105() {

  // we need to load nodes so need to be admin to pass ACL checks.
  $accountSwitcher = Drupal::service('account_switcher');
  $originalUser = \Drupal::currentUser();
  if ((int) $originalUser->id() !== 1) {
    $accountSwitcher->switchTo(new UserSession(['uid' => 1]));
  }

  \Drupal::logger('apic_app.upgrade')->debug('Switching credentials and subscriptions from config to content entities.');

  \Drupal::entityDefinitionUpdateManager()->installEntityType(\Drupal::entityTypeManager()->getDefinition('apic_app_application_creds'));
  \Drupal::entityDefinitionUpdateManager()->installEntityType(\Drupal::entityTypeManager()->getDefinition('apic_app_application_subs'));

  $field_storage_config = FieldStorageConfig::loadByName('node', 'application_credentials_refs');
  $field_storage_config->setSetting('target_type', 'apic_app_application_creds');
  $field_storage_config->save();

  $field_storage_config = FieldStorageConfig::loadByName('node', 'application_subscription_refs');
  $field_storage_config->setSetting('target_type', 'apic_app_application_subs');
  $field_storage_config->save();

  $field_config = FieldConfig::loadByName('node', 'application', 'application_credentials_refs');
  $field_config->setSetting('handler', 'default:apic_app_application_creds');
  $field_config->save();

  $field_config = FieldConfig::loadByName('node', 'application', 'application_subscription_refs');
  $field_config->setSetting('handler', 'default:apic_app_application_subs');
  $field_config->save();

  \Drupal::logger('apic_app.upgrade')->debug('Deleting all apic_app.apic_app_credentials from config');

  if (\Drupal::entityTypeManager()->hasDefinition('apic_app_credentials')) {
    $query = \Drupal::entityQuery('apic_app_credentials');
    $credEntityIds = $query->execute();
    if (isset($credEntityIds) && !empty($credEntityIds)) {
      foreach ($credEntityIds as $credEntityId) {
        \Drupal::service('config.factory')
          ->getEditable('apic_app.apic_app_credentials.' . $credEntityId)
          ->delete();
      }
    }
  }

  \Drupal::logger('apic_app.upgrade')->debug('Deleting all apic_app.apic_app_subscription from config');

  if (\Drupal::entityTypeManager()->hasDefinition('apic_app_subscription')) {
    $query = \Drupal::entityQuery('apic_app_subscription');
    $subEntityIds = $query->execute();
    if (isset($subEntityIds) && !empty($subEntityIds)) {
      foreach ($subEntityIds as $subEntityId) {
        \Drupal::service('config.factory')
          ->getEditable('apic_app.apic_app_subscription.' . $subEntityId)
          ->delete();
      }
    }
  }

  \Drupal::logger('apic_app.upgrade')->debug('Deletion of all config entities complete.');

  $nodeStorage = \Drupal::entityTypeManager()->getStorage('node');
  $query = \Drupal::entityQuery('node');
  $query->condition('type', 'application');
  $nids = $query->execute();

  \Drupal::logger('apic_app.upgrade')->debug('Resetting subscription and credential fields on %num apps.', ['%num' => sizeof($nids)]);

  if (isset($nids) && !empty($nids)) {
    foreach (array_chunk($nids, 50) as $chunk) {
      $nodes = $nodeStorage->loadMultiple($chunk);
      foreach ($nodes as $node) {
        $node->set('application_credentials_refs', []);
        $node->set('application_subscription_refs', []);
        $node->save();
      }
    }
  }

  \Drupal::logger('apic_app.upgrade')->debug('Switching credentials and subscriptions done (ready for content refresh).');

  if ((int) $originalUser->id() !== 1) {
    $accountSwitcher->switchBack();
  }
}


/**
 * In apic_app_update_8105 configentities for credentials and subscriptions were converted to contententities.
 * This function completes the job by deleting the fields used before things were converted to entities and the configEntity types.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8106() {

  // delete the pre-entity fields
  $old_creds_field = FieldStorageConfig::loadByName('node', 'application_credentials');
  if ($old_creds_field) {
    $old_creds_field->delete();
  }

  $old_subs_field = FieldStorageConfig::loadByName('node', 'application_subscriptions');
  if ($old_subs_field) {
    $old_subs_field->delete();
  }

  // uninstall the credentials and subscription configEntities if they exist
  if (\Drupal::entityTypeManager()->hasDefinition('apic_app_credentials')) {
    try {
      \Drupal::entityDefinitionUpdateManager()->uninstallEntityType(\Drupal::entityTypeManager()->getDefinition('apic_app_credentials'));
    } catch (PluginNotFoundException $e) {
      \Drupal::logger('apic_app_update')->error('unable to uninstall old apic_app_credentials entity.');
    }
  }

  if (\Drupal::entityTypeManager()->hasDefinition('apic_app_subscription')) {
    try {
      \Drupal::entityDefinitionUpdateManager()->uninstallEntityType(\Drupal::entityTypeManager()->getDefinition('apic_app_subscription'));
    } catch (PluginNotFoundException $e) {
      \Drupal::logger('apic_app_update')->error('unable to uninstall old apic_app_subscription entity.');
    }
  }
}

/**
 * Making sure that application summary is translatable
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8107() {

  $apicSummaryFieldStorageConfig = FieldStorageConfig::loadByName('node', 'apic_summary');
  if ($apicSummaryFieldStorageConfig !== NULL) {
    $apicSummaryFieldStorageConfig->set('translatable', TRUE);
    $apicSummaryFieldStorageConfig->save();
  }

  $apicSummaryFieldConfig = FieldConfig::loadByName('node', 'application', 'apic_summary');
  if ($apicSummaryFieldConfig !== NULL) {
    $apicSummaryFieldConfig->set('translatable', TRUE);
    $apicSummaryFieldConfig->save();
  }
}

/**
 * update the gutter width for latest masonry views
 */
function apic_app_update_8108() {
  $view = Views::getView('applications');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0) {
      $style['options']['gutterWidth'] = "20";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
  }
}

/**
 * update the gutter width for latest masonry views
 *
 * bumped the second digit to ensure the change happens if migrating from 2018 to 10 too
 */
function apic_app_update_8201() {
  $view = Views::getView('applications');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0 || (int) $style['options']['gutterWidth'] === 20) {
      $style['options']['gutterWidth'] = "2";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
    $pager = $view->getDisplay()->getOption('pager');
    if ((int) $pager['options']['items_per_page'] === 5) {
      $pager['options']['items_per_page'] = 10;
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
    if ($pager['options']['expose']['items_per_page_options'] !== '10, 25, 50, 75') {
      $pager['options']['expose']['items_per_page_options'] = '10, 25, 50, 75';
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
  }
}

/**
 * update the empty state for the view
 *
 */
function apic_app_update_8202() {
  $view = Views::getView('applications');
  if ($view !== NULL) {
    $empty = $view->getDisplay()->getOption('empty');
    if (!isset($empty['entity_block'])) {
      $empty['entity_block'] = [
        'id' => 'entity_block',
        'table' => 'views',
        'field' => 'entity_block',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'empty' => TRUE,
        'tokenize' => TRUE,
        'target' => 'noappsblock',
        'view_mode' => 'default',
        'bypass_access' => FALSE,
        'plugin_id' => 'entity',
      ];
      if (isset($empty['area'])) {
        unset($empty['area']);
      }
      $view->getDisplay()->setOption('empty', $empty);
      $view->save();
    }
    $exposed_form = $view->getDisplay()->getOption('exposed_form');
    if ($exposed_form['options']['reset_button'] === TRUE) {
      $exposed_form['options']['reset_button'] = FALSE;
      unset($exposed_form['options']['bef']['sort']['bef_format']);
      $exposed_form['options']['bef']['sort']['plugin_id'] = 'default';
      $exposed_form['options']['bef']['sort']['advanced']['combine'] = TRUE;
      $view->getDisplay()->setOption('exposed_form', $exposed_form);
      $view->save();
    }
    $filters = $view->getDisplay()->getOption('filters');
    if (isset($filters['application_lifecycle_state_value'])) {
      unset($filters['application_lifecycle_state_value']);
    }
    if (isset($filters['apic_state_value'])) {
      unset($filters['apic_state_value']);
    }
    $view->getDisplay()->setOption('filters', $filters);
    $view->save();
    $sorts = $view->getDisplay()->getOption('sorts');
    if (isset($sorts['application_lifecycle_state_value'])) {
      unset($sorts['application_lifecycle_state_value']);
    }
    if (isset($sorts['apic_state_value'])) {
      unset($sorts['apic_state_value']);
    }
    $view->getDisplay()->setOption('sorts', $sorts);
    $view->save();
  }
}

/**
 * Delete existing payment methods and update the db schema
 * the data will be repopulated by apim
 */
function apic_app_update_8203() {
  $tables = ['apic_app_application_creds', 'apic_app_application_subs'];
  $database = \Drupal::database();
  // Retrieve existing field data in apic_app entity tables.
  foreach ($tables as $table) {
    // Delete any table data.
    if ($database->schema() !== NULL && $database->schema()->tableExists($table)) {
      $database->truncate($table)->execute();
    }
  }
  try {
    $entityDefUpManager = \Drupal::service('ibm_apim.apic_definition_update_manager');
    $entityDefUpManager->applyUpdates();
    if ($database->schema() !== NULL && $database->schema()->tableExists("apic_app_application_subs")) {
      Database::getConnection()->schema()->changeField('apic_app_application_subs', 'id', 'id', [
        'type' => 'int',
        'not null' => TRUE,
        'auto_increment' => TRUE,
      ]);

      $storage_definition = BaseFieldDefinition::create('string')
        ->setLabel(t('UUID'))
        ->setDescription(t('The UUID of the Subscription entity.'))
        ->setReadOnly(TRUE);
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition('uuid', 'apic_app_application_subs', 'apic_app', $storage_definition);
    }
    if ($database->schema() !== NULL && $database->schema()->tableExists("apic_app_application_creds")) {
      Database::getConnection()->schema()->changeField('apic_app_application_creds', 'id', 'id', [
        'type' => 'int',
        'not null' => TRUE,
        'auto_increment' => TRUE,
      ]);

      $storage_definition = BaseFieldDefinition::create('string')
        ->setLabel(t('UUID'))
        ->setDescription(t('The UUID of the Application Credentials entity.'))
        ->setReadOnly(TRUE);
      \Drupal::entityDefinitionUpdateManager()
        ->installFieldStorageDefinition('uuid', 'apic_app_application_creds', 'apic_app', $storage_definition);
    }
    \Drupal::logger('apic_app: ')->notice('Successfully applied updates');
  } catch (EntityStorageException $e) {
    \Drupal::logger('apic_app: ')->notice('error: @error', ['@error' => $e->getMessage()]);
  }
}

/**
 * Store APIC created_at and updated_at timestamps
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apic_app_update_8204() {
  // Create a new field for the application module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'apic_created_at',
    'field_type' => 'timestamp',
    'entity_type' => 'node',
    'bundle' => 'application',
    'translatable' => FALSE,
    'label' => t('Creation time'),
  ]);
  $fieldConfig->save();

  // Create a new field for the application module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'apic_updated_at',
    'field_type' => 'timestamp',
    'entity_type' => 'node',
    'bundle' => 'application',
    'translatable' => FALSE,
    'label' => t('Modification time'),
  ]);
  $fieldConfig->save();

  // update entities
  $database = \Drupal::database();
  try {
    $entityDefUpManager = \Drupal::service('ibm_apim.apic_definition_update_manager');
    $entityDefUpManager->applyUpdates();
    foreach (['apic_app_application_subs', 'apic_app_application_creds'] as $entityType) {
      if ($database->schema() !== NULL && $database->schema()->tableExists($entityType)) {
        $created_at = BaseFieldDefinition::create('timestamp')
          ->setLabel(t('Creation time'))
          ->setDescription(t('The APIC creation timestamp'))
          ->setDefaultValue(0)
          ->setReadOnly(TRUE);
        \Drupal::entityDefinitionUpdateManager()
          ->installFieldStorageDefinition('created_at', $entityType, 'apic_app', $created_at);

        $updated_at = BaseFieldDefinition::create('timestamp')
          ->setLabel(t('Modification time'))
          ->setDescription(t('The APIC modification timestamp'))
          ->setDefaultValue(0)
          ->setReadOnly(TRUE);
        \Drupal::entityDefinitionUpdateManager()
          ->installFieldStorageDefinition('updated_at', $entityType, 'apic_app', $updated_at);
      }
    }
    \Drupal::logger('apic_app: ')->notice('Successfully applied entity updates');
  } catch (EntityStorageException $e) {
    \Drupal::logger('apic_app: ')->notice('error: @error', ['@error' => $e->getMessage()]);
  }
}


/**
 * Set additional indexes on apic_app_application_subs and
 * apic_app_application_creds tables
 */
function apic_app_update_8205() {
  $table = 'apic_app_application_creds';
  $classValue = ApplicationCredentialsSchema::class;
  applyTableIndexUpdates($table, $classValue, array('uuid', 'app_url'));

  $table = 'apic_app_application_subs';
  $classValue = ApplicationSubscriptionSchema::class;
  applyTableIndexUpdates($table, $classValue, array('uuid', 'consumerorg_url', 'app_url', 'product_url'));

  // Set an index on the apic_url_value column of the node__apic_url table
  $field_storage_configs = FieldStorageConfig::loadByName('node', 'apic_url');
  $field_storage_configs->setIndexes(array('value' => array('value')));
  $field_storage_configs->save();
}

/**
 * Clear the application_credentials_refs and application_subscription_refs tables so that we
 * run the entity updates on them.
 */
function apic_app_update_8206() {
  $database = \Drupal::database();
  $tables = [
    'node__application_credentials_refs',
    'node_revision__application_credentials_refs',
    'node__application_subscription_refs',
    'node_revision__application_subscription_refs',
  ];

  foreach ($tables as $table) {
    if ($database->schema() !== NULL && $database->schema()->tableExists($table)) {
      $database->truncate($table)->execute();
    }
  }

  try {
    $entityDefUpManager = \Drupal::service('ibm_apim.apic_definition_update_manager');
    $entityDefUpManager->applyUpdates();
  } catch (Throwable $e) {
    \Drupal::logger('apic_app: ')->notice('error: @error', ['@error' => $e->getMessage()]);
  }
}

/**
 * Remove user.role.authenticated as a dependency as when we disbale forums it mean it would also remove
 * this view.
 */
function apic_app_update_8207() {
  apic_app_removeConfigDependency("views.view.applications", "user.role.authenticated");
}

function apic_app_removeConfigDependency($config, $dep) {
  \Drupal::logger('apic_app')->notice('Checking @config for @dep.', ['@config' => $config, '@dep' => $dep]);
  try {
    $key = 'dependencies.config';
    $view = \Drupal::configFactory()->getEditable($config);
    $fields = $view->get($key);

    $updatedFields = \array_filter($fields, static function ($element) use($dep) {
      return $element !== $dep;
    });

    \Drupal::logger('apic_app')->notice('Setting @config to @dep.', ['@config' => $config, '@dep' => $updatedFields]);

    $view->set($key, $updatedFields);
    $view->save();
  } catch (Throwable $e) {
    \Drupal::logger('apic_app')->notice('error: @error', ['@error' => $e->getMessage()]);
  }
}

/**
 * Ensures that the correct storage schema class is set for the
 * given entity (table).  Also ensures that indexes are set on the
 * given array of field names.
 */
function applyTableIndexUpdates($table, $storageClass, $indexFields) {
  $manager = \Drupal::entityDefinitionUpdateManager();

  // Get the current entity type definition, ensure the storage schema
  // class is set.
  $entity_type = $manager->getEntityType($table)
    ->setHandlerClass('storage_schema', $storageClass);

  // Regenerate entity type indexes.
  $manager->updateEntityType($entity_type);

  foreach ($indexFields as $field_name) {
    $manager->updateFieldStorageDefinition($manager->getFieldStorageDefinition($field_name, $table));
  }
}

/**
 * Implements hook_update_dependencies().
 */
function apic_app_update_dependencies(): array {
  return [
    'system' => [
      8803 => [
        'apic_app' => 8106,
      ],
    ],
    'apic_app' => [
      8204 => [
        'consumerorg' => 8201,
      ],
    ],
  ];
}
