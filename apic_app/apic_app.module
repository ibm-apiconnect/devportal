<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2025
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides the application integration with APIC.
 */

use Drupal\Core\Url;
use Drupal\node\Entity\Node;
use Drupal\user\Entity\User;

/* Define a single permission to be granted */
define('APPLICATION_GRANT', 1);

/**
 * @param $variables
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException|\Drupal\Core\Entity\EntityMalformedException
 */
function apic_app_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'application') {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
    // get global settings first
    $config = \Drupal::config('ibm_apim.settings');
    $ibmApimShowPlaceholderImages = (boolean) $config->get('show_placeholder_images');
    if ($ibmApimShowPlaceholderImages === NULL) {
      $ibmApimShowPlaceholderImages = TRUE;
    }
    $variables['showPlaceholders'] = $ibmApimShowPlaceholderImages;
    if ($ibmApimShowPlaceholderImages) {
      $rawImage = \Drupal::service('apic_app.application')->getRandomImageName($variables['node']->getTitle());
      $variables['placeholderUrl'] = base_path() . \Drupal::service('extension.list.module')->getPath('apic_app') . '/images/' . $rawImage;
    }
    else {
      $variables['placeholderUrl'] = NULL;
    }

    $variables['events_found'] = \Drupal::service('apic_api.utils')->areEventAPIsPresent();

    if ($variables['view_mode'] === 'full') {
      $userUtils = \Drupal::service('ibm_apim.user_utils');
      $variables['userHasAppManage'] = $userUtils->checkHasPermission('app:manage');
      $variables['userHasSubView'] = $userUtils->checkHasPermission('subscription:view');
      $variables['userHasSubManage'] = $userUtils->checkHasPermission('subscription:manage');
      $variables['appImageUploadEnabled'] = (boolean) $config->get('application_image_upload');
      $moduleHandler = \Drupal::service('module_handler');
      $variables['contact'] = $moduleHandler->moduleExists('contact');
      $variables['site_admin_email'] = \Drupal::config('system.site')->get('mail');
      $ibmApimShowVersions = (boolean) $config->get('showVersions');
      if ($ibmApimShowVersions === NULL) {
        $ibmApimShowVersions = TRUE;
      }
      $variables['showVersions'] = $ibmApimShowVersions;
      $credentials = $variables['node']->application_credentials_refs->referencedEntities();

      if ($credentials !== NULL && is_array($credentials)) {
        $credentialsArray = [];
        foreach ($credentials as $cred) {
          $credentialsArray[] = $cred->toArray();
        }
        $variables['credentials'] = $credentialsArray;
        $variables['#attached']['drupalSettings']['application']['credentials'] = $credentialsArray;
      }
      $variables['subscriptions'] = \Drupal::service('apic_app.application')->getSubscriptions($variables['node']);
    }
    $variables['apic_state'] = $variables['node']->apic_state->value;
    $variables['applifecycleEnabled'] = (boolean) \Drupal::state()->get('ibm_apim.applifecycle_enabled');
    // custom fields
    $viewMode = $variables['view_mode'];
    if ($viewMode === 'full') {
      $viewMode = 'default';
    }
    $diff = [];
    $entityView = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load('node.application.' . $viewMode);
    if ($entityView !== NULL) {
      $fieldList = array_keys($entityView->getComponents());
      $coreFields = [
        'title',
        'vid',
        'status',
        'nid',
        'revision_log',
        'created',
        'links',
      ];
      $ibmFields = \Drupal::service('apic_app.application')->getIBMFields();
      $merged = array_merge($coreFields, $ibmFields);
      $diff = array_diff($fieldList, $merged);
    }
    $variables['custom_fields'] = $diff;
    $variables['billing_enabled'] = (boolean) \Drupal::state()->get('ibm_apim.billing_enabled');

    // set analytics variables if it is enabled
    $analyticsClientUrl = NULL;
    $org = NULL;
    $userUrl = NULL;
    $portalAnalyticsService = \Drupal::service('ibm_apim.analytics')->getDefaultService();
    if ($portalAnalyticsService !== NULL) {
      $analyticsClientUrl = $portalAnalyticsService->getClientEndpoint();
    }
    $user = User::load(\Drupal::currentUser()->id());
    if ($user !== NULL) {
      $userUrl = $user->get('apic_url')->value;
      $org = \Drupal::service('ibm_apim.consumerorg')->get($variables['node']->application_consumer_org_url->value);
      $show_analytics = (boolean) $config->get('show_analytics');
    }
    if ($variables['view_mode'] === 'full') {
      if ($org !== NULL && $analyticsClientUrl !== NULL && $userUrl !== NULL && $org->hasPermission($userUrl, 'app-analytics:view') && $show_analytics) {
        $url = Url::fromRoute('ibm_apim.analyticsproxy')->toString(TRUE)->getGeneratedUrl();
        $dashboard = \Drupal::config('ibm_apim.settings')->get('analytics_dashboard');
        if (empty($dashboard)) {
          $dashboard = ['total_calls', 'total_errors', 'avg_response', 'num_calls', 'status_codes', 'top_products', 'top_apis', 'response_time', 'num_throttled', 'num_errors', 'call_table'];
        }
        $filters = \Drupal::config('ibm_apim.settings')->get('analytics_filters');
        if (empty($filters)) {
          $filters = ['api_name', 'api_version', 'product_name', 'product_version', 'plan_name'];
        }
        $variables['#attached']['library'][] = 'ibm_apim/analytics';
        $variables['#attached']['drupalSettings']['analytics']['proxyURL'] = $url;
        $variables['#attached']['drupalSettings']['analytics']['locale'] = \Drupal::service('ibm_apim.utils')->convert_lang_name(\Drupal::languageManager()->getCurrentLanguage()->getId());
        $variables['#attached']['drupalSettings']['analytics']['application_id'] = $variables['node']->application_id->value;
        $variables['#attached']['drupalSettings']['analytics']['dashboard'] = $dashboard;
        $variables['#attached']['drupalSettings']['analytics']['filters'] = $filters;
        $variables['analytics_access'] = TRUE;
      }
      else {
        $variables['analytics_access'] = FALSE;
      }
      $consumerorg_url = \Drupal::service('ibm_apim.user_utils')->getCurrentConsumerOrg()['url'];
      if ($consumerorg_url !== NULL && $consumerorg_url === $variables['node']->application_consumer_org_url->value) {
        $variables['notifications_access'] = TRUE;
      }
      else {
        $variables['notifications_access'] = FALSE;
      }
    }

    $variables['#attached']['drupalSettings']['application']['id'] = $variables['node']->application_id->value;
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 *
 * @param $implementations
 * @param $hook
 */
function apic_app_module_implements_alter(&$implementations, $hook) {
  if (($hook === 'form_alter' || $hook === 'menu_links_discovered_alter') && isset($implementations['apic_app'])) {
    $group = $implementations['apic_app'];
    unset($implementations['apic_app']);
    $implementations['apic_app'] = $group;
  }
}

/**
 * Implements hook_preprocess_field_multiple_value_form().
 *
 * @param $variables
 */
function apic_app_preprocess_field_multiple_value_form(&$variables) {
  if ($variables['element']['#field_name'] === 'application_redirect_endpoints') {

    // This code removes the ability to sort the redirect endpoints
    // which drupal allows by default but doesn't make sense in this case
    unset($variables['table']['#tabledrag']);
    // Remove re-order header column
    if (isset($variables['table']['#header'])) {
      foreach ($variables['table']['#header'] as $header_i => $header) {
        if (is_object($header) && (string) $header === 'Order') {
          unset($variables['table']['#header'][$header_i]);
        }
      }
    }
    // Loop table rows
    if (isset($variables['table']['#rows'])) {
      foreach ($variables['table']['#rows'] as &$row) {
        // Remove draggable class from tr
        $i = array_search('draggable', $row['class'], FALSE);
        if ($i !== FALSE) {
          unset($row['class'][$i]);
        }
        // Loop columns in row
        foreach ($row['data'] as $col_i => &$col) {
          if (empty($col['class'])) {
            continue;
          }
          // Remove td with drag handle
          $i = array_search('field-multiple-drag', $col['class'], FALSE);
          if ($i !== FALSE) {
            unset($row['data'][$col_i]);
          }
          // Remove td with re-ordering select
          $i = array_search('delta-order', $col['class'], FALSE);
          if ($i !== FALSE) {
            unset($row['data'][$col_i]);
          }
        }
        unset($col);
      }
      unset($row);
    }
    if (isset($variables['button'])) {
      $variables['button']['#attributes']['class'][] = 'apicTertiary';
    }
  }
}

/**
 * When a consumer org is deleted also delete all of its applications
 *
 * @param Node $node A consumer org node
 * @param $data
 */
function apic_app_consumerorg_pre_delete($node, $data) {
  if (isset($node)) {
    // remove applications that belong to the consumer org
    $query = \Drupal::entityQuery('node');
    $query->condition('type', 'application');
    $query->condition('application_consumer_org_url.value', $node->consumerorg_url->value);
    $results = $query->accessCheck()->execute();
    if (isset($results) && !empty($results)) {
      $appNids = array_values($results);
      foreach ($appNids as $appNid) {
        \Drupal::service('apic_app.application')->deleteNode((int) $appNid, 'comsumerorg_cascade');
      }
    }
  }
}

/**
 * Need to use our custom content type templates
 *
 * @param $variables
 * @param $hook
 * @param $info
 */

function apic_app_preprocess(&$variables, $hook, &$info) {
  if ($hook === 'node') {
    $contentTypeToShow = $variables['node']->bundle();
    if ($contentTypeToShow === 'application') {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      //Load the view mode names.
      $allViewModes = \Drupal::service('entity_display.repository')->getViewModes('node');
      //View mode for this request.
      $viewModeToUse = $variables['view_mode'];
      //Is the view mode defined for nodes?
      if (array_key_exists($viewModeToUse, $allViewModes)) {
        //Is there a template file for the view modes in the module?
        if ($viewModeToUse === 'full') {
          $templateFileName = 'node--' . $contentTypeToShow;
        }
        else {
          $templateFileName = 'node--' . $contentTypeToShow . '--' . $viewModeToUse;
        }
        $themeName = \Drupal::theme()->getActiveTheme()->getName();
        $themePath = \Drupal::theme()->getActiveTheme()->getPath();
        if (file_exists($themePath . '/templates/node/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($themeName);
          $info['path'] = \Drupal::service('extension.list.theme')->getPath($themeName) . '/templates/node';
          $info['template'] = $templateFileName;
        }
        elseif (file_exists($themePath . '/templates/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($themeName);
          $info['path'] = \Drupal::service('extension.list.theme')->getPath($themeName) . '/templates';
          $info['template'] = $templateFileName;
        }
        else {
          $templateFilePath = \Drupal::service('extension.list.module')
              ->getPath('apic_app') . '/templates/' . $templateFileName . '.html.twig';
          if (file_exists($templateFilePath)) {
            $info['theme path'] = \Drupal::service('extension.list.module')->getPath('apic_app');
            $info['path'] = \Drupal::service('extension.list.module')->getPath('apic_app') . '/templates';
            $info['template'] = $templateFileName;
          }
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }
}