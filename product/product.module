<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2020
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides the product integration with APIC.
 */

use Drupal\apic_api\Api;
use Drupal\Component\Utility\Html;
use Drupal\Core\Access\AccessResultAllowed;
use Drupal\Core\Access\AccessResultForbidden;
use Drupal\Core\Access\AccessResultNeutral;
use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\file\Entity\File;
use Drupal\node\Entity\Node;
use Drupal\node\NodeInterface;
use Drupal\product\Product;
use Drupal\views\ViewExecutable;
use Drupal\views\Plugin\views\query\QueryPluginBase;

/* Permissions that can be granted */
define('EDIT_ANY_PRODUCT_CONTENT_GRANT', 1);
define('PUBLIC_PRODUCT_GRANT', 2);
define('AUTHENTICATED_PRODUCT_GRANT', 3);
define('SUBSCRIBED_TO_PRODUCT_GRANT', 4);
define('ORG_PRODUCT_GRANT', 5);
define('TAG_PRODUCT_GRANT', 6);

/* Return the permission strings so that they can be displayed in the ACL log
 *
 * @param gid
 * @return string
 */
function product_permission_value($gid) {
  switch ($gid) {
    case EDIT_ANY_PRODUCT_CONTENT_GRANT:
      return 'EDIT_ANY_PRODUCT_CONTENT_GRANT';
    case PUBLIC_PRODUCT_GRANT:
      return 'PUBLIC_PRODUCT_GRANT';
    case AUTHENTICATED_PRODUCT_GRANT:
      return 'AUTHENTICATED_PRODUCT_GRANT';
    case SUBSCRIBED_TO_PRODUCT_GRANT:
      return 'SUBSCRIBED_TO_PRODUCT_GRANT';
    case ORG_PRODUCT_GRANT:
      return 'ORG_PRODUCT_GRANT';
    case TAG_PRODUCT_GRANT:
      return 'TAG_PRODUCT_GRANT';
    default:
      return 'Permission Value Not Known';
  }
}

/**
 * Implements hook_node_access_records().
 *
 * For product nodes, create a list of grants for the node based on available
 * capabilities within the node configuration; where the capabilities are
 * specific to individual products, organisations or tags then use realm named
 * after product id, organisation or tag
 *
 * @param $node
 *
 * @return array
 *
 * Note: hook is called when rebuilding permissions
 */
function product_node_access_records($node) {

  ibm_apim_entry_trace(__CLASS__ . '::' . __FUNCTION__, NULL);

  $config = \Drupal::config('ibm_apim.settings');
  $aclDebug = (boolean) $config->get('acl_debug');

  $type = is_string($node) ? $node : $node->getType();
  $grants = [];

  // Only build permissions for product nodes
  if ($type === 'product') {
    // This is just too much debug; enable for special cases only
    //    if ($aclDebug === TRUE) {
    //      \Drupal::logger('ACLDEBUG')
    //        ->debug('Product Title: %title', ['%title' => $node->getTitle()]);
    //    }
    // Only issue grants if product_view is enabled
    if (isset($node->product_view_enabled->value) && (int) $node->product_view_enabled->value === 1) {
      // If the product is deprecated, only allow subscribers
      $state = $node->product_state->value;
      if ($state === NULL || empty($state) || mb_strtolower($state) === 'deprecated') {
        $pref = str_replace('/', '_', $node->apic_url->value);
        $grants[] = [
          'realm' => 'product_ref_' . $pref,
          'gid' => SUBSCRIBED_TO_PRODUCT_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
      }
      else {
        // Create a grant for 'edit any product content'
        $grants[] = [
          'realm' => 'product',
          'gid' => EDIT_ANY_PRODUCT_CONTENT_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
        // Create a grant for public access if public is set
        if ($node->product_visibility_public->value !== NULL && (int) $node->product_visibility_public->value === 1) {
          $grants[] = [
            'realm' => 'product',
            'gid' => PUBLIC_PRODUCT_GRANT,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          ];
        }
        // Create a grant for authenticated access if authenticated is set
        if (isset($node->product_visibility_authenticated->value) && (int) $node->product_visibility_authenticated->value === 1) {
          $grants[] = [
            'realm' => 'product',
            'gid' => AUTHENTICATED_PRODUCT_GRANT,
            'grant_view' => 1,
            'grant_update' => 0,
            'grant_delete' => 0,
            'priority' => 0,
          ];
        }
        // Create a grant for subscription to this node based on product reference
        $pref = str_replace('/', '_', $node->apic_url->value);
        $grants[] = [
          'realm' => 'product_ref_' . $pref,
          'gid' => SUBSCRIBED_TO_PRODUCT_GRANT,
          'grant_view' => 1,
          'grant_update' => 0,
          'grant_delete' => 0,
          'priority' => 0,
        ];
        // Create a grant for all organisations (as separate realms) if org visibility is set
        if (isset($node->product_visibility_custom_orgs)) {
          foreach ($node->product_visibility_custom_orgs->getValue() as $customOrg) {
            if ($customOrg['value'] !== NULL) {
              $url = str_replace('/', '_', $customOrg['value']);
              $grants[] = [
                'realm' => 'product_org_' . $url,
                'gid' => ORG_PRODUCT_GRANT,
                'grant_view' => 1,
                'grant_update' => 0,
                'grant_delete' => 0,
                'priority' => 0,
              ];
            }
          }
        }
      }
      // Create a grant for all tags (as separate realms) if tag visibility is set
      if (isset($node->product_visibility_custom_tags)) {
        foreach ($node->product_visibility_custom_tags->getValue() as $customTag) {
          if ($customTag['value'] !== NULL) {
            $url = str_replace('/', '_', $customTag['value']);
            $grants[] = [
              'realm' => 'product_tag_' . $url,
              'gid' => TAG_PRODUCT_GRANT,
              'grant_view' => 1,
              'grant_update' => 0,
              'grant_delete' => 0,
              'priority' => 0,
            ];
          }
        }
      }
    }
    if ($aclDebug === TRUE) {
      foreach ($grants as $grant) {
        \Drupal::logger('ACLDEBUG')->debug('Realm: @realm granted: @grant', [
          '@realm' => $grant['realm'],
          '@grant' => product_permission_value($grant['gid']),
        ]);
      }
    }
  }
  ibm_apim_exit_trace(__CLASS__ . '::' . __FUNCTION__, $grants);
  return $grants;
}

/**
 * Implements hook_node_grants().
 *
 * @param $account
 * @param $op
 *
 * @return array
 *
 * Note: hook is not called at all when admin logged in
 * Note: hook is called on every login, logout and page load
 */
function product_node_grants($account, $op) {

  ibm_apim_entry_trace(__CLASS__ . '::' . __FUNCTION__, NULL);

  $config = \Drupal::config('ibm_apim.settings');
  $aclDebug = (boolean) $config->get('acl_debug');

  $grants = [];
  $grants['product'] = [];

  // Grant everyone PUBLIC_PRODUCT_GRANT
  $grants['product'][] = PUBLIC_PRODUCT_GRANT;

  // If logged in, grant AUTHENTICATED_PRODUCT_GRANT
  if (\Drupal::currentUser()->isAuthenticated()) {
    $grants['product'][] = AUTHENTICATED_PRODUCT_GRANT;
  }

  $userUtils = \Drupal::service('ibm_apim.user_utils');
  // If 'edit any product content' is set, grant EDIT_ANY_PRODUCT_CONTENT_GRANT
  if ($userUtils->explicitUserAccess('edit any product content')) {
    $grants['product'][] = EDIT_ANY_PRODUCT_CONTENT_GRANT;
  }
 
  // Subscriptions and tags are only set for orgs, so only run that code
  // if the user is in a development organisation
  $myOrg = $userUtils->getCurrentConsumerOrg();
  if (isset($myOrg['url'])) {

    // Grant ORG_PRODUCT_GRANT for a realm representing the user's org
    $orgUrl = $myOrg['url'];
    $escapedOrgUrl = str_replace('/', '_', $orgUrl);
    $grants['product_org_' . $escapedOrgUrl] = [ORG_PRODUCT_GRANT];

    // Check for subscriptions, if they exist add a SUBSCRIBED_TO_PRODUCT_GRANT
    // for each subscription to a product-specific realm
    $options = ['target' => 'default'];
    $query = Database::getConnection($options['target'])
      ->query("SELECT * FROM apic_app_application_subs WHERE consumerorg_url = '". $orgUrl . "'", [], $options);
    $subResults = $query->fetchAll();
    foreach ($subResults as $sub) {
      if ($sub !== NULL && $sub->product_url !== NULL) {
        $pref = str_replace('/', '_', $sub->product_url);
        $grants['product_ref_' . $pref] = [SUBSCRIBED_TO_PRODUCT_GRANT];
      }
    }

    // Check for custom tags, if they exist add a TAG_PRODUCT_GRANT for
    // each tag in a tag-specific realm
    $query = Database::getConnection($options['target'])
      ->query("SELECT tags.consumerorg_tags_value as consumerorg_tags_value
FROM `node__consumerorg_url` id
INNER JOIN `node__consumerorg_tags` tags ON id.entity_id = tags.entity_id
WHERE (id.consumerorg_url_value = '" . $orgUrl . "')", [], $options);
    $doResults = $query->fetchAll();
    $tags = [];
    foreach ($doResults as $do) {
      $tags[] = $do->consumerorg_tags_value;
    }
    if ($tags !== NULL && is_array($tags) && count($tags) > 0) {
      foreach ($tags as $customTag) {
        if ($customTag !== NULL) {
          $url = str_replace('/', '_', $customTag);
          $grants['product_tag_' . $url] = [TAG_PRODUCT_GRANT];
        }
      }
    }
  }

  if ($aclDebug === TRUE) {
    foreach ($grants as $realm => $perms) {
      foreach ($perms as $grant) {
        \Drupal::logger('ACLDEBUG')->debug('Realm: @realm granted: @grant', [
          '@realm' => $realm,
          '@grant' => product_permission_value($grant),
        ]);
      }
    }
  }
  ibm_apim_exit_trace(__CLASS__ . '::' . __FUNCTION__, $grants);
  return $grants;
}

/**
 * Implements hook_node_access().
 * This is checking if the specified product is accessible to the current user, if not it blocks access.
 *
 * @param \Drupal\node\NodeInterface $node
 * @param $operation
 * @param \Drupal\Core\Session\AccountInterface $account
 *
 * @return \Drupal\Core\Access\AccessResultAllowed|\Drupal\Core\Access\AccessResultForbidden|\Drupal\Core\Access\AccessResultNeutral
 */
function product_node_access(NodeInterface $node, $operation, AccountInterface $account) {
  $type = $node->type;
  if ($type === 'product' && $operation === 'view') {
    if (Product::checkAccess($node)) {
      $access = new AccessResultAllowed();
    }
    else {
      $access = new AccessResultForbidden();
    }
  }
  else {
    $access = new AccessResultNeutral();
  }
  return $access;
}

/**
 * Need to use our custom content type templates
 *
 * @param $variables
 * @param $hook
 * @param $info
 */
function product_preprocess(&$variables, $hook, &$info) {
  if ($hook === 'node') {
    $contentTypeToShow = $variables['node']->bundle();
    if ($contentTypeToShow === 'product') {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      //Load the view mode names.
      $allViewModes = \Drupal::service('entity_display.repository')->getViewModes('node');
      //View mode for this request.
      $viewModeToUse = $variables['view_mode'];
      //Is the view mode defined for nodes?
      if (array_key_exists($viewModeToUse, $allViewModes)) {
        //Is there a template file for the view modes in the module?
        if ($viewModeToUse === 'full') {
          $templateFileName = 'node--' . $contentTypeToShow;
        }
        else {
          $templateFileName = 'node--' . $contentTypeToShow . '--' . $viewModeToUse;
        }

        $themeName = \Drupal::theme()->getActiveTheme()->getName();
        $themePath = \Drupal::theme()->getActiveTheme()->getPath();
        if (file_exists($themePath . '/templates/node/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = drupal_get_path('theme', $themeName);
          $info['path'] = drupal_get_path('theme', $themeName) . '/templates/node';
          $info['template'] = $templateFileName;
        }
        elseif (file_exists($themePath . '/templates/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = drupal_get_path('theme', $themeName);
          $info['path'] = drupal_get_path('theme', $themeName) . '/templates';
          $info['template'] = $templateFileName;
        }
        else {
          $templateFilePath = drupal_get_path('module', 'product') . '/templates/' . $templateFileName . '.html.twig';
          if (file_exists($templateFilePath)) {
            $info['theme path'] = drupal_get_path('module', 'product');
            $info['path'] = drupal_get_path('module', 'product') . '/templates';
            $info['template'] = $templateFileName;
          }
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function product_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {

  if ($view->id() === 'product_content') {
    foreach ($query->where as &$condition_group) {
          foreach ($condition_group['conditions'] as &$condition) {
            if ($condition['field'] === 'node_field_data.nid = :node_field_data_nid') {
              $condition['field'] = 'node__product_api_nids.entity_id = :node_field_data_nid';
            }
          }
        }
    $configuration = array(
              'type'       => 'LEFT',
              'table'      => 'node__product_api_nids',
              'field'      => 'product_api_nids_value',
              'left_table' => 'node_field_data',
              'left_field' => 'nid',
              'operator'   => '=',
            );

    $join = \Drupal\views\Views::pluginManager('join')
          ->createInstance('standard', $configuration);
    $rel = $query->addRelationship('node__product_api_nids', $join, 'node_field_data');
    $query->addTable('node__product_api_nids', $rel, $join, 'node__product_api_nids');
  }

}

/**
 * @param $variables
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityMalformedException
 */
function product_preprocess_node(&$variables) {
  if ($variables['node']->getType() === 'product') {
    ibm_apim_entry_trace(__FUNCTION__, NULL);

    $keySvg = file_get_contents(drupal_get_path('module', 'product') . '/images/key.svg');
    $variables['key_svg'] = $keySvg;

    // get global settings first
    $config = \Drupal::config('ibm_apim.settings');
    $planService = \Drupal::service('product.plan');
    $ibmApimShowPlaceholderImages = (boolean) $config->get('show_placeholder_images');
    if ($ibmApimShowPlaceholderImages === NULL) {
      $ibmApimShowPlaceholderImages = TRUE;
    }
    $variables['showPlaceholders'] = $ibmApimShowPlaceholderImages;
    if ($ibmApimShowPlaceholderImages) {
      $placeholderUrl = Product::getPlaceholderImageURL($variables['node']->getTitle());
      $variables['placeholderUrl'] = $placeholderUrl;
    }
    else {
      $variables['placeholderUrl'] = NULL;
    }
    $ibmApimShowVersions = (boolean) $config->get('show_versions');
    if ($ibmApimShowVersions === NULL) {
      $ibmApimShowVersions = TRUE;
    }
    $variables['showVersions'] = $ibmApimShowVersions;

    $selfSignUpEnabled = (boolean) \Drupal::state()->get('ibm_apim.selfSignUpEnabled');
    if ($selfSignUpEnabled === NULL) {
      $selfSignUpEnabled = TRUE;
    }
    $variables['selfSignUpEnabled'] = $selfSignUpEnabled;

    // get API count
    $variables['apiCount'] = 0;
    $apiNids = [];
    $productApis = [];

    foreach ($variables['node']->product_apis->getValue() as $arrayValue) {
      $productApis[] = unserialize($arrayValue['value'], ['allowed_classes' => FALSE]);
    }
    if ($productApis !== NULL && is_array($productApis)) {
      $variables['apiCount'] = count($productApis);
    }
    if ($variables['apiCount'] > 0) {
      // pre-process the list of APIs in the product
      $apiNames = [];
      $apiRefs = [];
      foreach ($productApis as $key => $productApi) {
        $apiNames[] = $productApi['name'];
        $apiRefs[$key] = Html::getClass($productApi['name']);
      } // end for
      $query = \Drupal::entityQuery('node');
      $query->condition('type', 'api');
      $query->condition('status', 1);
      $query->condition('apic_ref.value', $apiNames, 'IN');
      $results = $query->execute();
      if ($results !== NULL && !empty($results)) {
        $apiNids = array_values($results);
      }
      $apiList = [];
      // safety net to avoid blowing OOM - don't load APIs if there are more than 100
      $apiCount = count($apiNids);
      if ($apiCount > 0 && $apiCount < 100) {
        $apis = Node::loadMultiple($apiNids);
        $lang_code = \Drupal::languageManager()->getCurrentLanguage()->getId();
        foreach ($apis as $key=>$api) {
          // ensure use the translated version of api nodes
          $hasTranslation = $api->hasTranslation($lang_code);
          if ($hasTranslation === TRUE) {
            $api = $api->getTranslation($lang_code);
            $apis[$key] = $api;
          }
          $fid = $api->apic_image->getValue();
          $apiImageUrl = NULL;
          if ($fid !== NULL && !empty($fid) && isset($fid[0]['target_id'])) {
            $file = File::load($fid[0]['target_id']);
            if ($file !== NULL) {
              $apiImageUrl = $file->createFileUrl();
            }
          }

          $placeholderUrl = NULL;
          if ($ibmApimShowPlaceholderImages) {
            $placeholderUrl = Api::getPlaceholderImageURL($api->getTitle());
          }
          $swagger = NULL;
          if (isset($api->api_swagger->value)) {
            $swagger = unserialize($api->api_swagger->value, ['allowed_classes' => FALSE]);
          }
          $listEntry = [
            'node' => $api,
            'icon' => $apiImageUrl,
            'placeholderUrl' => $placeholderUrl,
            'swagger' => $swagger,
          ];
          $apiList[] = $listEntry;

        } // end for
      }
      $variables['apiList'] = $apiList;
      if ($variables['view_mode'] === 'full' || $variables['view_mode'] === 'subscribewizard') {
        // pre-process the list of plans in the product
        $planArray = [];
        $productPlans = [];
        foreach ($variables['node']->product_plans->getValue() as $arrayValue) {
          $productPlans[] = unserialize($arrayValue['value'], ['allowed_classes' => FALSE]);
        }
        if ($productPlans !== NULL && is_array($productPlans) && count($productPlans) > 0) {
          foreach ($productPlans as $plan) {
            $planId = $variables['node']->apic_url->value . ':' . $plan['name'];
            $planArray[$planId] = $planService->process($planId, $plan, $apiList, $apiRefs);
            if (isset($plan['deploymentState'])) {
              $planArray[$planId]['deploymentState'] = $plan['deploymentState'];
            }
            if (isset($plan['supersedes'])) {
              $planArray[$planId]['supersedes'] = $plan['supersedes'];
            }
            if (isset($plan['superseded-by'])) {
              $planArray[$planId]['superseded-by'] = $plan['superseded-by'];
            }
            $approveStr = 'false';
            if (isset($plan['approval']) && (boolean) $plan['approval'] === TRUE) {
              $approveStr = 'true';
            }
            if (!isset($plan['billing-model'])) {
              $plan['billing-model'] = [];
            }
            $planArray[$planId]['billing-info'] = $planService->parseBilling($plan['billing-model']);
          } // end for
        }
        $variables['plans'] = $productPlans;
        $variables['planList'] = $planArray;
        $billing = FALSE;
        $billingEnabled = (boolean) \Drupal::state()->get('ibm_apim.billing_enabled');
        if ($billingEnabled) {
          foreach ($productPlans as $planName => $plan) {
            if (isset($plan['billing-model'])) {
              $billing = TRUE;
            }
          }
        }
        $variables['billing'] = $billing;
        $variables['subscribable'] = product_check_product_subscribe($variables['node']);
        $variables['userLoggedIn'] = \Drupal::currentUser()->isAuthenticated();

        $userUtils = \Drupal::service('ibm_apim.user_utils');
        $variables['userHasSubManage'] = $userUtils->checkHasPermission('subscription:manage');

        $docPages = Product::getLinkedPages($variables['node']->id());
        $variables['docpages'] = $docPages;
        $variables['#attached']['library'][] = 'apic_app/subscribe';
      }
    }
    // custom fields
    $view_mode = $variables['view_mode'];
    if ($view_mode === 'full') {
      $view_mode = 'default';
    }
    $fieldList = [];
    $entityView = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.' . $view_mode);
    if ($entityView !== NULL) {
      $fieldList = array_keys($entityView->getComponents());
    }
    $coreFields = [
      'title',
      'vid',
      'status',
      'nid',
      'revision_log',
      'created',
      'links',
      'addtoany',
      'uid',
      'comment',
    ];
    $ibmFields = Product::getIBMFields();
    $merged = array_merge($coreFields, $ibmFields);
    $diff = array_diff($fieldList, $merged);
    $variables['custom_fields'] = $diff;
    $variables['#attached']['library'][] = 'ibm_apim/core';
    $variables['#attached']['library'][] = 'product/basic';
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function product_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    // remove link to delete our content type
    case 'node_type_edit_form' :
      if (isset($form['type']['#default_value'], $form['actions']['delete']) && $form['type']['#default_value'] === 'product') {
        unset($form['actions']['delete']);
      }
      break;
    case 'node_product_edit_form':
      // if anyone has made our internal fields visible, then lets make them readonly
      $internal_field_list = Product::getIBMFields();
      foreach ($internal_field_list as $fieldName) {
        if ($fieldName !== 'apic_pathalias' && $fieldName !== 'apic_tags' && $fieldName !== 'apic_rating' && $fieldName !== 'apic_image' && $fieldName !== 'apic_attachments' && isset($form[$fieldName])) {
          $form[$fieldName]['#disabled'] = TRUE;
        }
      }
      break;
  }
}

/**
 * Check if we have access to subscribe to the specified product Node
 *
 * @param $node
 *
 * @return bool
 */
function product_check_product_subscribe($node) {
  ibm_apim_entry_trace(__FUNCTION__, NULL);
  $returnValue = FALSE;
  if ($node !== NULL) {

    // Special case for subscription wizard - if you are not logged in, clicking "subscribe" on the product
    // will take you through the login / create account process so just allow all unauthenticated through
    if (\Drupal::currentUser()->isAnonymous()) {
      // even for anonymous we need to block subscribing to deprecated products
      $state = $node->product_state->value;
      if ($state === NULL || empty($state) || mb_strtolower($state) !== 'deprecated') {
        $returnValue = TRUE;
      }
    }
    else {
      $loggedIn = !\Drupal::currentUser()->isAnonymous();
      // if not a developer return false
      $userUtils = \Drupal::service('ibm_apim.user_utils');
      if ($userUtils->checkHasPermission('subscription:manage')) {
        // if deprecated then no one has access
        $state = $node->product_state->value;
        if ($state === NULL || empty($state) || mb_strtolower($state) !== 'deprecated') {
          // if subscribe disabled then no one has access
          $subscribeEnabled = (boolean) $node->product_subscribe_enabled->value;
          if ($subscribeEnabled === TRUE) {
            // now check specific access

            $myOrg = $userUtils->getCurrentConsumerOrg();
            $visibility = [[]];
            foreach ($node->product_visibility->getValue() as $arrayValue) {
              $visibility[] = unserialize($arrayValue['value'], ['allowed_classes' => FALSE]);
            }
            $visibility = array_merge(...$visibility);
            if ($visibility !== NULL && $visibility['subscribe']['type'] !== NULL) {
              if (mb_strtolower($visibility['subscribe']['type']) === 'public') {
                $returnValue = TRUE;
              }
              elseif ($loggedIn && mb_strtolower($visibility['subscribe']['type']) === 'authenticated') {
                $returnValue = TRUE;
              }
              elseif ($myOrg['url'] !== NULL && mb_strtolower($visibility['subscribe']['type']) === 'custom') {
                foreach ($visibility['subscribe']['org_urls'] as $customOrg) {
                  if ($customOrg === $myOrg['url']) {
                    $returnValue = TRUE;
                  }
                }
                if ($returnValue === FALSE) {
                  $corgService = \Drupal::service('ibm_apim.consumerorg');
                  $consumerOrg = $corgService->get($myOrg['url']); 
                  if (isset($consumerOrg)) {
                    $tags = $consumerOrg->getTags();
                    if ($tags !== NULL && is_array($tags) && count($tags) > 0) {
                      foreach ($visibility['subscribe']['group_urls'] as $customTag) {
                        if ($customTag !== NULL && !empty($customTag) && in_array($customTag, $tags, TRUE)) {
                          $returnValue = TRUE;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  ibm_apim_exit_trace(__FUNCTION__, $returnValue);
  return $returnValue;
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 *
 * @param $implementations
 * @param $hook
 */
function product_module_implements_alter(&$implementations, $hook) {
  if (($hook === 'form_alter' || $hook === 'menu_links_discovered_alter') && isset($implementations['product'])) {
    $group = $implementations['product'];
    unset($implementations['product']);
    $implementations['product'] = $group;
  }
}

/**
 *  Implements hook_menu_links_discovered_alter().
 *
 * @param $links
 */
function product_menu_links_discovered_alter(&$links) {
  // remove link to delete our content type
  if (isset($links['entity.node_type.delete_form.product'])) {
    unset($links['entity.node_type.delete_form.product']);
  }
  // remove link to create content of our content type
  if (isset($links['node.add.product'])) {
    unset($links['node.add.product']);
  }
}

/**
 * Add twig templates
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function product_theme($existing, $type, $theme, $path) {
  return [
    'product_select' => [
      'variables' => [
        'apiNid' => NULL,
        'products' => NULL,
      ],
    ],
    'product_wrapper' => [
      'variables' => [
        'api' => NULL,
        'product' => NULL,
        'showPlaceholders' => TRUE,
        'showVersions' => TRUE,
      ],
    ],
  ];
}