<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2020
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\Views;

/**
 * Ensure content type is translation enabled
 */
function product_update_8111() {
  \Drupal::configFactory()
    ->getEditable('language.content_settings.node.product')
    ->set('langcode', 'en')
    ->set('status', TRUE)
    ->set('dependencies', ['config' => [0 => 'node.type.product'], 'module' => [0 => 'content_translation']])
    ->set('third_party_settings', ['content_translation' => ['enabled' => TRUE]])
    ->set('id', 'node.product')
    ->set('target_entity_type_id', 'node')
    ->set('target_bundle', 'product')
    ->set('default_langcode', 'site_default')
    ->set('language_alterable', FALSE)
    ->save();

  $view = Views::getView('products');
  $view->setDisplay('default');
  $filters = $view->getDisplay()->getOption('filters');
  if (!array_key_exists('select_translation', $filters)) {
    $filters['select_translation'] = [
      'id' => 'select_translation',
      'table' => 'node_field_data',
      'field' => 'select_translation',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => '=',
      'value' => 'default',
      'group' => 1,
      'exposed' => FALSE,
      'expose' => [
        'operator_id' => '',
        'label' => '',
        'description' => '',
        'use_operator' => FALSE,
        'operator' => '',
        'identifier' => '',
        'required' => FALSE,
        'remember' => FALSE,
        'multiple' => FALSE,
        'remember_roles' => [
          'authenticated' => 'authenticated',
        ],
      ],
      'is_grouped' => FALSE,
      'group_info' => [
        'label' => '',
        'description' => '',
        'identifier' => '',
        'optional' => TRUE,
        'widget' => 'select',
        'multiple' => FALSE,
        'remember' => FALSE,
        'default_group' => 'All',
        'default_group_multiple' => [],
        'group_items' => [],
      ],
      'priorities' => '',
      'default_language_only' => 0,
      'include_content_with_unpublished_translation' => 0,
      'entity_type' => 'node',
      'plugin_id' => 'select_translation_filter',
    ];
    $view->getDisplay()->setOption('filters', $filters);
    $view->save();

    $view2 = Views::getView('products');
    $view2->setDisplay('page_1');
    $view2->getDisplay()->setOption('rendering_language', '***LANGUAGE_language_interface***');
    $view2->save();
  }

}

/**
 * Use taxonomy search with depth
 */
function product_update_8112() {

  $view = Views::getView('products');
  $filters = $view->getDisplay()->getOption('filters');
  // remove old tid based filter
  if (array_key_exists('tid', $filters)) {
    unset($filters['tid']);
  }
  // add new tid with depth
  if (!array_key_exists('term_node_tid_depth', $filters)) {
    $filters['term_node_tid_depth'] = [
      'id' => 'term_node_tid_depth',
      'table' => 'node_field_data',
      'field' => 'term_node_tid_depth',
      'relationship' => 'none',
      'group_type' => 'group',
      'admin_label' => '',
      'operator' => 'or',
      'value' => NULL,
      'group' => 1,
      'exposed' => TRUE,
      'expose' => [
        'operator_id' => 'term_node_tid_depth_op',
        'label' => 'Category',
        'description' => '',
        'use_operator' => FALSE,
        'operator' => 'term_node_tid_depth_op',
        'identifier' => 'term_node_tid_depth',
        'required' => FALSE,
        'remember' => TRUE,
        'multiple' => FALSE,
        'remember_roles' => [
          'authenticated' => 'authenticated',
        ],
        'reduce' => FALSE,
      ],
      'is_grouped' => FALSE,
      'group_info' => [
        'label' => '',
        'description' => '',
        'identifier' => '',
        'optional' => TRUE,
        'widget' => 'select',
        'multiple' => FALSE,
        'remember' => FALSE,
        'default_group' => 'All',
        'default_group_multiple' => [],
        'group_items' => [],
      ],
      'reduce_duplicates' => FALSE,
      'type' => 'cshs',
      'limit' => TRUE,
      'hierarchy' => FALSE,
      'error_message' => TRUE,
      'vid' => 'tags',
      'depth' => 0,
      'parent' => '0',
      'level_labels' => '',
      'force_deepest' => 0,
      'entity_type' => 'node',
      'plugin_id' => 'taxonomy_index_tid_depth',
    ];
    if (!isset($filters['type']['group'])) {
      $filters['type']['group'] = 1;
    }
  }
  $view->getDisplay()->setOption('filters', $filters);
  $filter_groups = $view->getDisplay()->getOption('filter_groups');
  if (!isset($filter_groups)) {
    $filter_groups = ['operator' => 'AND', 'groups' => [1 => 'AND']];
    $view->getDisplay()->setOption('filter_groups', $filter_groups);
  }
  $view->save();
}

/**
 * Create new fields and update form and view displays
 */
function product_update_8113() {
  // check for field storage object and create if it doesn't exist
  $fieldStorageConfig = FieldStorageConfig::loadByName('node', 'product_api_nids');
  if ($fieldStorageConfig === NULL) {
    $fieldStorageConfig = FieldStorageConfig::create([
      'field_name' => 'product_api_nids',
      'entity_type' => 'node',
      'type' => 'string_long',
      'settings' => [
        'case_sensitive' => FALSE,
      ],
      'cardinality' => 1,
    ]);
    $fieldStorageConfig->save();
  }

  // check for field config object and create if it doesn't exists
  $fieldConfig = FieldConfig::loadByName('node', 'product', 'product_api_nids');
  if ($fieldConfig === NULL) {
    $fieldConfig = FieldConfig::create([
      'field_name' => 'product_api_nids',
      'entity_type' => 'node',
      'bundle' => 'product',
      'label' => 'API Node IDs',
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [],
      'field_type' => 'string_long',
    ]);
    $fieldConfig->save();
  }

  // add created field to all of the form and view display for product

  // entity form display will pick up the field config, it should be hidden on there.

  // however for view display modes it needs setting so it is visible.
  $displayModes = ['default', 'card', 'subscribewizard', 'teaser'];
  foreach ($displayModes as $displayMode) {
    $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.' . $displayMode);
    if ($viewDisplay !== NULL) {
      $viewDisplay->setComponent($fieldConfig->getName());
      $viewDisplay->save();
    }
  }
}

// Making sure that product description is translatable
function product_update_8114() {

  $apicDescriptionFieldStorageConfig = FieldStorageConfig::loadByName('node', 'apic_description');
  if ($apicDescriptionFieldStorageConfig !== NULL) {
    $apicDescriptionFieldStorageConfig->set('translatable', TRUE);
    $apicDescriptionFieldStorageConfig->save();
  }

  $apicDescriptionFieldConfig = FieldConfig::loadByName('node', 'product', 'apic_description');
  if ($apicDescriptionFieldConfig !== NULL) {
    $apicDescriptionFieldConfig->set('translatable', TRUE);
    $apicDescriptionFieldConfig->save();
  }

}

// ensure cardinality of product_api_nids is -1
function product_update_8115() {
  // check for field storage object and create if it doesn't exist
  $fieldStorageConfig = FieldStorageConfig::loadByName('node', 'product_api_nids');
  if ($fieldStorageConfig !== NULL) {
    $fieldStorageConfig->set('cardinality' , -1);
    $fieldStorageConfig->save();
  }
}

/**
 * update the gutter width for latest masonry views
 */
function product_update_8116() {
  $view = Views::getView('products');
  if ($view !== null) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0) {
      $style['options']['gutterWidth'] = "20";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
  }
}
