<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2023
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\views\Views;

/**
 * Ensure content type is translation enabled
 */
function product_update_8111() {
  \Drupal::configFactory()
    ->getEditable('language.content_settings.node.product')
    ->set('langcode', 'en')
    ->set('status', TRUE)
    ->set('dependencies', ['config' => [0 => 'node.type.product'], 'module' => [0 => 'content_translation']])
    ->set('third_party_settings', ['content_translation' => ['enabled' => TRUE]])
    ->set('id', 'node.product')
    ->set('target_entity_type_id', 'node')
    ->set('target_bundle', 'product')
    ->set('default_langcode', 'site_default')
    ->set('language_alterable', FALSE)
    ->save();

  $view = Views::getView('products');
  if ($view !== NULL) {
    $view->setDisplay('default');
    $filters = $view->getDisplay()->getOption('filters');
    if (!array_key_exists('select_translation', $filters)) {
      $filters['select_translation'] = [
        'id' => 'select_translation',
        'table' => 'node_field_data',
        'field' => 'select_translation',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => '=',
        'value' => 'default',
        'group' => 1,
        'exposed' => FALSE,
        'expose' => [
          'operator_id' => '',
          'label' => '',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => '',
          'identifier' => '',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
          ],
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'priorities' => '',
        'default_language_only' => 0,
        'include_content_with_unpublished_translation' => 0,
        'entity_type' => 'node',
        'plugin_id' => 'select_translation_filter',
      ];
      $view->getDisplay()->setOption('filters', $filters);
      $view->save();
    }
    $view2 = Views::getView('products');
    if ($view2 !== NULL) {
      $view2->setDisplay('page_1');
      $view2->getDisplay()->setOption('rendering_language', '***LANGUAGE_language_interface***');
      $view2->save();
    }
  }

}

/**
 * Use taxonomy search with depth
 */
function product_update_8112() {

  $view = Views::getView('products');
  if ($view !== NULL) {
    $filters = $view->getDisplay()->getOption('filters');
    // remove old tid based filter
    if (array_key_exists('tid', $filters)) {
      unset($filters['tid']);
    }
    // add new tid with depth
    if (!array_key_exists('term_node_tid_depth', $filters)) {
      $filters['term_node_tid_depth'] = [
        'id' => 'term_node_tid_depth',
        'table' => 'node_field_data',
        'field' => 'term_node_tid_depth',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => 'or',
        'value' => NULL,
        'group' => 1,
        'exposed' => TRUE,
        'expose' => [
          'operator_id' => 'term_node_tid_depth_op',
          'label' => 'Category',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => 'term_node_tid_depth_op',
          'identifier' => 'term_node_tid_depth',
          'required' => FALSE,
          'remember' => TRUE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
          ],
          'reduce' => FALSE,
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'reduce_duplicates' => FALSE,
        'type' => 'cshs',
        'limit' => TRUE,
        'hierarchy' => FALSE,
        'error_message' => TRUE,
        'vid' => 'tags',
        'depth' => 0,
        'parent' => '0',
        'level_labels' => '',
        'force_deepest' => 0,
        'entity_type' => 'node',
        'plugin_id' => 'taxonomy_index_tid_depth',
      ];
      if (!isset($filters['type']['group'])) {
        $filters['type']['group'] = 1;
      }
    }
    $view->getDisplay()->setOption('filters', $filters);
    $filter_groups = $view->getDisplay()->getOption('filter_groups');
    if (!isset($filter_groups)) {
      $filter_groups = ['operator' => 'AND', 'groups' => [1 => 'AND']];
      $view->getDisplay()->setOption('filter_groups', $filter_groups);
    }
    $view->save();
  }
}

/**
 * Create new fields and update form and view displays
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function product_update_8113() {
  // check for field storage object and create if it doesn't exist
  $fieldStorageConfig = FieldStorageConfig::loadByName('node', 'product_api_nids');
  if ($fieldStorageConfig === NULL) {
    $fieldStorageConfig = FieldStorageConfig::create([
      'field_name' => 'product_api_nids',
      'entity_type' => 'node',
      'type' => 'string_long',
      'settings' => [
        'case_sensitive' => FALSE,
      ],
      'cardinality' => 1,
    ]);
    $fieldStorageConfig->save();
  }

  // check for field config object and create if it doesn't exists
  $fieldConfig = FieldConfig::loadByName('node', 'product', 'product_api_nids');
  if ($fieldConfig === NULL) {
    $fieldConfig = FieldConfig::create([
      'field_name' => 'product_api_nids',
      'entity_type' => 'node',
      'bundle' => 'product',
      'label' => 'API Node IDs',
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [],
      'field_type' => 'string_long',
    ]);
    $fieldConfig->save();
  }

  // add created field to all of the form and view display for product

  // entity form display will pick up the field config, it should be hidden on there.

  // however for view display modes it needs setting so it is visible.
  $displayModes = ['default', 'card', 'subscribewizard', 'teaser'];
  foreach ($displayModes as $displayMode) {
    $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.' . $displayMode);
    if ($viewDisplay !== NULL) {
      $viewDisplay->setComponent($fieldConfig->getName());
      $viewDisplay->save();
    }
  }
}

// Making sure that product description is translatable
function product_update_8114() {

  $apicDescriptionFieldStorageConfig = FieldStorageConfig::loadByName('node', 'apic_description');
  if ($apicDescriptionFieldStorageConfig !== NULL) {
    $apicDescriptionFieldStorageConfig->set('translatable', TRUE);
    $apicDescriptionFieldStorageConfig->save();
  }

  $apicDescriptionFieldConfig = FieldConfig::loadByName('node', 'product', 'apic_description');
  if ($apicDescriptionFieldConfig !== NULL) {
    $apicDescriptionFieldConfig->set('translatable', TRUE);
    $apicDescriptionFieldConfig->save();
  }

}

/**
 * ensure cardinality of product_api_nids is -1
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function product_update_8115() {
  // check for field storage object and create if it doesn't exist
  $fieldStorageConfig = FieldStorageConfig::loadByName('node', 'product_api_nids');
  if ($fieldStorageConfig !== NULL) {
    $fieldStorageConfig->set('cardinality', -1);
    $fieldStorageConfig->save();
  }
}

/**
 * update the gutter width for latest masonry views
 */
function product_update_8116() {
  $view = Views::getView('products');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0) {
      $style['options']['gutterWidth'] = "20";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
  }
}

/**
 * update the gutter width for latest masonry views
 *
 * bumped the second digit to ensure the change happens if migrating from 2018 to 10 too
 */
function product_update_8201() {
  $view = Views::getView('products');
  if ($view !== NULL) {
    $style = $view->getDisplay()->getOption('style');
    if ((int) $style['options']['gutterWidth'] === 0 || (int) $style['options']['gutterWidth'] === 20) {
      $style['options']['gutterWidth'] = "2";
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
    $pager = $view->getDisplay()->getOption('pager');
    if ((int) $pager['options']['items_per_page'] === 5) {
      $pager['options']['items_per_page'] = 10;
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
    if ($pager['options']['expose']['items_per_page_options'] !== '10, 25, 50, 75') {
      $pager['options']['expose']['items_per_page_options'] = '10, 25, 50, 75';
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
  }
}

/**
 * update the empty state for the view
 *
 */
function product_update_8202() {
  $view = Views::getView('product');
  if ($view !== NULL) {
    $empty = $view->getDisplay()->getOption('empty');
    if (!isset($empty['entity_block'])) {
      $empty['entity_block'] = [
        'id' => 'entity_block',
        'table' => 'views',
        'field' => 'entity_block',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'empty' => TRUE,
        'tokenize' => TRUE,
        'target' => 'noproductsblock',
        'view_mode' => 'default',
        'bypass_access' => FALSE,
        'plugin_id' => 'entity',
      ];
      if (isset($empty['area'])) {
        unset($empty['area']);
      }
      $view->getDisplay()->setOption('empty', $empty);
      $view->save();
    }
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function product_update_8203() {
  $fieldConfig = FieldConfig::loadByName('node', 'product', 'comment');
  if ($fieldConfig !== NULL) {
    $settings = $fieldConfig->get('settings');
    if ($settings['preview'] !== 0) {
      $settings['preview'] = 0;
      $fieldConfig->set('settings', $settings);
      $fieldConfig->save();
    }
  }
}

/**
 * Convert terms of service to be a formatable text_long
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function product_update_8204() {
  $database = \Drupal::database();
  $entityType = 'node';
  $fieldName = 'product_terms_of_service';
  $table = $entityType . '__' . $fieldName;
  $currentRows = NULL;
  $newFieldsList = [];
  $fieldStorage = FieldStorageConfig::loadByName($entityType, $fieldName);

  if (is_null($fieldStorage)) {
    return;
  }

  // Get all current data from DB.
  if ($database->schema()->tableExists($table)) {
    // The table data to restore after the update is completed.
    $currentRows = $database->select($table, 'n')
      ->fields('n')
      ->execute()
      ->fetchAll();
  }

  // Use existing field config for new field.
  foreach ($fieldStorage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entityType, $bundle, $fieldName);
    $newField = $field->toArray();
    $newField['field_type'] = 'text_long';
    $newField['settings'] = [];
    $newFieldsList[] = $newField;
  }

  // Deleting field storage which will also delete bundles(fields).
  $newFieldStorage = $fieldStorage->toArray();
  $newFieldStorage['type'] = 'text_long';
  $newFieldStorage['settings'] = [];

  $fieldStorage->delete();

  // Purge field data now to allow new field and field_storage with same name
  // to be created.
  field_purge_batch(40);

  // Create new field storage.
  $newFieldStorage = FieldStorageConfig::create($newFieldStorage);
  $newFieldStorage->set('translatable', TRUE);
  $newFieldStorage->save();

  // Create new fields.
  foreach ($newFieldsList as $nfield) {
    $nfieldConfig = FieldConfig::create($nfield);
    $nfieldConfig->set('translatable', TRUE);
    $nfieldConfig->save();
  }

  // Restore existing data in new table.
  if (!is_null($currentRows)) {
    foreach ($currentRows as $row) {
      $database->insert($table)
        ->fields((array) $row)
        ->execute();
    }
  }
  $fieldConfig = FieldConfig::loadByName('node', 'product', 'product_api_nids');
  if ($fieldConfig === NULL) {
    $fieldConfig = FieldConfig::create([
      'field_name' => 'product_api_nids',
      'entity_type' => 'node',
      'bundle' => 'product',
      'label' => 'API Node IDs',
      'required' => FALSE,
      'translatable' => FALSE,
      'settings' => [],
      'field_type' => 'string_long',
    ]);
    $fieldConfig->save();
  }
  // update the view display too
  $displayModes = ['default', 'subscribewizard'];
  foreach ($displayModes as $displayMode) {
    $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.' . $displayMode);
    if ($viewDisplay !== NULL) {
      $component = $viewDisplay->getComponent($fieldName);
      if (isset($component)) {
        $viewDisplay->removeComponent($fieldName);
      }
      $viewDisplay->setComponent($fieldName, [
        'weight' => 15,
        'label' => 'hidden',
        'region' => 'content',
        'type' => 'text_default',
      ]);
      $viewDisplay->save();
    }
  }
}

/**
 * Add apic_pathalias field to the view modes
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function product_update_8205() {
  $fieldValues = [
    'type' => 'string',
    'weight' => 112,
    'region' => 'content',
    'label' => 'hidden',
  ];

  $cardFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.card');
  if ($cardFormDisplay !== NULL) {
    $cardFormDisplay->setComponent('apic_pathalias', $fieldValues);
    $cardFormDisplay->save();
  }

  $teaserFormDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.product.teaser');
  if ($teaserFormDisplay !== NULL) {
    $teaserFormDisplay->setComponent('apic_pathalias', $fieldValues);
    $teaserFormDisplay->save();
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function product_update_8206() {
  // Create a new field for the api module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'apic_created_at',
    'field_type' => 'timestamp',
    'entity_type' => 'node',
    'bundle' => 'product',
    'translatable' => FALSE,
    'label' => t('Creation time'),
  ]);
  $fieldConfig->save();

  // Create a new field for the api module
  $fieldConfig = FieldConfig::create([
    'field_name' => 'apic_updated_at',
    'field_type' => 'timestamp',
    'entity_type' => 'node',
    'bundle' => 'product',
    'translatable' => FALSE,
    'label' => t('Modification time'),
  ]);
  $fieldConfig->save();
}

function product_update_10001() {
  $field_config = FieldConfig::loadByName('node', 'product', 'apic_attachments');
  $field_config->setSetting('file_extensions', 'txt doc pdf xls ppt pptx docx xlsx rtf odt ods odp md json yaml yml tgz tar zip');
  $field_config->save();
}

/**
 * Implements hook_update_dependencies().
 */
function product_update_dependencies(): array {
  return [
    'product' => [
      // consumerorg creates the storage for the created_at and updated_at fields so has to run first
      8206 => [
        'consumerorg' => 8201,
      ],
    ],
  ];
}