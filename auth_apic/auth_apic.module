<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2021
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides user management integration with APIC.
 */

use Drupal\auth_apic\Form\ApicUserProfileForm;
use Drupal\auth_apic\Form\ApicUserRegisterForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function auth_apic_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id === 'system_modules') {
    /*
     * Block use of modules which would conflict with auth_apic
     */
    if (isset($form['modules']['HybridAuth'])) {
      unset($form['modules']['HybridAuth']);
    }
    if (isset($form['modules']['Lightweight Directory Access Protocol'])) {
      unset($form['modules']['Lightweight Directory Access Protocol']);
    }
    if (isset($form['modules']['IBM API Developer Portal']['ibmsocial_login'])) {
      unset($form['modules']['IBM API Developer Portal']['ibmsocial_login']);
    }
    if (isset($form['modules']['IBM API Connect']['ibmsocial_login'])) {
      unset($form['modules']['IBM API Connect']['ibmsocial_login']);
    }
    if (isset($form['modules']['Social']['social_auth_google'])) {
      unset($form['modules']['Social']['social_auth_google']);
    }
    if (isset($form['modules']['Social']['social_auth'])) {
      unset($form['modules']['Social']['social_auth']);
    }
    if (isset($form['modules']['Other']['openid_connect'])) {
      unset($form['modules']['Other']['openid_connect']);
    }
  }
  elseif ($form_id === 'user_form') {
    if (\Drupal::moduleHandler()->moduleExists('change_pwd_page')) {
      // this is here to ensure that the current password field is definitely not shown
      // mainly to avoid needing to patch the change_pwd_page module in test environments

      // Hide the new password fields.
      $form['pass']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 *
 * @param array $entity_types
 */
function auth_apic_entity_type_alter(array &$entity_types) {
  $entity_types['user']->setFormClass('default', ApicUserProfileForm::class);
  $entity_types['user']->setFormClass('register', ApicUserRegisterForm::class);
}

/**
 * Implementation of hook_form_FORM_ID_alter() to alter the account settings form
 *
 * @param $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param $form_id
 */
function auth_apic_form_user_admin_settings_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['registration_cancellation']['user_register'])) {
    unset($form['registration_cancellation']['user_register']);
  }
  if (isset($form['registration_cancellation']['user_email_verification'])) {
    unset($form['registration_cancellation']['user_email_verification']);
  }
  if (isset($form['email_admin_created'])) {
    unset($form['email_admin_created']);
  }
  if (isset($form['email_pending_approval'])) {
    unset($form['email_pending_approval']);
  }
  if (isset($form['email_pending_approval_admin'])) {
    unset($form['email_pending_approval_admin']);
  }
  if (isset($form['email_no_approval_required'])) {
    unset($form['email_no_approval_required']);
  }
  if (isset($form['email_activated'])) {
    unset($form['email_activated']);
  }
}

/**
 * Alter local tasks.
 * Hide the change password link on the user profile pages if using ldap and not admin, or admin viewing someone elses account.
 *
 * @param $data
 * @param $route_name
 */
function auth_apic_menu_local_tasks_alter(&$data, $route_name) {
  if (isset($data['tabs'][0]['change_pwd_page.change_password_form'])) {
    $changepw_task = $data['tabs'][0]['change_pwd_page.change_password_form'];
  }

  if (isset($changepw_task)) {
    $url = $changepw_task['#link']['url'];

    $currentUserId = (int) \Drupal::currentUser()->id();
    $form_for_user = (int) $url->getRouteParameters()['user'];
    $ro = (boolean) \Drupal::state()->get('ibm_apim.readonly_idp');

    if (($currentUserId !== $form_for_user) || ($currentUserId !== 1 && $ro === TRUE)) {
      unset($data['tabs'][0]['change_pwd_page.change_password_form']);
    }
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 * @param $variables
 */
function auth_apic_preprocess_menu(&$variables) {
  if (isset($variables['menu_name']) && $variables['menu_name'] === 'account' && array_key_exists('change_pwd_page.change_password', $variables['items'])) {
    $currentUser = \Drupal::currentUser();
    if (!$currentUser->isAnonymous() && $currentUser->id() !== 1) {
      $currentUser = User::load($currentUser->id());
      $registryUrl = $currentUser->get('registry_url')->value;
      if ($registryUrl !== NULL && $registryUrl !== '/admin') {
        $registry = \Drupal::service('ibm_apim.user_registry')->get($registryUrl);
        if ($registry !== NULL) {
          $ro = !$registry->isUserManaged();
          if ($ro === TRUE) {
            unset($variables['items']['change_pwd_page.change_password']);
          }
        }
      }
    }
  }
}


/**
 * Need to use our custom content forms for users
 *
 * @param $variables
 * @param $hook
 * @param $info
 */
function auth_apic_preprocess(&$variables, $hook, &$info) {

  if ($hook === 'form') {

    if ($variables['element']['#form_id'] === 'user_login_form' || $variables['element']['#form_id'] === 'user_register_form') {
      $templateFileName = 'form-' . str_replace('_', '-', $variables['element']['#form_id']);
    }
    elseif ($variables['element']['#form_id'] === 'user_pass' || $variables['element']['#form_id'] === 'apic_resetpw' || $variables['element']['#form_id'] === 'user_pass_reset') {
      $templateFileName = 'form-user-pass-form';
    }
    elseif ($variables['element']['#form_id'] === 'apic_change_pwd_form') {
      $templateFileName = 'form-change-pwd-form';
    }

    if (isset($templateFileName)) {
      if (function_exists('ibm_apim_entry_trace')) {
        ibm_apim_entry_trace(__FUNCTION__, 'form');
      }
      $theme_name = \Drupal::theme()->getActiveTheme()->getName();
      $theme_path = \Drupal::theme()->getActiveTheme()->getPath();
      if (file_exists($theme_path . '/templates/form/' . $templateFileName . '.html.twig')) {
        $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($theme_name);
        $info['path'] = \Drupal::service('extension.list.theme')->getPath($theme_name) . '/templates/form';
        $info['template'] = $templateFileName;
      }
      elseif (file_exists($theme_path . '/templates/' . $templateFileName . '.html.twig')) {
        $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($theme_name);
        $info['path'] = \Drupal::service('extension.list.theme')->getPath($theme_name) . '/templates';
        $info['template'] = $templateFileName;
      }
      else {
        $templateFilePath = \Drupal::service('extension.list.module')->getPath('auth_apic') . '/templates/' . $templateFileName . '.html.twig';
        if (file_exists($templateFilePath)) {
          $info['theme path'] = \Drupal::service('extension.list.module')->getPath('auth_apic');
          $info['path'] = \Drupal::service('extension.list.module')->getPath('auth_apic') . '/templates';
          $info['template'] = $templateFileName;
        }
      }
      if (function_exists('ibm_apim_entry_trace')) {
        ibm_apim_exit_trace(__FUNCTION__, 'form');
      }
    }
  }

}


/**
 * Implements hook_cron().
 */
function auth_apic_cron() {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $oidc_state_service = \Drupal::service('auth_apic.oidc_state');
  if ($oidc_state_service !== NULL) {
    $oidc_state_service->prune();
  }

  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}



