<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2020
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Install, update and uninstall functions for the apim_profile install profile.
 */

use Drupal\block\Entity\Block;
use Drupal\captcha\Entity\CaptchaPoint;
use Drupal\locale\Gettext;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\search_api\Entity\Index;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;


/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @see system_install()
 *
 */
function apim_profile_install() {
  $path = __DIR__;

  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  $core_dependencies = [
    'node',
    'history',
    'entity_reference',
    'block',
    'dynamic_page_cache',
    'page_cache',
    'filter',
    'block_content',
    'breakpoint',
    'color',
    'config',
    'comment',
    'contextual',
    'datetime',
    'contact',
    'quickedit',
    'help',
    'image',
    'options',
    'path',
    'taxonomy',
    'shortcut',
    'toolbar',
    'field_ui',
    'file',
    'rdf',
    'views',
    'views_ui',
    'editor',
    'ckeditor',
    'automated_cron',
    'ban',
    'book',
    'menu_ui',
    'link',
    'menu_link_content',
    'forum',
    'tour',
    'update',
    'content_translation',
    'language',
    'locale',
    'user',
    'inline_form_errors',
    'big_pipe',
    'media',
  ];

  $module_dependencies = [
    'acl',
    'admin_toolbar',
    'admin_toolbar_tools',
    'adminimal_admin_toolbar',
    'bootstrap_layouts',
    'blazy',
    'blazy_ui',
    'blog',
    'ctools',
    'ctools_views',
    'linkit',
    'field_group',
    'address',
    'mailsystem',
    'taxonomy_menu',
    'autologout',
    'session_limit',
    'token',
    'typed_data',
    'ultimate_cron',
    'user_pwreset_timeout',
    'panels',
    'panels_ipe',
    'seckit',
    'metatag',
    'metatag_dc',
    'slick',
    'slick_extras',
    'slick_ui',
    'slick_views',
    'captcha',
    'image_captcha',
    'recaptcha',
    'votingapi',
    'workbench',
    'page_manager',
    'page_manager_ui',
    'votingapi_widgets',
    'cshs',
    'search404',
    'change_pwd_page',
    'libraries',
    'responsive_image',
    'editor_file',
    'config_update',
    'password_policy',
    'password_policy_length',
    'password_policy_character_types',
    'password_policy_username',
    'password_policy_consecutive',
    'password_strength',
    'csp',
    'perimeter',
    'check_dns',
    'views_bootstrap',
    'ckeditor_media_embed',
    'social_media_links',
    'linkit',
    'health_check',
    'editor_advanced_link',
    'restrict_by_ip',
    'file_upload_secure_validator',
    'select_or_other',
    'crop',
    'focal_point',
    'entity_browser',
    'dropzonejs',
    'dropzonejs_eb_widget',
    'entity_browser_enhanced',
    'file_browser',
    'embed',
    'content_browser',
    'entity_embed',
    'honeypot',
    'masonry',
    'masonry_views',
    'views_ajax_history',
    'contact_block',
    'twig_tweak',
    'config_translation',
    'better_exposed_filters',
    'search_api',
    'search_api_db',
    'search_api_autocomplete',
    'robotstxt',
    'flood_unblock',
    'key',
    'encrypt',
    'real_aes',
    'unlimited_number',
    'avatars',
    'letter_avatar',
    'mimemail',
    'views_autocomplete_filters',
    'multiple_fields_remove_button',
    'account_field_split',
    'eu_cookie_compliance',
    'serialization',
    'smart_trim',
    'r4032login',
    'noopener_filter',
    'session_based_temp_store',
    'select_translation',
    'term_csv_export_import',
    'page_load_progress',
    'advagg',
    'advagg_css_minify',
    'advagg_js_minify',
    'warmer',
    'warmer_cdn',
    'warmer_entity',
    'svg_image_field',
    'views_taxonomy_term_name_depth',
  ];

  $our_modules = [
    'ghmarkdown',
    'ibm_log_stdout',
    'ibm_apim',
    'ibm_apic_mail',
    'ibm_apic_flood_control_ui',
    'apic_type_count',
    'auth_apic',
    'apic_api',
    'apic_app',
    'consumerorg',
    'product',
    'featuredcontent',
    'socialblock',
    'themegenerator',
    'mail_subscribers',
  ];
  // enable our modules
  $module_installer = \Drupal::service('module_installer');
  foreach ($core_dependencies as $module) {
    $module_installer->install([$module]);
  }
  foreach ($module_dependencies as $module) {
    $module_installer->install([$module]);
  }
  foreach ($our_modules as $module) {
    $module_installer->install([$module]);
  }

  // Set front page to "home".
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('page.front', '/home')
    ->save(TRUE);

  // TODO remove bartik from this list
  $themes = ['bartik', 'seven', 'connect_theme'];
  $theme_installer = \Drupal::service('theme_installer');
  foreach ($themes as $theme) {
    $theme_installer->install([$theme]);
  }
  // set connect_theme to be default
  \Drupal::service('theme_handler')->setDefault('connect_theme');

  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', FALSE)
    ->save();

  // Ensure the translation fields are created in the database.
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  // Enable default permissions for system roles.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, [
    'access comments',
    'use search autocomplete',
    'use page load progress',
  ]);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, [
    'access comments',
    'post comments',
    'skip comment approval',
    'use search autocomplete',
    'create forum content',
    'edit own forum content',
    'vote on node:api:apic_rating',
    'vote on node:consumerorg:apic_rating',
    'vote on node:product:apic_rating',
    'clear own vote on node:api:apic_rating',
    'clear own vote on node:consumerorg:apic_rating',
    'clear own vote on node:product:apic_rating',
    'edit own vote on node:api:apic_rating',
    'edit own vote on node:consumerorg:apic_rating',
    'edit own vote on node:product:apic_rating',
    'avatars avatar_generator user letter_generator',
    'avatars avatar_generator user user_upload',
    'use page load progress',
  ]);

  user_role_grant_permissions('administrator', ['administer page load progress']);

  // Assign user 1 the "administrator" and "superuser" roles.
  $user = User::load(1);
  if ($user !== NULL) {
    $user->roles[] = 'administrator';
    $user->roles[] = 'superuser';
    $user->save();
  }

  // load apim_profile translations in to the database
  apim_profile_load_translations();

  // create main menu links
  apim_profile_main_menu_links();

  // create login links
  apim_profile_login_menu_links();

  // create default nodes
  require_once $path . '/apim_profile.import_nodes.inc';
  apim_profile_create_nodes();

  // put blocks in the right place
  apim_profile_place_blocks();

  // front page
  require_once $path . '/apim_profile.homepage.inc';
  apim_profile_create_homepage_blocks();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access site-wide contact form']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access site-wide contact form']);

  // Allow all users to use search.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['search content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search content']);

  // forum moderator permissions
  user_role_grant_permissions('forum_moderator', [
    'delete any forum content',
    'edit any forum content',
  ]);

  // set up default APIC settings
  apim_profile_default_apic_config();

  // use private file hosting by default
  \Drupal::configFactory()
    ->getEditable('system.file')
    ->set('temporary_maximum_age', 2419200)
    ->set('default_scheme', 'private')
    ->save();

  \Drupal::configFactory()
    ->getEditable('bootstrap.settings')
    ->set('cdn_provider', '')
    ->save();

  // configure captcha
  apim_profile_captcha_config();

  // rebuild access permissions
  node_access_rebuild();

  // enable paranoia last to avoid it blocking other config setup
  //$module_installer->install(['paranoia']);
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_main_menu_links() {
  $menu_name = 'main';

  $home_link = MenuLinkContent::create([
    'title' => t('Home', [], ['langcode' => 'en']),
    'description' => t('Portal homepage', [], ['langcode' => 'en']),
    'link' => ['uri' => 'internal:/'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => -1,
  ]);
  $home_link->save();
  add_home_link_translations($home_link);

  $apis_link = MenuLinkContent::create([
    'title' => t('API Products', [], ['langcode' => 'en']),
    'description' => t('Browse available APIs', [], ['langcode' => 'en']),
    'link' => ['uri' => 'internal:/product', [], ['langcode' => 'en']],
    'menu_name' => $menu_name,
    'weight' => 5,
    'langcode' => 'en',
  ]);
  $apis_link->save();
  add_apis_link_translations($apis_link);

  $apps_link = MenuLinkContent::create([
    'title' => t('Apps', [], ['langcode' => 'en']),
    'description' => t('Create and manage your apps', [], ['langcode' => 'en']),
    'link' => ['uri' => 'internal:/application', [], ['langcode' => 'en']],
    'menu_name' => $menu_name,
    'weight' => 10,
    'langcode' => 'en',
  ]);
  $apps_link->save();
  add_apps_link_translations($apps_link);

  $forum_link = MenuLinkContent::create([
    'title' => t('Forums'),
    'description' => t('Interact with our community'),
    'link' => ['uri' => 'internal:/forum'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => 25,
  ]);
  $forum_link->save();
  add_forum_link_translations($forum_link);

  // update weight of the blogs link
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $blog_menu_id = 'views_view:views.blog.blog_all';
  $blogs_link = $menu_link_manager->getDefinition($blog_menu_id);
  $blogs_link['weight'] = 21;
  $menu_link_manager->updateDefinition($blog_menu_id, $blogs_link);
  $cache = \Drupal::cache('menu');
  $cache->deleteAll();
}


/**
 * @param string $menu_name
 * @param $forum_link
 */
function add_forum_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Forums', [], ['langcode' => $lang]),
      'description' => t('Interact with our community', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/forum'],
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 25,
    ];
    $link->addTranslation($lang, $translation);
  }

  $link->save();
}

/**
 * @param $link
 */
function add_apps_link_translations($link): void {

  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Apps', [], ['langcode' => $lang]),
      'description' => t('Create and manage your apps', [], ['langcode' => $lang]),
      'langcode' => $lang,
    ];
    $link->addTranslation($lang, $translation);
  }
  $link->save();
}

/**
 * @param $link
 */
function add_apis_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('API Products', [], ['langcode' => $lang]),
      'description' => t('Browse available APIs', [], ['langcode' => $lang]),
      'langcode' => $lang,
    ];
    $link->addTranslation($lang, $translation);
  }
  $link->save();
}

/**
 * @param string $menu_name
 * @param $link
 */
function add_home_link_translations( $link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Home', [], ['langcode' => $lang]),
      'description' => t('Portal homepage', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/'],
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => -1,
    ];
    $link->addTranslation($lang, $translation);
  }

  $link->save();
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_login_menu_links() {
  $menu_name = 'login';

  // Menu links need to be localized in all languages we support
  $languages = \Drupal::languageManager()->getLanguages();

  $login_link = MenuLinkContent::create([
    'title' => t('Sign in'),
    'description' => t('Sign in to your account'),
    'link' => ['uri' => 'internal:/user/login'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => 20,
  ]);
  $login_link->save();
  add_sign_in_link_translations($login_link);



  $register_link = MenuLinkContent::create([
    'title' => t('Create account'),
    'description' => t('Create a new account'),
    'link' => ['uri' => 'internal:/user/register'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => 10,
  ]);
  $register_link->save();
  add_create_account_link_translations($register_link);
}

/**
 * @param array $languages
 * @param string $menu_name
 * @param $link
 */
function add_create_account_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Create account', [], ['langcode' => $lang]),
      'description' => t('Create a new account', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/user/register'],
      'menu_name' => 'login',
      'expanded' => TRUE,
      'weight' => 10,
    ];
    $link->addTranslation($lang, $translation);
  }

  $link->save();
}

/**
 * @param $link
 */
function add_sign_in_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Sign in', [], ['langcode' => $lang]),
      'description' => t('Sign in to your account', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/user/login'],
      'menu_name' => 'login',
      'expanded' => TRUE,
      'weight' => 20,
    ];
    $link->addTranslation($lang, $translation);
  }
  $link->save();
}

/**
 * Set default options for configuring APIC
 */
function apim_profile_default_apic_config() {
  $codesnippets = [
    'curl' => TRUE,
    'ruby' => TRUE,
    'python' => TRUE,
    'php' => TRUE,
    'java' => TRUE,
    'node' => TRUE,
    'go' => TRUE,
    'swift' => TRUE,
    'c' => TRUE,
    'csharp' => TRUE,
  ];
  $categories = [
    'enabled' => TRUE,
    'create_taxonomies_from_categories' => TRUE,
  ];
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('autocreate_apiforum', TRUE)
    ->set('show_placeholder_images', TRUE)
    ->set('show_register_app', TRUE)
    ->set('show_versions', TRUE)
    ->set('enable_api_test', TRUE)
    ->set('autotag_with_phase', FALSE)
    ->set('show_cors_warnings', TRUE)
    ->set('show_analytics', TRUE)
    ->set('render_api_schema_view', TRUE)
    ->set('soap_swagger_download', FALSE)
    ->set('optimise_oauth_ux', TRUE)
    ->set('show_mtls_header', TRUE)
    ->set('soap_codesnippets', FALSE)
    ->set('application_image_upload', TRUE)
    ->set('hide_admin_registry', FALSE)
    ->set('disable_etags', FALSE)
    ->set('entry_exit_trace', FALSE)
    ->set('apim_rest_trace', FALSE)
    ->set('acl_debug', FALSE)
    ->set('webhook_debug', FALSE)
    ->set('cron_drush', FALSE)
    ->set('allow_consumerorg_creation', TRUE)
    ->set('allow_consumerorg_rename', TRUE)
    ->set('allow_consumerorg_delete', TRUE)
    ->set('allow_consumerorg_change_owner', TRUE)
    ->set('allow_user_delete', TRUE)
    ->set('certificate_strip_newlines', TRUE)
    ->set('certificate_strip_prefix', TRUE)
    ->set('categories', $categories)
    ->set('codesnippets', $codesnippets)
    ->set('module_blacklist', ['domain', 'theme_editor', 'backup_migrate', 'delete_all', 'devel_themer', 'php', 'content_sync'])
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('locale.settings')
    ->set('translation.use_source', 'local')
    ->set('translation.path', \Drupal::service('site.path') . '/translations')
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('user.settings')
    ->set('notify.status_activated', FALSE)
    ->set('notify.register_admin_created', FALSE)
    ->set('notify.register_no_approval_required', FALSE)
    ->set('notify.register_pending_approval', FALSE)
    ->save();
}

/**
 * These blocks are placed programmatically since there were dependency issues doing it via YML files
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_place_blocks() {
  $values = [
    'id' => 'searchiconblock',
    'plugin' => 'ibm_apim_search_icon',
    'provider' => NULL,
    'region' => 'navigation_right',
    'settings' => [
      'id' => 'ibm_apim_search_icon',
      'label' => 'Search Icon Block',
      'provider' => 'ibm_apim',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 5,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'consumerorganizationselection',
    'plugin' => 'consumer_org_select',
    'provider' => NULL,
    'region' => 'navigation_right',
    'settings' => [
      'id' => 'consumer_org_select',
      'label' => 'Consumer organization Selection',
      'provider' => 'consumerorg',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [
      'user_role' => [
        'id' => 'user_role',
        'roles' => ['authenticated' => 'authenticated'],
        'negate' => FALSE,
        'context_mapping' => [
          'user' => '@user.current_user_context:current_user',
        ],
      ],
    ],
    'weight' => 3,
  ];
  $block = Block::create($values);
  $block->save();

  // add admin status messages block
  $values = [
    'id' => 'adminstatusmessages',
    'plugin' => 'ibm_apim_status_messages',
    'provider' => NULL,
    'region' => 'highlighted',
    'settings' => [
      'id' => 'ibm_apim_status_messages',
      'label' => 'Admin Status Messages',
      'provider' => 'ibm_apim',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'contactblock',
    'plugin' => 'contact_block',
    'provider' => NULL,
    'region' => 'disabled',
    'settings' => [
      'id' => 'contact_block',
      'label' => 'Contact block',
      'provider' => 'contact_block',
      'label_display' => '0',
      'contact_form' => 'feedback',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'socialmedialinks',
    'plugin' => 'social_media_links_block',
    'provider' => NULL,
    'region' => 'disabled',
    'settings' => [
      'id' => 'social_media_links_block',
      'label' => 'Social Media Link',
      'provider' => 'social_media_links',
      'label_display' => '0',
      'appearance' => ['orientation' => 'h', 'show_name' => '0'],
      'link_attributes' => ['target' => '_blank', 'rel' => 'nofollow'],
      'iconset' => [
        'style' => 'fontawesome:2x',
        'installed_iconsets' => [
          'fontawesome' => ['examples' => ''],
          'elegantthemes' => ['examples' => ''],
        ],
      ],
      'platforms' => [
        'instagram' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'youtube_channel' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'contact' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'googleplus' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'twitter' => [
          'value' => 'IBMintegration',
          'description' => 'Follow us on Twitter',
          'weight' => '-10',
        ],
        'youtube' => [
          'value' => 'user/IBMCloud',
          'description' => 'Follow us on YouTube',
          'weight' => '-10',
        ],
        'github' => [
          'value' => 'ibm-apiconnect',
          'description' => 'Follow us on GitHub',
          'weight' => '-10',
        ],
        'slideshare' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'vimeo' => ['value' => '', 'description' => '', 'weight' => '-10'],
        'behance' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'facebook' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'bitbucket' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'drupal' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'email' => ['value' => '', 'description' => '', 'weight' => '-10'],
        'pintrest' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'linkedin' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'tumblr' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'rss' => ['value' => '', 'description' => '', 'weight' => '-10'],
      ],
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();
}

/**
 * Set up captcha configuration.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_captcha_config() {
  \Drupal::service('config.factory')
    ->getEditable('captcha.settings')
    ->set('default_challenge', 'image_captcha/Image')
    ->set('persistence', 2)
    ->set('add_captcha_description', FALSE)
    ->save();

  _apim_profile_enable_captcha_on_form('user_register_form');
  _apim_profile_enable_captcha_on_form('contact_message_feedback_form');
  _apim_profile_enable_captcha_on_form('contact_message_personal_form');
}

/**
 * Enable captcha on given form.
 *
 * @param $form_id
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _apim_profile_enable_captcha_on_form($form_id) {

  $query = \Drupal::entityQuery('captcha_point')->condition('formId', $form_id);
  $ids = $query->execute();
  if (count($ids) !== 1) {
    throw new Error('Unexpected number of ' . $form_id . ' captcha points: ' . count($ids));
  }

  // Load the only captcha_point we have.
  $cp = CaptchaPoint::load(reset($ids));
  if ($cp !== NULL) {
    $cp->set('status', TRUE);
    $cp->save();
  }
}

/**
 * Function to load sites/all/translations/apim_profile.LANGCODE.po
 * for every language that is enabled in the site. Translations found are loaded
 * in to the database. These translations are later used when menu links and
 * block content is created.
 */
function apim_profile_load_translations() {
  // Load sites/all/translations/apim_profile.LANGCODE.po in to the database
  // allowing apim_profile to later create block content and menu links using
  // the translated strings.

  $languages = \Drupal::languageManager()->getLanguages();

  foreach ($languages as $language) {
    if ($language->getId() === 'en') {
      continue;
    }
    $file = new stdClass();
    $file->langcode = $language->getId();
    $file->uri = 'sites/all/translations/apim_profile.' . $file->langcode . '.po';
    $options = [];
    $options['customized'] = LOCALE_NOT_CUSTOMIZED;
    $options['overwrite_options'] = ['customized' => TRUE, 'not_customized' => TRUE];

    if (!file_exists($file->uri)) {
      \Drupal::logger('apim_profile')
        ->info('There is no translation file to import from for @lang. File at path @path not found.', [
          '@lang' => $file->langcode,
          '@path' => $file->uri,
        ]);
    }
    else {
      $result = Gettext::fileToDatabase($file, $options);

      // Validate that strings were loaded in properly
      if ((isset($result->additions, $result->updates) && $result->additions === 0 && $result->updates === 0) || (!isset($result->skipped) || $result->skipped !== 0)) {
        \Drupal::logger('apim_profile')
          ->error('Translation import for language @lang failed to add any new strings to the database.', ['@lang' => $file->langcode]);
      }
    }
  }
}

// upgrade hooks, increment final digit to update the schema version.

/**
 * Upgrade to 2018.1.1
 *
 * disable drupal email notifications.
 */
function apim_profile_update_8001() {
  \Drupal::service('config.factory')
    ->getEditable('user.settings')
    ->set('notify.status_activated', FALSE)
    ->set('notify.register_admin_created', FALSE)
    ->set('notify.register_no_approval_required', FALSE)
    ->set('notify.register_pending_approval', FALSE)
    ->save();
}

/**
 * Upgrade to 2018.3.7
 *
 * Fix the products link in the getting started block
 */
function apim_profile_update_8002() {
  $path = __DIR__;
  require_once $path . '/apim_profile.homepage.inc';
  update_gsg_block();
}

/**
 * ensure default permissions for all roles are set
 */
function apim_profile_update_8003() {
  $path = __DIR__;

  // reset permissions to defaults from the yml files
  foreach (['content_author', 'forum_moderator', 'authenticated', 'administrator', 'anonymous', 'superuser'] as $role_id) {
    $info = \yaml_parse_file($path . '/config/install/user.role.' . $role_id . '.yml');

    $role = Role::load($role_id);

    if ($role !== NULL) {
      $issueAccessPermissions = $info['permissions'];

      foreach ($issueAccessPermissions as $permission) {
        $role->grantPermission($permission);
      }
    }
  }
}

/**
 * disable instantaneous indexing of content for performance reasons - let cron handle it
 */
function apim_profile_update_8004() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('search_api')) {
    $index = Index::load('default_index');
    if (isset($index) && !empty($index)) {
      $index->setOption('index_directly', FALSE)->save();
    }
  }
}

/**
 * update mail transport
 */
function apim_profile_update_8005() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('swiftmailer')) {
    \Drupal::service('config.factory')
      ->getEditable('swiftmailer.transport')
      ->set('sendmail_path', '/opt/ibm/bin/sendmail')
      ->save();
  }
}

/**
 * ensure have permission to change consumer org owner
 */
function apim_profile_update_8006() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('allow_consumerorg_change_owner', TRUE)
    ->save();
}

/**
 * enable additional modules
 */
function apim_profile_update_8007() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['noopener_filter', 'session_based_temp_store'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Add password policy consecutive character check
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8008() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('password_policy')) {
    $module_installer = \Drupal::service('module_installer');
    // enable password policy consecutive character constraint
    foreach (['password_policy_consecutive'] as $module) {
      $module_installer->install([$module]);
    }

    $policy = password_policy_load('default');
    $constraints = $policy->getConstraints();
    $found = FALSE;
    foreach ($constraints as $constraint) {
      if ($constraint['id'] === 'consecutive') {
        $found = TRUE;
      }
    }
    if ($found !== TRUE) {
      $constraints[] = ['id' => 'consecutive', 'max_consecutive_characters' => 3];
      $policy->set('policy_constraints', $constraints);
      $policy->save();
    }
  }
}

/**
 * ensure bootstrap settings are not to use a CDN
 */
function apim_profile_update_8009() {
  \Drupal::service('config.factory')
    ->getEditable('bootstrap.settings')
    ->set('cdn_provider', '')
    ->save();
}

/**
 * Switch to using our email provider module
 */
function apim_profile_update_8010() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['ibm_apic_mail'] as $module) {
    $module_installer->install([$module]);
  }
  // remove swiftmailer module
  $module_installer->uninstall(['swiftmailer'], TRUE);

  // update config
  $mailSystemModules = \Drupal::service('config.factory')->get('mailsystem.settings')->get('modules');
  unset($mailSystemModules['swiftmailer']);
  $mailSystemModules['mail_subscribers']['none']['sender'] = 'mailsystem_apicmail';
  $mailSystemModules['mail_subscribers']['none']['formatter'] = 'mailsystem_apicmail';
  \Drupal::service('config.factory')
    ->getEditable('mailsystem.settings')
    ->set('defaults', ['sender' => 'mailsystem_apicmail', 'formatter' => 'mailsystem_apicmail'])
    ->set('modules', $mailSystemModules)
    ->save();
}

/**
 * Use the correct header for restrict_by_ip
 */
function apim_profile_update_8011() {
  // update config
  \Drupal::service('config.factory')
    ->getEditable('restrict_by_ip.settings')
    ->set('header', 'HTTP_X_FORWARDED_FOR')
    ->save();
}

/**
 * Enable select_translation module
 */
function apim_profile_update_8012() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['select_translation'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Enable term_csv_export_import module
 */
function apim_profile_update_8013() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['term_csv_export_import'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Enable page_load_progress and node_type_count modules
 */
function apim_profile_update_8014() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['page_load_progress', 'node_type_count'] as $module) {
    $module_installer->install([$module]);
  }
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['use page load progress']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['use page load progress']);
  user_role_grant_permissions('administrator', ['administer page load progress']);
}

/**
 * Enable ibm_apic_flood_control_ui module
 */
function apim_profile_update_8015() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['ibm_apic_flood_control_ui'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Set the new settings for application certificates
 */
function apim_profile_update_8016() {
  $categories = [
    'enabled' => TRUE,
    'create_taxonomies_from_categories' => TRUE,
  ];

  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('certificate_strip_newlines', TRUE)
    ->set('certificate_strip_prefix', TRUE)
    ->set('optimise_oauth_ux', TRUE)
    ->set('categories', $categories)
    ->save();
}

/**
 * Enable Advanced Aggregation of JS and CSS
 */
function apim_profile_update_8017() {
  $module_installer = \Drupal::service('module_installer');
  foreach ([
             'advagg',
             'advagg_css_minify',
             'advagg_js_minify',
           ] as $module) {
    $module_installer->install([$module]);
  }

  \Drupal::service('config.factory')
    ->getEditable('advagg.settings')
    ->set('css', ['brotli' => TRUE, 'combine_media' => FALSE, 'fix_type' => TRUE, 'preserve_external' => FALSE])
    ->set('dns_prefetch', FALSE)
    ->set('path', ['convert' => ['absolute_to_protocol_relative' => TRUE, 'absolute' => FALSE, 'force_https' => FALSE]])
    ->set('cache_level', 2)
    ->set('cron_frequency', 86400)
    ->set('enabled', TRUE)
    ->set('global_counter', 0)
    ->set('immutable', TRUE)
    ->set('js', ['brotli' => TRUE, 'fix_type' => TRUE, 'preserve_external' => FALSE])
    ->set('skip_enabled_preprocess_check', FALSE)
    ->set('show_bypass_cookie_message', TRUE)
    ->set('symlinks', FALSE)
    ->set('symlinksifownermatch', FALSE)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('advagg_css_minify.settings')
    ->set('minifier', 2)
    ->set('add_license', FALSE)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('advagg_js_minify.settings')
    ->set('minifier', 0)
    ->set('add_license', FALSE)
    ->set('ratio_max', 0.9)
    ->set('ratio_min', 0.1)
    ->save();
}

/**
 * Ensure disabled blocks are left sitting in header region
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8018() {
  \Drupal::service('entity.definition_update_manager')->applyUpdates();

  $categoriesBlock = Block::load('tags');
  if ($categoriesBlock !== NULL) {
    $categoriesBlock->set('region', 'collapse_left');
    $categoriesBlock->set('status', FALSE);
    $categoriesBlock->save();
  }

  $breadcrumbsBlock = Block::load('connect_theme_breadcrumbs');
  if ($breadcrumbsBlock !== NULL) {
    $breadcrumbsBlock->set('region', 'disabled');
    $breadcrumbsBlock->save();
  }

  $toolsBlock = Block::load('connect_theme_tools');
  if ($toolsBlock !== NULL) {
    $toolsBlock->set('region', 'disabled');
    $toolsBlock->save();
  }
}

function apim_profile_update_8019() {

  $module_installer = \Drupal::service('module_installer');
  foreach ([
             'warmer',
             'warmer_cdn',
             'warmer_entity',
           ] as $module) {
    $module_installer->install([$module]);
  }
  \Drupal::service('config.factory')
    ->getEditable('warmer.settings')
    ->set('entity', [
      'id' => 'entity',
      'frequency' => '300',
      'batchSize' => '50',
      'entity_types' => [
        'block:block' => 'block:block',
        'configurable_language:configurable_language' => 'configurable_language:configurable_language',
        'node:api' => 'node:api',
        'node:application' => 'node:application',
        'node:article' => 'node:article',
        'node:blog_post' => 'node:blog_post',
        'node:book' => 'node:book',
        'node:consumerorg' => 'node:consumerorg',
        'node:faq' => 'node:faq',
        'node:forum' => 'node:forum',
        'node:page' => 'node:page',
        'node:product' => 'node:product',
        'node_type:node_type' => 'node_type:node_type',
        'page:page' => 'page:page',
        'page_variant:page_variant' => 'page_variant:page_variant',
        'menu:menu' => 'menu:menu',
        'user:user' => 'user:user',
        'user_role:user_role' => 'user_role:user_role',
        'view:view' => 'view:view',
      ],
    ])
    ->save();
}

/**
 * Update the proxy settings for new analytics option
 */
function apim_profile_update_8020() {
  $proxy_for_api = \Drupal::config('ibm_apim.settings')->get('proxy_for_api');
  if ($proxy_for_api === 'BOTH') {
    \Drupal::service('config.factory')
      ->getEditable('ibm_apim.settings')
      ->set('proxy_for_api', 'CONSUMER,PLATFORM,ANALYTICS')->save();
  }
}

function apim_profile_update_8021() {
  $disagree_label = \Drupal::config('eu_cookie_compliance.settings')->get('disagree_button_label');
  if (!isset($disagree_label)) {
    \Drupal::configFactory()
      ->getEditable('eu_cookie_compliance.settings')
      ->set('disagree_button_label', 'No thank you')
      ->save();
  }

  $module_installer = \Drupal::service('module_installer');
  foreach ([
             'svg_image_field',
             'views_taxonomy_term_name_depth',
           ] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Set the new settings for mtls certificate headers
 */
function apim_profile_update_8022() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('show_mtls_header', TRUE)
    ->save();
}

/**
 * Sets the feedback form recipient to the site email if not yet set
 */
function apim_profile_update_8023() {
  if (!\Drupal::config('contact.form.feedback')->isNew()) {
    $updated = FALSE;
    $recipients = \Drupal::config('contact.form.feedback')->get('recipients');
    $siteEmail = \Drupal::config('system.site')->get('mail');
    foreach ($recipients as $key => $recipient) {
      if ($recipient == "admin@example.com") {
        $recipients[$key] = $siteEmail;
        $updated = TRUE;
      }
    }
    if ($updated) {
      \Drupal::service('config.factory')->getEditable('contact.form.feedback')
        ->set('recipients', $recipients)
        ->save();
    }
  }
}

function apim_profile_update_8024() {
  // force removal of the php module
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('php')) {
    $module_installer = \Drupal::service('module_installer');
    $module_installer->uninstall(['php']);
  }
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('module_blacklist', ['domain', 'theme_editor', 'backup_migrate', 'delete_all', 'devel_themer', 'php', 'content_sync'])
    ->save();
}

/*
 * Add back in missing apim_profile translations
 */
function apim_profile_update_8025() {

  // update block contents on homepage
  // welcome page is managed by page_manager
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('page_manager')) {
    $page = \Drupal::entityTypeManager()->getStorage('page')->load('welcome');
    if ($page !== NULL) {
      $variants_array = $page->getVariants();
      $variant = reset($variants_array);
      $content = $variant->calculateDependencies()['content'];
      $block_content_storage = \Drupal::entityTypeManager()->getStorage('block_content');
      module_load_include('inc', 'apim_profile', 'apim_profile.homepage');

      foreach ($content as $block_content_id) {
        // id = block_content:basic:0b7e88e2-549b-4497-8a77-41a3c2885786
        // we just need the uuid from this.
        $raw_block_content_id = explode(':', $block_content_id)[2];

        $block_content_array = $block_content_storage->loadByProperties(['uuid' => $raw_block_content_id]);
        $block_content = reset($block_content_array);

        if ($block_content !== NULL) {
          // we have to match on the label of the block as we don't have anything else
          $label = $block_content->get('info')->value;
          switch ($label) {
            case 'Go Ahead [en]':
              add_go_ahead_block_content_translations($block_content);
              break;
            case 'Get Help [en]':
              add_get_help_block_content_translations($block_content);
              break;
            case 'Getting Started [en]':
              add_getting_started_block_content_translations($block_content);
              break;
            case 'Welcome Banner [en]':
              add_welcome_block_translations($block_content);
              break;
          }
        }

      }
    }
  }

  // update node translations (FAQ, privacy, t&cs)
  module_load_include('inc', 'apim_profile', 'apim_profile.import_nodes');

  $terms_node = \Drupal::entityTypeManager()->getStorage('node')->load(1);
  if ($terms_node !== NULL && $terms_node->getTitle() === 'Terms of use' && $terms_node->getType() === 'page') {
    add_terms_node_translations($terms_node);
  }

  $privacy_node = \Drupal::entityTypeManager()->getStorage('node')->load(2);
  if ($privacy_node !== NULL && $privacy_node->getTitle() === 'Privacy Policy' && $privacy_node->getType() === 'page') {
    add_privacy_node_translations($privacy_node);
  }

  $api_faq_node = \Drupal::entityTypeManager()->getStorage('node')->load(3);
  if ($api_faq_node !== NULL && $api_faq_node->getTitle() === 'Using our APIs' && $api_faq_node->getType() === 'faq') {
    add_api_faq_node_translations($api_faq_node);
  }

  $app_faq_node = \Drupal::entityTypeManager()->getStorage('node')->load(4);
  if ($app_faq_node !== NULL && $app_faq_node->getTitle() === 'Apps' && $app_faq_node->getType() === 'faq') {
    add_app_faq_node_translations($app_faq_node);
  }

  // menu links
  $menu_links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadMultiple();
  foreach ($menu_links as $link) {
    $title = $link->getTitle();
    switch($title) {
      case 'API Products':
        add_apis_link_translations($link);
        break;
      case 'Apps':
        add_apps_link_translations($link);
        break;
      case 'Forums':
        add_forum_link_translations($link);
        break;
      case 'Sign in':
        add_sign_in_link_translations($link);
        break;
      case 'Create account':
        add_create_account_link_translations($link);
        break;
      case 'Contact':
        add_contact_menu_translations($link);
        break;
      case 'Terms and Conditions':
        add_terms_menu_translations($link);
        break;
      case 'Privacy Policy':
        add_privacy_menu_translations($link);
        break;
    }
  }

}

/**
 * Remove node_type_count and use apic_type_count modules
 */
function apim_profile_update_8026() {
  $module_installer = \Drupal::service('module_installer');
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('node_type_count')) {
    $module_installer->uninstall(['node_type_count']);
  }
  $module_installer->install(['apic_type_count']);
}

/**
 * If the rules module is not in use then disable it
 */
function apim_profile_update_8027() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('rules')) {
    // if there are still rules then leave them, else disable the modules
    $query = \Drupal::entityQuery('rules_reaction_rule');
    $result = $query->count()->execute();
    if (!isset($result) || (int)$result < 1) {
      $module_installer = \Drupal::service('module_installer');
      $module_installer->uninstall(['rules', 'rules_http_client']);
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function apim_profile_update_dependencies() {
  return [
    'apim_profile' => [
      // block_content 8600 must run before apim_profile 8002.
      8002 => [
        'block_content' => 8600,
      ],
      // taxonomy 8502 update must have run in order to create the taxonomy_term__parent table
      8007 => [
        'taxonomy' => 8502,
      ],
      // block_content 8600 *also* must run before apim_profile 8018 - for cases where we start later than 8002.
      8018 => [
        'block_content' => 8600,
      ],
      // system 8803 must run before apim_profile 8025
      8025 => [
        'system'=> 8803,
      ],
    ],
    'eu_cookie_compliance_update' => [
      // need apim_profile_update_8021 to have run before the latest eu_cookie_compliance_update update
      8114 => [
        'apim_profile' => 8021,
      ],
    ],
  ];
}
