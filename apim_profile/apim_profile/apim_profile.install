<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2022
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Install, update and uninstall functions for the apim_profile install profile.
 */

use Drupal\block\Entity\Block;
use Drupal\block_content\Entity\BlockContent;
use Drupal\captcha\Entity\CaptchaPoint;
use Drupal\field\Entity\FieldConfig;
use Drupal\locale\Gettext;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\search_api\Entity\Index;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\views\Views;


/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @see system_install()
 *
 */
function apim_profile_install() {
  $path = __DIR__;

  // First, do everything in standard profile.
  include_once DRUPAL_ROOT . '/core/profiles/standard/standard.install';
  standard_install();

  $core_dependencies = [
    'node',
    'history',
    'block',
    'dynamic_page_cache',
    'page_cache',
    'filter',
    'block_content',
    'breakpoint',
    'color',
    'config',
    'comment',
    'contextual',
    'datetime',
    'contact',
    'quickedit',
    'help',
    'image',
    'options',
    'path',
    'taxonomy',
    'shortcut',
    'toolbar',
    'field_ui',
    'file',
    'rdf',
    'views',
    'views_ui',
    'editor',
    'ckeditor',
    'automated_cron',
    'ban',
    'menu_ui',
    'link',
    'menu_link_content',
    'forum',
    'tour',
    'update',
    'content_translation',
    'language',
    'locale',
    'user',
    'inline_form_errors',
    'big_pipe',
    'media',
  ];

  $module_dependencies = [
    'acl',
    'admin_toolbar',
    'admin_toolbar_tools',
    'bootstrap_layouts',
    'blazy',
    'blazy_ui',
    'blog',
    'ctools',
    'ctools_views',
    'linkit',
    'field_group',
    'address',
    'mailsystem',
    'taxonomy_menu',
    'autologout',
    'session_limit',
    'token',
    'typed_data',
    'ultimate_cron',
    'user_pwreset_timeout',
    'panels',
    'panels_ipe',
    'seckit',
    'metatag',
    'metatag_dc',
    'slick',
    'slick_extras',
    'slick_ui',
    'slick_views',
    'captcha',
    'image_captcha',
    'recaptcha',
    'votingapi',
    'workbench',
    'page_manager',
    'page_manager_ui',
    'votingapi_widgets',
    'cshs',
    'search404',
    'change_pwd_page',
    'libraries',
    'responsive_image',
    'editor_file',
    'config_update',
    'password_policy',
    'password_policy_length',
    'password_policy_character_types',
    'password_policy_username',
    'password_policy_consecutive',
    'password_strength',
    'csp',
    'perimeter',
    'check_dns',
    'views_bootstrap',
    'ckeditor_media_embed',
    'social_media_links',
    'linkit',
    'health_check',
    'editor_advanced_link',
    'restrict_by_ip',
    'file_upload_secure_validator',
    'select_or_other',
    'crop',
    'focal_point',
    'entity_browser',
    'dropzonejs',
    'dropzonejs_eb_widget',
    'entity_browser_enhanced',
    'file_browser',
    'embed',
    'content_browser',
    'entity_embed',
    'honeypot',
    'masonry',
    'masonry_views',
    'views_ajax_history',
    'contact_block',
    'twig_tweak',
    'config_translation',
    'better_exposed_filters',
    'search_api',
    'search_api_db',
    'search_api_autocomplete',
    'robotstxt',
    'flood_control',
    'key',
    'encrypt',
    'real_aes',
    'unlimited_number',
    'avatars',
    'mimemail',
    'views_autocomplete_filters',
    'multiple_fields_remove_button',
    'account_field_split',
    'eu_cookie_compliance',
    'serialization',
    'smart_trim',
    'r4032login',
    'noopener_filter',
    'session_based_temp_store',
    'select_translation',
    'term_csv_export_import',
    'page_load_progress',
    'advagg',
    'advagg_css_minify',
    'advagg_js_minify',
    'warmer',
    'warmer_cdn',
    'warmer_entity',
    'svg_image_field',
    'views_taxonomy_term_name_depth',
    'extlink',
    'clipboardjs',
    'securitytxt',
    'view_password',
    'drush_language',
    'maintenance200',
    'trusted_reverse_proxy',
  ];

  $our_modules = [
    'ghmarkdown',
    'ibm_log_stdout',
    'ibm_apim',
    'ibm_apic_mail',
    'ibm_apic_flood_control_ui',
    'ibm_create_payment_method',
    'apic_type_count',
    'apic_letter_avatar',
    'auth_apic',
    'apic_api',
    'apic_app',
    'consumerorg',
    'product',
    'featuredcontent',
    'socialblock',
    'themegenerator',
    'mail_subscribers',
    'drushadmin',
    'ibm_event_log',
  ];
  // enable our modules
  $module_installer = \Drupal::service('module_installer');
  foreach ($core_dependencies as $module) {
    $module_installer->install([$module]);
  }
  foreach ($module_dependencies as $module) {
    $module_installer->install([$module]);
  }
  foreach ($our_modules as $module) {
    $module_installer->install([$module]);
  }

  // Set front page to "home".
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('page.front', '/home')
    ->save(TRUE);

  // TODO remove bartik from this list
  $themes = ['bartik', 'seven', 'connect_theme'];
  $theme_installer = \Drupal::service('theme_installer');
  foreach ($themes as $theme) {
    $theme_installer->install([$theme]);
  }
  // set connect_theme to be default
  \Drupal::configFactory()
    ->getEditable('system.theme')
    ->set('default', 'connect_theme')
    ->save();

  \Drupal::configFactory()
    ->getEditable('node.settings')
    ->set('use_admin_theme', FALSE)
    ->save();

  // Ensure the translation fields are created in the database.
  \Drupal::service('ibm_apim.apic_definition_update_manager')->applyUpdates();

  // Enable default permissions for system roles.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, [
    'access comments',
    'use search autocomplete',
    'use page load progress',
  ]);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, [
    'access comments',
    'post comments',
    'skip comment approval',
    'use search autocomplete',
    'create forum content',
    'edit own forum content',
    'vote on node:api:apic_rating',
    'vote on node:consumerorg:apic_rating',
    'vote on node:product:apic_rating',
    'clear own vote on node:api:apic_rating',
    'clear own vote on node:consumerorg:apic_rating',
    'clear own vote on node:product:apic_rating',
    'edit own vote on node:api:apic_rating',
    'edit own vote on node:consumerorg:apic_rating',
    'edit own vote on node:product:apic_rating',
    'avatars avatar_generator user letter_generator',
    'avatars avatar_generator user user_upload',
    'use page load progress',
  ]);

  user_role_grant_permissions('administrator', ['administer page load progress']);

  // Assign user 1 the "administrator" and "superuser" roles.
  $user = User::load(1);
  if ($user !== NULL) {
    $user->roles[] = 'administrator';
    $user->roles[] = 'superuser';
    $user->save();
  }

  // load apim_profile translations in to the database
  apim_profile_load_translations();

  // create main menu links
  apim_profile_main_menu_links();

  // create login links
  apim_profile_login_menu_links();

  // create default nodes
  require_once $path . '/apim_profile.import_nodes.inc';
  apim_profile_create_nodes();

  // put blocks in the right place
  apim_profile_place_blocks();

  // front page
  require_once $path . '/apim_profile.homepage.inc';
  apim_profile_create_homepage_blocks();
  apim_profile_create_forum_block();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['access site-wide contact form']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['access site-wide contact form']);

  // Allow all users to use search.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['search content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search content']);

  // forum moderator permissions
  user_role_grant_permissions('forum_moderator', [
    'delete any forum content',
    'edit any forum content',
  ]);

  // set up default APIC settings
  apim_profile_default_apic_config();

  // use private file hosting by default
  \Drupal::configFactory()
    ->getEditable('system.file')
    ->set('temporary_maximum_age', 2419200)
    ->set('default_scheme', 'private')
    ->save();

  \Drupal::configFactory()
    ->getEditable('bootstrap.settings')
    ->set('cdn_provider', '')
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('connect_theme.settings')
    ->set('tooltip_enabled', 0)
    ->save();

  // configure captcha
  apim_profile_captcha_config();

  // rebuild access permissions
  node_access_rebuild();

  // enable paranoia last to avoid it blocking other config setup
  //$module_installer->install(['paranoia']);
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_main_menu_links() {
  $menu_name = 'main';

  $home_link = MenuLinkContent::create([
    'title' => t('Home', [], ['langcode' => 'en']),
    'description' => t('Portal homepage', [], ['langcode' => 'en']),
    'link' => ['uri' => 'internal:/'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => -1,
  ]);
  $home_link->save();
  add_home_link_translations($home_link);

  $apis_link = MenuLinkContent::create([
    'title' => t('API Products', [], ['langcode' => 'en']),
    'description' => t('Browse available APIs', [], ['langcode' => 'en']),
    'link' => ['uri' => 'internal:/product', [], ['langcode' => 'en']],
    'menu_name' => $menu_name,
    'weight' => 5,
    'langcode' => 'en',
  ]);
  $apis_link->save();
  add_apis_link_translations($apis_link);

  $apps_link = MenuLinkContent::create([
    'title' => t('Apps', [], ['langcode' => 'en']),
    'description' => t('Create and manage your apps', [], ['langcode' => 'en']),
    'link' => ['uri' => 'internal:/application', [], ['langcode' => 'en']],
    'menu_name' => $menu_name,
    'weight' => 10,
    'langcode' => 'en',
  ]);
  $apps_link->save();
  add_apps_link_translations($apps_link);

  $forum_link = MenuLinkContent::create([
    'title' => t('Forums'),
    'description' => t('Interact with our community'),
    'link' => ['uri' => 'internal:/forum'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => 25,
  ]);
  $forum_link->save();
  add_forum_link_translations($forum_link);

  // update weight of the blogs link
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
  $blog_menu_id = 'views_view:views.blog.blog_all';
  $blogs_link = $menu_link_manager->getDefinition($blog_menu_id);
  $blogs_link['weight'] = 21;
  $menu_link_manager->updateDefinition($blog_menu_id, $blogs_link);
  $cache = \Drupal::cache('menu');
  $cache->deleteAll();
}

/**
 * @param $link
 */
function add_forum_link_translations($link): void {

  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if ($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Forums', [], ['langcode' => $lang]),
      'description' => t('Interact with our community', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/forum'],
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => 25,
    ];
    $link->addTranslation($lang, $translation);
  }

  $link->save();
}

/**
 * @param $link
 */
function add_apps_link_translations($link): void {

  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if ($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Apps', [], ['langcode' => $lang]),
      'description' => t('Create and manage your apps', [], ['langcode' => $lang]),
      'langcode' => $lang,
    ];
    $link->addTranslation($lang, $translation);
  }
  $link->save();
}

/**
 * @param $link
 */
function add_apis_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if ($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('API Products', [], ['langcode' => $lang]),
      'description' => t('Browse available APIs', [], ['langcode' => $lang]),
      'langcode' => $lang,
    ];
    $link->addTranslation($lang, $translation);
  }
  $link->save();
}

/**
 * @param $link
 */
function add_home_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if ($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Home', [], ['langcode' => $lang]),
      'description' => t('Portal homepage', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/'],
      'menu_name' => 'main',
      'expanded' => TRUE,
      'weight' => -1,
    ];
    $link->addTranslation($lang, $translation);
  }

  $link->save();
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_login_menu_links() {
  $menu_name = 'login';

  $login_link = MenuLinkContent::create([
    'title' => t('Sign in'),
    'description' => t('Sign in to your account'),
    'link' => ['uri' => 'internal:/user/login'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => 20,
  ]);
  $login_link->save();
  add_sign_in_link_translations($login_link);


  $register_link = MenuLinkContent::create([
    'title' => t('Create account'),
    'description' => t('Create a new account'),
    'link' => ['uri' => 'internal:/user/register'],
    'menu_name' => $menu_name,
    'expanded' => TRUE,
    'weight' => 10,
  ]);
  $register_link->save();
  add_create_account_link_translations($register_link);
}

/**
 * @param $link
 */
function add_create_account_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if ($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Create account', [], ['langcode' => $lang]),
      'description' => t('Create a new account', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/user/register'],
      'menu_name' => 'login',
      'expanded' => TRUE,
      'weight' => 10,
    ];
    $link->addTranslation($lang, $translation);
  }

  $link->save();
}

/**
 * @param $link
 */
function add_sign_in_link_translations($link): void {
  $languages = \Drupal::languageManager()->getLanguages();
  foreach ($languages as $language) {
    $lang = $language->getId();
    if ($lang === 'en') {
      continue;
    }
    if ($link->hasTranslation($lang)) {
      $link->removeTranslation($lang);
    }
    $translation = [
      'title' => t('Sign in', [], ['langcode' => $lang]),
      'description' => t('Sign in to your account', [], ['langcode' => $lang]),
      'link' => ['uri' => 'internal:/user/login'],
      'menu_name' => 'login',
      'expanded' => TRUE,
      'weight' => 20,
    ];
    $link->addTranslation($lang, $translation);
  }
  $link->save();
}

/**
 * Set default options for configuring APIC
 */
function apim_profile_default_apic_config() {
  $codesnippets = [
    'curl' => TRUE,
    'ruby' => TRUE,
    'python' => TRUE,
    'php' => TRUE,
    'java' => TRUE,
    'node' => TRUE,
    'go' => TRUE,
    'swift' => TRUE,
    'c' => TRUE,
    'csharp' => TRUE,
  ];
  $categories = [
    'enabled' => TRUE,
    'create_taxonomies_from_categories' => TRUE,
  ];
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('autocreate_apiforum', TRUE)
    ->set('show_placeholder_images', TRUE)
    ->set('show_register_app', TRUE)
    ->set('show_versions', TRUE)
    ->set('enable_api_test', TRUE)
    ->set('validate_apis', TRUE)
    ->set('autotag_with_phase', FALSE)
    ->set('show_cors_warnings', TRUE)
    ->set('show_analytics', TRUE)
    ->set('soap_swagger_download', FALSE)
    ->set('render_api_schema_view', TRUE)
    ->set('optimise_oauth_ux', TRUE)
    ->set('show_mtls_header', TRUE)
    ->set('email_as_username', TRUE)
    ->set('application_image_upload', TRUE)
    ->set('hide_admin_registry', FALSE)
    ->set('render_api_schema_view', TRUE)
    ->set('allow_consumerorg_creation', TRUE)
    ->set('allow_consumerorg_rename', TRUE)
    ->set('allow_consumerorg_delete', TRUE)
    ->set('allow_consumerorg_change_owner', TRUE)
    ->set('enable_oidc_register_form', TRUE)
    ->set('enable_oidc_login_form', FALSE)
    ->set('allow_user_delete', TRUE)
    ->set('allow_new_credentials', TRUE)
    ->set('allow_clientid_reset', TRUE)
    ->set('allow_clientsecret_reset', TRUE)
    ->set('categories', $categories)
    ->set('soap_codesnippets', FALSE)
    ->set('codesnippets', $codesnippets)
    ->set('router_type', 'hash')
    ->set('certificate_strip_newlines', TRUE)
    ->set('certificate_strip_prefix', TRUE)
    ->set('payment_method_encryption_profile', 'socialblock')
    ->set('api_max_depth', 9)
    ->set('example_array_items', 3)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.devel_settings')
    ->set('entry_exit_trace', FALSE)
    ->set('apim_rest_trace', FALSE)
    ->set('acl_debug', FALSE)
    ->set('webhook_debug', FALSE)->save();

  \Drupal::service('config.factory')
    ->getEditable('locale.settings')
    ->set('translation.use_source', 'local')
    ->set('translation.path', \Drupal::service('site.path') . '/translations')
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('user.settings')
    ->set('notify.status_activated', FALSE)
    ->set('notify.register_admin_created', FALSE)
    ->set('notify.register_no_approval_required', FALSE)
    ->set('notify.register_pending_approval', FALSE)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('system.maintenance')
    ->set('message', '<h3>Sorry! Our site is currently under maintenance. We should be back shortly.</h3>')
    ->save(TRUE);
}

/**
 * These blocks are placed programmatically since there were dependency issues doing it via YML files
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_place_blocks() {
  $values = [
    'id' => 'searchiconblock',
    'plugin' => 'ibm_apim_search_icon',
    'provider' => NULL,
    'region' => 'navigation_right',
    'settings' => [
      'id' => 'ibm_apim_search_icon',
      'label' => 'Search Icon Block',
      'provider' => 'ibm_apim',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 5,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'consumerorganizationselection',
    'plugin' => 'consumer_org_select',
    'provider' => NULL,
    'region' => 'navigation_right',
    'settings' => [
      'id' => 'consumer_org_select',
      'label' => 'Consumer organization Selection',
      'provider' => 'consumerorg',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [
      'user_role' => [
        'id' => 'user_role',
        'roles' => ['authenticated' => 'authenticated'],
        'negate' => FALSE,
        'context_mapping' => [
          'user' => '@user.current_user_context:current_user',
        ],
      ],
    ],
    'weight' => 3,
  ];
  $block = Block::create($values);
  $block->save();

  // add admin status messages block
  $values = [
    'id' => 'adminstatusmessages',
    'plugin' => 'ibm_apim_status_messages',
    'provider' => NULL,
    'region' => 'highlighted',
    'settings' => [
      'id' => 'ibm_apim_status_messages',
      'label' => 'Admin Status Messages',
      'provider' => 'ibm_apim',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  // add subscription wizard title block
  $values = [
    'id' => 'subwizardtitle',
    'plugin' => 'ibm_apim_wizard_title',
    'provider' => NULL,
    'region' => 'highlighted',
    'settings' => [
      'id' => 'ibm_apim_wizard_title',
      'label' => 'Subscription Wizard Title',
      'provider' => 'ibm_apim',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'contactblock',
    'plugin' => 'contact_block',
    'provider' => NULL,
    'region' => 'disabled',
    'settings' => [
      'id' => 'contact_block',
      'label' => 'Contact block',
      'provider' => 'contact_block',
      'label_display' => '0',
      'contact_form' => 'feedback',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'socialmedialinks',
    'plugin' => 'social_media_links_block',
    'provider' => NULL,
    'region' => 'disabled',
    'settings' => [
      'id' => 'social_media_links_block',
      'label' => 'Social Media Link',
      'provider' => 'social_media_links',
      'label_display' => '0',
      'appearance' => ['orientation' => 'h', 'show_name' => '0'],
      'link_attributes' => ['target' => '_blank', 'rel' => 'nofollow'],
      'iconset' => [
        'style' => 'fontawesome:2x',
        'installed_iconsets' => [
          'fontawesome' => ['examples' => ''],
          'elegantthemes' => ['examples' => ''],
        ],
      ],
      'platforms' => [
        'instagram' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'youtube_channel' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'contact' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'googleplus' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'twitter' => [
          'value' => 'ibmcloud',
          'description' => 'Follow us on Twitter',
          'weight' => '-10',
        ],
        'youtube' => [
          'value' => 'user/IBMCloud',
          'description' => 'Follow us on YouTube',
          'weight' => '-10',
        ],
        'github' => [
          'value' => 'ibm-apiconnect',
          'description' => 'Follow us on GitHub',
          'weight' => '-10',
        ],
        'slideshare' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'vimeo' => ['value' => '', 'description' => '', 'weight' => '-10'],
        'behance' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'facebook' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'bitbucket' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'drupal' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'email' => ['value' => '', 'description' => '', 'weight' => '-10'],
        'pintrest' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'linkedin' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'tumblr' => [
          'value' => '',
          'description' => '',
          'weight' => '-10',
        ],
        'rss' => ['value' => '', 'description' => '', 'weight' => '-10'],
      ],
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  $values = [
    'id' => 'apiconceptsblock',
    'plugin' => 'ibm_apim_concepts',
    'provider' => NULL,
    'region' => 'disabled',
    'settings' => [
      'id' => 'ibm_apim_concepts',
      'label' => 'Concepts overview',
      'provider' => 'ibm_apim',
      'label_display' => '0',
    ],
    'theme' => 'connect_theme',
    'visibility' => [],
    'weight' => 0,
  ];
  $block = Block::create($values);
  $block->save();

  // ensure the no content blocks are in the disabled region but enabled
  // the connect_theme wont have been enabled when ibm_apim was installed
  $block = Block::load('noappsblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }
  $block = Block::load('noapisblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }
  $block = Block::load('noproductsblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }
  $block = Block::load('noblogsblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }

  // no content blocks
  $path = __DIR__;
  require_once $path . '/../../modules/ibm_apim/ibm_apim.emptycontent.inc';
  ibm_apim_update_no_content_blocks();
}

/**
 * Set up captcha configuration.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_captcha_config() {
  $challengeType = 'image_captcha/Image';

  \Drupal::service('config.factory')
    ->getEditable('captcha.settings')
    ->set('default_challenge', $challengeType)
    ->set('persistence', 2)
    ->set('add_captcha_description', FALSE)
    ->save();

  _apim_profile_enable_captcha_on_form('user_pass');
  _apim_profile_enable_captcha_on_form('user_register_form');
  _apim_profile_enable_captcha_on_form('contact_message_personal_form');

  _apim_profile_set_captcha_challenge_point($challengeType);
}


/**
 * Set all the captcha challenge point to a type.
 *
 * @param $form_id
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _apim_profile_set_captcha_challenge_point($type) {
  $query = \Drupal::entityQuery('captcha_point');
  $ids = $query->accessCheck()->execute();

  foreach ($ids as $id) {
    $cp = CaptchaPoint::load($id);
    if ($cp !== NULL) {
      $cp->setCaptchaType($type);
      $cp->save();
    }
  }
}

/**
 * Enable captcha on given form.
 *
 * @param $form_id
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function _apim_profile_enable_captcha_on_form($form_id) {

  $query = \Drupal::entityQuery('captcha_point')->condition('formId', $form_id);
  $ids = $query->execute();
  if (count($ids) !== 1) {
    throw new Error('Unexpected number of ' . $form_id . ' captcha points: ' . count($ids));
  }

  // Load the only captcha_point we have.
  $cp = CaptchaPoint::load(reset($ids));
  if ($cp !== NULL) {
    $cp->enable();
    $cp->save();
  }
}

/**
 * Function to load sites/all/translations/apim_profile.LANGCODE.po
 * for every language that is enabled in the site. Translations found are loaded
 * in to the database. These translations are later used when menu links and
 * block content is created.
 *
 * @throws \Exception
 */
function apim_profile_load_translations() {
  // Load sites/all/translations/apim_profile.LANGCODE.po in to the database
  // allowing apim_profile to later create block content and menu links using
  // the translated strings.

  $languages = \Drupal::languageManager()->getLanguages();

  foreach ($languages as $language) {
    if ($language->getId() === 'en') {
      continue;
    }
    $file = new stdClass();
    $file->langcode = $language->getId();
    $file->uri = 'sites/all/translations/apim_profile.' . $file->langcode . '.po';
    $options = [];
    $options['customized'] = LOCALE_NOT_CUSTOMIZED;
    $options['overwrite_options'] = ['customized' => TRUE, 'not_customized' => TRUE];

    if (!file_exists($file->uri)) {
      \Drupal::logger('apim_profile')
        ->info('There is no translation file to import from for @lang. File at path @path not found.', [
          '@lang' => $file->langcode,
          '@path' => $file->uri,
        ]);
    }
    else {
      $result = Gettext::fileToDatabase($file, $options);
      // Validate that strings were loaded in properly
      if ((isset($result['additions'], $result['updates']) && $result['additions'] === 0 && $result['updates'] === 0) || (!isset($result['skips']) && $result['skips'] !== 0)) {
        \Drupal::logger('apim_profile')
          ->error('Translation import for language @lang failed to add any new strings to the database.', ['@lang' => $file->langcode]);
      }
    }
  }
}

// upgrade hooks, increment final digit to update the schema version.

/**
 * Upgrade to 2018.1.1
 *
 * disable drupal email notifications.
 */
function apim_profile_update_8001() {
  \Drupal::service('config.factory')
    ->getEditable('user.settings')
    ->set('notify.status_activated', FALSE)
    ->set('notify.register_admin_created', FALSE)
    ->set('notify.register_no_approval_required', FALSE)
    ->set('notify.register_pending_approval', FALSE)
    ->save();
}

/**
 * Upgrade to 2018.3.7
 *
 * Fix the products link in the getting started block
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8002() {
  $path = __DIR__;
  require_once $path . '/apim_profile.homepage.inc';
  update_gsg_block();
}

/**
 * ensure default permissions for all roles are set
 */
function apim_profile_update_8003() {
  $path = __DIR__;

  // reset permissions to defaults from the yml files
  foreach (['content_author', 'forum_moderator', 'authenticated', 'administrator', 'anonymous', 'superuser'] as $role_id) {
    $info = \yaml_parse_file($path . '/config/install/user.role.' . $role_id . '.yml');

    $role = Role::load($role_id);

    if ($role !== NULL) {
      $issueAccessPermissions = $info['permissions'];

      foreach ($issueAccessPermissions as $permission) {
        $role->grantPermission($permission);
      }
    }
  }
}

/**
 * disable instantaneous indexing of content for performance reasons - let cron handle it
 */
function apim_profile_update_8004() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('search_api')) {
    $index = Index::load('default_index');
    if (isset($index)) {
      $index->setOption('index_directly', FALSE)->save();
    }
  }
}

/**
 * update mail transport
 */
function apim_profile_update_8005() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('swiftmailer')) {
    \Drupal::service('config.factory')
      ->getEditable('swiftmailer.transport')
      ->set('sendmail_path', '/opt/ibm/bin/sendmail')
      ->save();
  }
}

/**
 * ensure have permission to change consumer org owner
 */
function apim_profile_update_8006() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('allow_consumerorg_change_owner', TRUE)
    ->save();
}

/**
 * enable additional modules
 */
function apim_profile_update_8007() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['noopener_filter', 'session_based_temp_store'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Add password policy consecutive character check
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8008() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('password_policy')) {
    $module_installer = \Drupal::service('module_installer');
    // enable password policy consecutive character constraint
    foreach (['password_policy_consecutive'] as $module) {
      $module_installer->install([$module]);
    }

    $policy = password_policy_load('default');
    $constraints = $policy->getConstraints();
    $found = FALSE;
    foreach ($constraints as $constraint) {
      if ($constraint['id'] === 'consecutive') {
        $found = TRUE;
      }
    }
    if ($found !== TRUE) {
      $constraints[] = ['id' => 'consecutive', 'max_consecutive_characters' => 3];
      $policy->set('policy_constraints', $constraints);
      $policy->save();
    }
  }
}

/**
 * ensure bootstrap settings are not to use a CDN
 */
function apim_profile_update_8009() {
  \Drupal::service('config.factory')
    ->getEditable('bootstrap.settings')
    ->set('cdn_provider', '')
    ->save();
}

/**
 * Switch to using our email provider module
 */
function apim_profile_update_8010() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['ibm_apic_mail'] as $module) {
    $module_installer->install([$module]);
  }
  // remove swiftmailer module
  $module_installer->uninstall(['swiftmailer'], TRUE);

  // update config
  $mailSystemModules = \Drupal::service('config.factory')->get('mailsystem.settings')->get('modules');
  unset($mailSystemModules['swiftmailer']);
  $mailSystemModules['mail_subscribers']['none']['sender'] = 'mailsystem_apicmail';
  $mailSystemModules['mail_subscribers']['none']['formatter'] = 'mailsystem_apicmail';
  \Drupal::service('config.factory')
    ->getEditable('mailsystem.settings')
    ->set('defaults', ['sender' => 'mailsystem_apicmail', 'formatter' => 'mailsystem_apicmail'])
    ->set('modules', $mailSystemModules)
    ->save();
}

/**
 * Use the correct header for restrict_by_ip
 */
function apim_profile_update_8011() {
  // update config
  \Drupal::service('config.factory')
    ->getEditable('restrict_by_ip.settings')
    ->set('header', 'HTTP_X_FORWARDED_FOR')
    ->save();
}

/**
 * Enable select_translation module
 */
function apim_profile_update_8012() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['select_translation'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Enable term_csv_export_import module
 */
function apim_profile_update_8013() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['term_csv_export_import'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Enable page_load_progress and apic_type_count modules
 */
function apim_profile_update_8014() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['page_load_progress', 'apic_type_count'] as $module) {
    $module_installer->install([$module]);
  }
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['use page load progress']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['use page load progress']);
  user_role_grant_permissions('administrator', ['administer page load progress']);
}

/**
 * Enable ibm_apic_flood_control_ui module
 */
function apim_profile_update_8015() {
  $module_installer = \Drupal::service('module_installer');
  foreach (['ibm_apic_flood_control_ui'] as $module) {
    $module_installer->install([$module]);
  }
}

/**
 * Set the new settings for application certificates
 */
function apim_profile_update_8016() {
  $categories = [
    'enabled' => TRUE,
    'create_taxonomies_from_categories' => TRUE,
  ];

  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('certificate_strip_newlines', TRUE)
    ->set('certificate_strip_prefix', TRUE)
    ->set('optimise_oauth_ux', TRUE)
    ->set('categories', $categories)
    ->save();
}

/**
 * Enable Advanced Aggregation of JS and CSS
 */
function apim_profile_update_8017() {
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
  $module_installer = \Drupal::service('module_installer');
  foreach ([
             'advagg',
             'advagg_css_minify',
             'advagg_js_minify',
           ] as $module) {
    $module_installer->install([$module]);
  }
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();

  \Drupal::service('config.factory')
    ->getEditable('advagg.settings')
    ->set('css', ['brotli' => TRUE, 'combine_media' => FALSE, 'fix_type' => TRUE, 'preserve_external' => FALSE])
    ->set('dns_prefetch', FALSE)
    ->set('path', ['convert' => ['absolute_to_protocol_relative' => TRUE, 'absolute' => FALSE, 'force_https' => FALSE]])
    ->set('cache_level', 2)
    ->set('cron_frequency', 86400)
    ->set('enabled', TRUE)
    ->set('global_counter', 0)
    ->set('immutable', TRUE)
    ->set('js', ['brotli' => TRUE, 'fix_type' => TRUE, 'preserve_external' => FALSE])
    ->set('skip_enabled_preprocess_check', FALSE)
    ->set('show_bypass_cookie_message', TRUE)
    ->set('symlinks', FALSE)
    ->set('symlinksifownermatch', FALSE)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('advagg_css_minify.settings')
    ->set('minifier', 2)
    ->set('add_license', FALSE)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('advagg_js_minify.settings')
    ->set('minifier', 0)
    ->set('add_license', FALSE)
    ->set('ratio_max', 0.9)
    ->set('ratio_min', 0.1)
    ->save();
}

/**
 * Ensure disabled blocks are left sitting in header region
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8018() {
  \Drupal::service('ibm_apim.apic_definition_update_manager')->applyUpdates();

  $categoriesBlock = Block::load('tags');
  if ($categoriesBlock !== NULL) {
    $categoriesBlock->set('region', 'collapse_left');
    $categoriesBlock->set('status', FALSE);
    $categoriesBlock->save();
  }

  $breadcrumbsBlock = Block::load('connect_theme_breadcrumbs');
  if ($breadcrumbsBlock !== NULL) {
    $breadcrumbsBlock->set('region', 'disabled');
    $breadcrumbsBlock->save();
  }

  $toolsBlock = Block::load('connect_theme_tools');
  if ($toolsBlock !== NULL) {
    $toolsBlock->set('region', 'disabled');
    $toolsBlock->save();
  }
}

function apim_profile_update_8019() {
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
  $module_installer = \Drupal::service('module_installer');
  foreach ([
             'warmer',
             'warmer_cdn',
             'warmer_entity',
           ] as $module) {
    $module_installer->install([$module]);
  }
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  \Drupal::service('config.factory')
    ->getEditable('warmer.settings')
    ->set('entity', [
      'id' => 'entity',
      'frequency' => '300',
      'batchSize' => '50',
      'entity_types' => [
        'block:block' => 'block:block',
        'configurable_language:configurable_language' => 'configurable_language:configurable_language',
        'node:api' => 'node:api',
        'node:application' => 'node:application',
        'node:article' => 'node:article',
        'node:blog_post' => 'node:blog_post',
        'node:consumerorg' => 'node:consumerorg',
        'node:faq' => 'node:faq',
        'node:forum' => 'node:forum',
        'node:page' => 'node:page',
        'node:product' => 'node:product',
        'node_type:node_type' => 'node_type:node_type',
        'page:page' => 'page:page',
        'page_variant:page_variant' => 'page_variant:page_variant',
        'menu:menu' => 'menu:menu',
        'user:user' => 'user:user',
        'user_role:user_role' => 'user_role:user_role',
        'view:view' => 'view:view',
      ],
    ])
    ->save();
}

/**
 * Update the proxy settings for new analytics option
 */
function apim_profile_update_8020() {
  $proxy_for_api = \Drupal::config('ibm_apim.settings')->get('proxy_for_api');
  if ($proxy_for_api === 'BOTH') {
    \Drupal::service('config.factory')
      ->getEditable('ibm_apim.settings')
      ->set('proxy_for_api', 'CONSUMER,PLATFORM,ANALYTICS')->save();
  }
}

function apim_profile_update_8021() {
  $disagree_label = \Drupal::config('eu_cookie_compliance.settings')->get('disagree_button_label');
  if (!isset($disagree_label)) {
    \Drupal::configFactory()
      ->getEditable('eu_cookie_compliance.settings')
      ->set('disagree_button_label', 'No thank you')
      ->save();
  }

  $module_installer = \Drupal::service('module_installer');
  foreach ([
             'svg_image_field',
             'views_taxonomy_term_name_depth',
           ] as $module) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer->install([$module]);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * Set the new settings for mtls certificate headers
 */
function apim_profile_update_8022() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('show_mtls_header', TRUE)
    ->save();
}

/**
 * Sets the feedback form recipient to the site email if not yet set
 */
function apim_profile_update_8023() {
  if (!\Drupal::config('contact.form.feedback')->isNew()) {
    $updated = FALSE;
    $recipients = \Drupal::config('contact.form.feedback')->get('recipients');
    $siteEmail = \Drupal::config('system.site')->get('mail');
    foreach ($recipients as $key => $recipient) {
      if ($recipient === "admin@example.com") {
        $recipients[$key] = $siteEmail;
        $updated = TRUE;
      }
    }
    if ($updated) {
      \Drupal::service('config.factory')->getEditable('contact.form.feedback')
        ->set('recipients', $recipients)
        ->save();
    }
  }
}

function apim_profile_update_8024() {
  // force removal of the php module
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('php')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->uninstall(['php']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * Add back in missing apim_profile translations
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function apim_profile_update_8025() {

  // update block contents on homepage
  // welcome page is managed by page_manager
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('page_manager')) {
    $page = \Drupal::entityTypeManager()->getStorage('page')->load('welcome');
    if ($page !== NULL) {
      $variants_array = $page->getVariants();
      if ($variants_array !== NULL && !empty($variants_array)) {
        $variant = reset($variants_array);
        $content = $variant->calculateDependencies()['content'];
        $block_content_storage = \Drupal::entityTypeManager()->getStorage('block_content');
        module_load_include('inc', 'apim_profile', 'apim_profile.homepage');

        foreach ($content as $block_content_id) {
          // id = block_content:basic:0b7e88e2-549b-4497-8a77-41a3c2885786
          // we just need the uuid from this.
          $raw_block_content_id = explode(':', $block_content_id)[2];

          $block_content_array = $block_content_storage->loadByProperties(['uuid' => $raw_block_content_id]);
          $block_content = reset($block_content_array);

          if ($block_content !== NULL && $block_content !== FALSE) {
            // we have to match on the label of the block as we don't have anything else
            $label = $block_content->get('info')->value;
            switch ($label) {
              case 'Get Help [en]':
                add_get_help_block_content_translations($block_content);
                break;
              case 'Getting Started [en]':
                add_getting_started_block_content_translations($block_content);
                break;
              case 'Welcome Banner [en]':
                add_welcome_block_translations($block_content);
                break;
            }
          }
        }
      }
    }
  }

  // update node translations (FAQ, privacy, t&cs)
  module_load_include('inc', 'apim_profile', 'apim_profile.import_nodes');

  $terms_node = \Drupal::entityTypeManager()->getStorage('node')->load(1);
  if ($terms_node !== NULL && $terms_node->getTitle() === 'Terms of use' && $terms_node->getType() === 'page') {
    add_terms_node_translations($terms_node);
  }

  $privacy_node = \Drupal::entityTypeManager()->getStorage('node')->load(2);
  if ($privacy_node !== NULL && $privacy_node->getTitle() === 'Privacy Policy' && $privacy_node->getType() === 'page') {
    add_privacy_node_translations($privacy_node);
  }

  $api_faq_node = \Drupal::entityTypeManager()->getStorage('node')->load(3);
  if ($api_faq_node !== NULL && $api_faq_node->getTitle() === 'Using our APIs' && $api_faq_node->getType() === 'faq') {
    add_api_faq_node_translations($api_faq_node);
  }

  $app_faq_node = \Drupal::entityTypeManager()->getStorage('node')->load(4);
  if ($app_faq_node !== NULL && $app_faq_node->getTitle() === 'Apps' && $app_faq_node->getType() === 'faq') {
    add_app_faq_node_translations($app_faq_node);
  }

  // menu links
  $menu_links = \Drupal::entityTypeManager()->getStorage('menu_link_content')->loadMultiple();
  foreach ($menu_links as $link) {
    $title = $link->getTitle();
    switch ($title) {
      case 'API Products':
        add_apis_link_translations($link);
        break;
      case 'Apps':
        add_apps_link_translations($link);
        break;
      case 'Forums':
        add_forum_link_translations($link);
        break;
      case 'Sign in':
        add_sign_in_link_translations($link);
        break;
      case 'Create account':
        add_create_account_link_translations($link);
        break;
      case 'Contact':
        add_contact_menu_translations($link);
        break;
      case 'Terms and Conditions':
        add_terms_menu_translations($link);
        break;
      case 'Privacy Policy':
        add_privacy_menu_translations($link);
        break;
    }
  }

}

/**
 * Remove node_type_count and use apic_type_count modules
 */
function apim_profile_update_8026() {
  $module_installer = \Drupal::service('module_installer');
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('node_type_count')) {
    try {
      // try deleting the module if we can
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
      $module_installer->uninstall(['node_type_count']);
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
    } catch (\Exception $e) {
      // if deleting the module fails (and it might since we've deleted the files), then just purge it from the db
      \Drupal::database()->delete('key_value')
        ->condition('collection', 'system.schema')
        ->condition('name', ['node_type_count'], 'IN')
        ->execute();
    }

  }
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
  $module_installer->install(['apic_type_count']);
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
}

/**
 * If the rules module is not in use then disable it
 */
function apim_profile_update_8027() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('rules')) {
    // if there are still rules then leave them, else disable the modules
    $query = \Drupal::entityQuery('rules_reaction_rule');
    $result = $query->count()->execute();
    if (!isset($result) || (int) $result < 1) {
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
      $module_installer = \Drupal::service('module_installer');
      $module_installer->uninstall(['rules', 'rules_http_client']);
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
    }
  }
}

/**
 * Enable our new payment methods module
 */
function apim_profile_update_8029() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('ibm_create_payment_method')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['ibm_create_payment_method']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * Remove the bee SVG from the front page if its still there
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8030() {
  $languages = \Drupal::languageManager()->getLanguages();
  $newString = '<div class="welcomebanner">';
  // match on 2 random parts of the bee SVG
  $oldString1 = '<path d="M12.922,58.197c-1.703,0.707-3.305,1.746-4.689,3.131c-1.387,1.387-2.424,2.984-3.131,4.688';
  $oldString2 = '<path d="M54,42c4.418,0,8-3.58,8-8s-3.582-8-8-8s-8,3.58-8,8S49.582,42,54,42z M54,30c2.206,0,4,1.795,4,4s-1.794,4-4,4';
  $query = \Drupal::entityQuery('block_content');
  $nids = $query->execute();
  if (isset($nids) && !empty($nids)) {
    foreach ($nids as $blockid) {
      $block = BlockContent::load($blockid);
      if ($block !== NULL) {
        foreach ($languages as $language) {
          $langcode = $language->getId();
          if (!$block->hasTranslation($langcode)) {
            \Drupal::logger('apim_profile')->info('Skipping translation update for block: @langcode', [
              '@langcode' => $langcode,
            ]);
            continue;
          }
          $translation = $block->getTranslation($langcode);
          $bodyValue = $translation->body->value;
          if (strpos($bodyValue, $oldString1) !== FALSE && strpos($bodyValue, $oldString2) !== FALSE) {
            // remove everything before <div class="welcomebannertext"> and replace it with $newString
            $newBody = $newString . strstr($bodyValue, '<div class="welcomebannertext">');
            $translation->set('body', [
              'value' => $newBody,
              'format' => 'full_html',
            ]);
            $translation->save();
          }
        }
      }
    }
  }
}

/**
 * make ckeditor save files in public not private
 */
function apim_profile_update_8101() {
  $config_factory = \Drupal::configFactory();
  $editor = $config_factory->getEditable('editor.editor.full_html');
  $image_upload = $editor->get('image_upload');
  $image_upload['scheme'] = 'public';
  $editor->set('image_upload', $image_upload);
  $third_party_settings = $editor->get('third_party_settings');
  if (isset($third_party_settings['editor_file'])) {
    $third_party_settings['editor_file']['scheme'] = 'public';
    $editor->set('third_party_settings', $third_party_settings);
  }
  $editor->save();

  $basic_editor = $config_factory->getEditable('editor.editor.basic_html');
  $basic_image_upload = $basic_editor->get('image_upload');
  $basic_image_upload['scheme'] = 'public';
  $basic_editor->set('image_upload', $basic_image_upload);
  $basic_third_party_settings = $basic_editor->get('third_party_settings');
  if (isset($basic_third_party_settings['editor_file'])) {
    $basic_third_party_settings['editor_file']['scheme'] = 'public';
    $basic_editor->set('third_party_settings', $basic_third_party_settings);
  }
  $basic_editor->save();
}

/**
 * enable extlink module
 */
function apim_profile_update_8102() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('extlink')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['extlink']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
  \Drupal::service('config.factory')
    ->getEditable('extlink.settings')
    ->set('extlink_use_external_js_file', FALSE)
    ->set('extlink_target', TRUE)
    ->set('extlink_target_no_override', TRUE)
    ->set('extlink_nofollow', TRUE)
    ->set('extlink_noreferrer', TRUE)
    ->set('extlink_follow_no_override', FALSE)
    ->set('extlink_subdomains', TRUE)
    ->set('extlink_alert', FALSE)
    ->set('extlink_alert_text', 'This link will take you to an external web site. We are not responsible for their content.')
    ->set('extlink_exclude', '')
    ->set('extlink_include', '')
    ->set('extlink_class', 'ext')
    ->set('extlink_label', '(link is external)')
    ->set('extlink_img_class', FALSE)
    ->set('extlink_css_exclude', '')
    ->set('extlink_css_explicit', '')
    ->set('extlink_mailto_class', 'mailto')
    ->set('extlink_mailto_label', '(link sends email)')
    ->set('extlink_use_font_awesome', FALSE)
    ->set('extlink_font_awesome_classes', [
      'links' => 'fa fa-external-link',
      'mailto' => 'fa fa-envelope-o',
    ])
    ->set('extlink_icon_placement', '0')
    ->save();
}

/**
 * Change the default number of tiles for the featured content block to be 6
 * and update the getting help SVGs
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function apim_profile_update_8103() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('page_manager')) {
    $page = \Drupal::entityTypeManager()->getStorage('page')->load('welcome');
    if ($page !== NULL) {
      $variants_array = $page->getVariants();
      if ($variants_array !== NULL && !empty($variants_array)) {
        $variant = reset($variants_array);
        $variant_settings = $variant->get('variant_settings');

        foreach ($variant_settings['blocks'] as $block_id => $block_settings) {
          if (isset($block_settings['provider']) && $block_settings['provider'] === 'featuredcontent') {
            if (isset($block_settings['numberOfTiles']) && $block_settings['numberOfTiles'] === 3) {
              $variant_settings['blocks'][$block_id]['numberOfTiles'] = 6;
              $variant->set('variant_settings', $variant_settings);
              $variant->save();
            }
          }
          elseif (isset($block_settings['provider']) && $block_settings['provider'] === 'socialblock') {
            if (isset($block_settings['twitterSearchParameter']) && $block_settings['twitterSearchParameter'] === 'IBMintegration') {
              $variant_settings['blocks'][$block_id]['twitterSearchParameter'] = 'ibmcloud';
              $variant->set('variant_settings', $variant_settings);
              $variant->save();
            }
          }
        }
        // update the get help SVGs
        $content = $variant->calculateDependencies()['content'];
        $block_content_storage = \Drupal::entityTypeManager()->getStorage('block_content');
        $languages = \Drupal::languageManager()->getLanguages();
        $oldString = '<path  d="M16,2C8.269,2,2,8.269,2,16s6.269,14,14,14c7.731,0,14-6.269,14-14S23.731,2,16,2z M16,28C9.383,28,4,22.617,4,16';
        foreach ($content as $block_content_id) {
          // id = block_content:basic:0b7e88e2-549b-4497-8a77-41a3c2885786
          // we just need the uuid from this.
          $raw_block_content_id = explode(':', $block_content_id)[2];
          $block_content_array = $block_content_storage->loadByProperties(['uuid' => $raw_block_content_id]);
          $block_content = reset($block_content_array);
          if ($block_content !== NULL) {
            // we have to match on the label of the block as we don't have anything else
            $label = $block_content->get('info')->value;
            if ($label === 'Get Help [en]') {
              foreach ($languages as $language) {
                $langcode = $language->getId();
                if (!$block_content->hasTranslation($langcode)) {
                  \Drupal::logger('apim_profile')->info('Skipping translation update for block: @langcode', [
                    '@langcode' => $langcode,
                  ]);
                  continue;
                }
                $translation = $block_content->getTranslation($langcode);
                $body = $translation->get('body')->value;
                if (strpos($body, $oldString) !== FALSE) {
                  $search0 = '<?xml version="1.0" encoding="iso-8859-1"?>';
                  $replace0 = '';
                  $body = str_replace($search0, $replace0, $body);
                  $search1 = 'viewBox="0 0 32 32" width="24" height="24" style="enable-background:new 0 0 32 32;" xml:space="preserve">';
                  $replace1 = 'viewBox="0 0 16 16" width="16" height="16" fill="currentColor" xml:space="preserve">';
                  $body = str_replace($search1, $replace1, $body);
                  // string below contains a tab character
                  $search2 = '<polygon  points="15.293,10.707 19.586,15 8,15 8,17 19.586,17 15.293,21.293 16.707,22.707 23.414,16 16.707,9.293    "/>';
                  $replace2 = '';
                  $body = str_replace($search2, $replace2, $body);
                  $search3 = '<path  d="M16,2C8.269,2,2,8.269,2,16s6.269,14,14,14c7.731,0,14-6.269,14-14S23.731,2,16,2z M16,28C9.383,28,4,22.617,4,16';
                  $replace3 = '<path  d="M9.3 3.7L13.1 7.5 1 7.5 1 8.5 13.1 8.5 9.3 12.3 10 13 15 8 10 3z"/>';
                  $body = str_replace($search3, $replace3, $body);
                  $search4 = 'S9.383,4,16,4c6.617,0,12,5.383,12,12S22.617,28,16,28z"/>';
                  $replace4 = '';
                  $body = str_replace($search4, $replace4, $body);
                  $translation->set('body', [
                    'value' => $body,
                    'format' => 'full_html',
                  ]);
                  $translation->save();
                }
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Update content for the getting started block and delete the go ahead block
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8104() {
  // update block contents on homepage
  // welcome page is managed by page_manager
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('page_manager')) {
    $page = \Drupal::entityTypeManager()->getStorage('page')->load('welcome');
    if ($page !== NULL) {
      $variants_array = $page->getVariants();
      if ($variants_array !== NULL && !empty($variants_array)) {
        $variant = reset($variants_array);
        $content = $variant->calculateDependencies()['content'];
        $block_content_storage = \Drupal::entityTypeManager()->getStorage('block_content');
        module_load_include('inc', 'apim_profile', 'apim_profile.homepage');

        foreach ($content as $block_content_id) {
          // id = block_content:basic:0b7e88e2-549b-4497-8a77-41a3c2885786
          // we just need the uuid from this.
          $raw_block_content_id = explode(':', $block_content_id)[2];

          $block_content_array = $block_content_storage->loadByProperties(['uuid' => $raw_block_content_id]);
          $block_content = reset($block_content_array);

          if ($block_content !== NULL && $block_content !== FALSE) {
            // we have to match on the label of the block as we don't have anything else
            $label = $block_content->get('info')->value;
            switch ($label) {
              case 'Getting Started [en]':
                add_getting_started_block_content_translations($block_content);
                $translation = $block_content->getTranslation('en');
                $translation->set('body', [
                  'value' => get_localized_gsb_content('en'),
                  'format' => 'full_html',
                ]);
                $translation->save();
                break;
              case 'Go Ahead [en]':
                $go_ahead_block_id = $raw_block_content_id;
                $block_content->delete();
                break;
            }
          }
        }

        // remove go ahead block from the page
        $variant_settings = $variant->get('variant_settings');
        if (isset($go_ahead_block_id)) {
          foreach ($variant_settings['blocks'] as $block_id => $block_settings) {
            if (isset($block_settings['id']) && $block_settings['id'] === 'block_content:' . $go_ahead_block_id) {
              unset($variant_settings['blocks'][$block_id]);
              $variant->set('variant_settings', $variant_settings);
              $variant->save();
            }
          }
        }
      }
    }
  }

  // update default ibm integration twitter ID to new cloud one
  $block = Block::load('socialmedialinks');
  if ($block !== NULL) {
    $settings = $block->get('settings');
    if (isset($settings['platforms']['twitter']['value']) && $settings['platforms']['twitter']['value'] === 'IBMintegration') {
      $settings['platforms']['twitter']['value'] = 'ibmcloud';
      $block->set('settings', $settings);
      $block->save();
    }
  }
}

/**
 * Update blog content type to remove links from teaser view
 * And create Card view modes for all content types
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8105() {
  $storage = \Drupal::entityTypeManager()->getStorage('entity_view_display');
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('blog')) {
    $viewDisplay = $storage->load('node.blog.teaser');
    if ($viewDisplay !== NULL) {
      $values = $viewDisplay->getComponent('links');
      if ($values !== NULL) {
        $viewDisplay->removeComponent('links');
        $viewDisplay->save();
      }
    }
  }
  // create article card view mode
  $viewDisplay = $storage->load('node.article.card');
  if ($viewDisplay === NULL) {
    $newDisplay = $storage->create([
      'targetEntityType' => 'node',
      'bundle' => 'article',
      'mode' => 'card',
      'status' => TRUE,
    ]);
    if ($newDisplay !== NULL) {
      $newDisplay->setComponent('body', [
        'weight' => 1,
        'label' => 'hidden',
        'settings' => ['trim_length' => 200],
        'region' => 'content',
        'type' => 'text_summary_or_trimmed',
      ]);
      $newDisplay->setComponent('field_image', [
        'weight' => 0,
        'label' => 'hidden',
        'settings' => ['image_style' => 'medium', 'image_link' => ''],
        'region' => 'content',
        'type' => 'image',
      ]);
      $newDisplay->setComponent('field_tags', [
        'weight' => 2,
        'label' => 'above',
        'settings' => ['link' => TRUE],
        'region' => 'content',
        'type' => 'entity_reference_label',
      ]);
      $newDisplay->save();
    }
  }

  // create blog post card view mode
  $viewDisplay = $storage->load('node.blog_post.card');
  if ($viewDisplay === NULL) {
    $newDisplay = $storage->create([
      'targetEntityType' => 'node',
      'bundle' => 'blog_post',
      'mode' => 'card',
      'status' => TRUE,
    ]);
    if ($newDisplay !== NULL) {
      $newDisplay->setComponent('body', [
        'weight' => 1,
        'label' => 'hidden',
        'settings' => ['trim_length' => 200],
        'region' => 'content',
        'type' => 'text_summary_or_trimmed',
      ]);
      $newDisplay->save();
    }
  }

  // create faq card view mode
  $viewDisplay = $storage->load('node.faq.card');
  if ($viewDisplay === NULL) {
    $newDisplay = $storage->create([
      'targetEntityType' => 'node',
      'bundle' => 'faq',
      'mode' => 'card',
      'status' => TRUE,
    ]);
    if ($newDisplay !== NULL) {
      $newDisplay->setComponent('faqs', [
        'weight' => 1,
        'label' => 'hidden',
        'settings' => [
          'active' => NULL,
          'heightStyle' => 'auto',
          'collapsible' => TRUE,
          'event' => 'click',
          'animate' => [
            'duration' => 200,
            'easing' => 'linear',
          ],
        ],
        'region' => 'content',
        'type' => 'faqfield_accordion',
      ]);
      $newDisplay->setComponent('links', [
        'weight' => 2,
        'region' => 'content',
      ]);
      $newDisplay->save();
    }
  }

  // create forum post card view mode
  if ($moduleHandler->moduleExists('forum')) {
    $viewDisplay = $storage->load('node.forum.card');
    if ($viewDisplay === NULL) {
      $newDisplay = $storage->create([
        'targetEntityType' => 'node',
        'bundle' => 'forum',
        'mode' => 'card',
        'status' => TRUE,
      ]);
      if ($newDisplay !== NULL) {
        $newDisplay->setComponent('body', [
          'weight' => 1,
          'label' => 'hidden',
          'settings' => ['trim_length' => 200],
          'region' => 'content',
          'type' => 'text_summary_or_trimmed',
        ]);
        $newDisplay->setComponent('taxonomy_forums', [
          'weight' => 2,
          'label' => 'hidden',
          'settings' => ['link' => TRUE],
          'region' => 'content',
          'type' => 'entity_reference_label',
        ]);
        $newDisplay->save();
      }
    }
  }

  // create page card view mode
  $viewDisplay = $storage->load('node.page.card');
  if ($viewDisplay === NULL) {
    $newDisplay = $storage->create([
      'targetEntityType' => 'node',
      'bundle' => 'page',
      'mode' => 'card',
      'status' => TRUE,
    ]);
    if ($newDisplay !== NULL) {
      $newDisplay->setComponent('body', [
        'weight' => 1,
        'label' => 'hidden',
        'settings' => ['trim_length' => 200],
        'region' => 'content',
        'type' => 'text_summary_or_trimmed',
      ]);
      $newDisplay->setComponent('addtoany', [
        'weight' => 2,
        'label' => 'hidden',
        'region' => 'content',
      ]);
      $newDisplay->save();
    }
  }

  // update search page to use card view
  $view = Views::getView('search_content');
  if ($view !== NULL) {
    $access = $view->getDisplay()->getOption('access');
    if ($access['type'] !== 'perm') {
      $access['type'] = 'perm';
      $access['options'] = ['perm' => 'access content'];
      $view->getDisplay()->setOption('access', $access);
      $view->save();
    }
    $style = $view->getDisplay()->getOption('style');
    if ($style['type'] !== 'masonry') {
      $style['type'] = 'masonry';
      $style['options'] = [
        'row_class' => '',
        'default_row_class' => TRUE,
        'uses_fields' => FALSE,
        'layoutColumnWidth' => '',
        'layoutColumnWidthUnit' => 'px',
        'gutterWidth' => '2',
        'stampSelector' => '',
        'isLayoutResizable' => 1,
        'isLayoutAnimated' => 1,
        'layoutAnimationDuration' => '500',
        'isLayoutFitsWidth' => 0,
        'isLayoutRtlMode' => 0,
        'isLayoutImagesLoadedFirst' => 1,
        'isItemsPositionInPercent' => 0,
      ];
      $view->getDisplay()->setOption('style', $style);
      $view->save();
    }
    $row = $view->getDisplay()->getOption('row');
    $row['options']['view_modes']['entity:node'] = [
      'api: card',
      'application' => 'card',
      'article' => 'card',
      'blog_post' => 'card',
      'consumerorg' => 'card',
      'faq' => 'card',
      'forum' => 'card',
      'page' => 'card',
      'product' => 'card',
    ];
    $view->getDisplay()->setOption('row', $row);
    $view->save();
  }

  // create forum sidebar block
  module_load_include('inc', 'apim_profile', 'apim_profile.homepage');
  apim_profile_create_forum_block();
}

/**
 * enable clipboardjs module
 */
function apim_profile_update_8106() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('clipboardjs')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['clipboardjs']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8107() {
  // add subscription wizard title block
  $block = Block::load('subwizardtitle');
  if ($block === NULL) {
    $values = [
      'id' => 'subwizardtitle',
      'plugin' => 'ibm_apim_wizard_title',
      'provider' => NULL,
      'region' => 'highlighted',
      'settings' => [
        'id' => 'ibm_apim_wizard_title',
        'label' => 'Subscription Wizard Title',
        'provider' => 'ibm_apim',
        'label_display' => '0',
      ],
      'theme' => 'connect_theme',
      'visibility' => [],
      'weight' => 0,
    ];
    $block = Block::create($values);
    $block->save();
  }

  // ensure the no content blocks are in the disabled region but enabled
  // the connect_theme wont have been enabled when ibm_apim was installed
  $block = Block::load('noappsblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }
  $block = Block::load('noapisblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }
  $block = Block::load('noproductsblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }

  // no content blocks
  $path = __DIR__;
  require_once $path . '/../../modules/ibm_apim/ibm_apim.emptycontent.inc';
  ibm_apim_update_no_content_blocks();
}

function apim_profile_update_8108() {
  $fieldConfig = FieldConfig::loadByName('node', 'forum', 'comment_forum');
  if ($fieldConfig !== NULL) {
    $settings = $fieldConfig->get('settings');
    if ($settings['preview'] !== 0) {
      $settings['preview'] = 0;
      $fieldConfig->set('settings', $settings);
      $fieldConfig->save();
    }
  }
  $fieldConfig = FieldConfig::loadByName('node', 'article', 'comment');
  if ($fieldConfig !== NULL) {
    $settings = $fieldConfig->get('settings');
    if ($settings['preview'] !== 0) {
      $settings['preview'] = 0;
      $fieldConfig->set('settings', $settings);
      $fieldConfig->save();
    }
  }
  $fieldConfig = FieldConfig::loadByName('node', 'blog_post', 'field_blog_comments');
  if ($fieldConfig !== NULL) {
    $settings = $fieldConfig->get('settings');
    if ($settings['preview'] !== 0) {
      $settings['preview'] = 0;
      $fieldConfig->set('settings', $settings);
      $fieldConfig->save();
    }
  }
}

/**
 * disable book module
 */
function apim_profile_update_8109() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('book')) {
    $module_installer = \Drupal::service('module_installer');
    try {
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
      $module_installer->uninstall(['book']);
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
    } catch (\Exception $e) {
      // do nothing, likely means another module depends on this module
    }
  }
  if (!$moduleHandler->moduleExists('securitytxt')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['securitytxt']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * enable view_password module
 */
function apim_profile_update_8110() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('view_password')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['view_password']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
  \Drupal::configFactory()
    ->getEditable('view_password.settings')
    ->set('form_ids', 'user_login_form,user_register_form,apic_change_pwd_form,display_app_credentials_form,apic_resetpw')
    ->save(TRUE);
}

/**
 * Set a better default maintenance mode message
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8111() {
  \Drupal::service('config.factory')
    ->getEditable('system.maintenance')
    ->set('message', '<h3>Sorry! Our site is currently under maintenance. We should be back shortly.</h3>')
    ->save(TRUE);

  // enable AJAX history for search content view so that query params work
  $view = Views::getView('search_content');
  if ($view !== NULL) {
    $view->setDisplay('page_1');
    $display_extenders = $view->getDisplay()->getOption('display_extenders');
    if (empty($display_extenders['ajax_history']) || !isset($display_extenders['ajax_history']['enable_history']) || $display_extenders['ajax_history']['enable_history'] !== TRUE) {
      $display_extenders['ajax_history'] = ['enable_history' => TRUE];
      $view->getDisplay()->setOption('display_extenders', $display_extenders);
      $view->save();
    }
  }

  \Drupal::configFactory()
    ->getEditable('search404.settings')
    ->set('search404_do_custom_search', TRUE)
    ->set('search404_custom_search_path', 'search/content?keys=@keys')
    ->save(TRUE);

  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('drushadmin')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['drushadmin']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }

  // sort out field order on blog posts
  $viewDisplay = \Drupal::entityTypeManager()->getStorage('entity_view_display')->load('node.blog_post.default');
  if ($viewDisplay !== NULL) {
    $component = $viewDisplay->getComponent('body');
    if (isset($component)) {
      $component['weight'] = 0;
      $viewDisplay->setComponent('body', $component);
    }
    $component = $viewDisplay->getComponent('field_blog_comments');
    if (isset($component)) {
      $component['weight'] = 3;
      $viewDisplay->setComponent('field_blog_comments', $component);
    }
    $component = $viewDisplay->getComponent('field_blog_tags');
    if (isset($component)) {
      $component['weight'] = 2;
      $component['type'] = 'cshs_full_hierarchy';
      $component['settings'] = ['linked' => '1', 'separator' => ' » ', 'reverse' => 0];
      $viewDisplay->setComponent('field_blog_tags', $component);
    }
    $component = $viewDisplay->getComponent('links');
    if (isset($component)) {
      $component['weight'] = 1;
      $viewDisplay->setComponent('links', $component);
    }
    $viewDisplay->save();
  }

  // put breadcrumb block on forum pages
  $block = Block::load('connect_theme_breadcrumbs');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'content');
    $block->set('weight', 4);
    $block->set('status', TRUE);
    $block->set('visibility', ['request_path' => ['id' => 'request_path', 'pages' => '/forum*', 'negate' => FALSE]]);
    $block->save();
  }
}

/**
 * make sure warmer is not still referring to book module
 */
function apim_profile_update_8112() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('warmer')) {
    $entityTypes = \Drupal::config('warmer.settings')->get('warmers.entity.entity_types');
    if (in_array('node:book', array_values($entityTypes), TRUE)) {
      unset($entityTypes['node:book']);
    }
    \Drupal::configFactory()->getEditable('warmer.settings')->set('warmers.entity.entity_types', $entityTypes)->save();
  }
}

/**
 * Create no content blogs block
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8113() {
  // ensure the no content blocks are in the disabled region but enabled
  // the connect_theme wont have been enabled when ibm_apim was installed
  $block = Block::load('noblogsblock');
  if ($block !== NULL) {
    $block->set('theme', 'connect_theme');
    $block->set('region', 'disabled');
    $block->set('status', TRUE);
    $block->save();
  }

  // no content blocks
  $path = __DIR__;
  require_once $path . '/../../modules/ibm_apim/ibm_apim.emptycontent.inc';
  ibm_apim_update_blogs_no_content_blocks();
}

/**
 * switch flood_control for flood_control module
 */
function apim_profile_update_8114() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('flood_control')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['flood_control']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
  if ($moduleHandler->moduleExists('flood_unblock')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->uninstall(['flood_unblock']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * remove link to contact page since that wont work in maintenance mode!
 */
function apim_profile_update_8116() {
  \Drupal::service('config.factory')
    ->getEditable('system.maintenance')
    ->set('message', '<h3>Sorry! Our site is currently under maintenance. We should be back shortly.</h3>')
    ->save(TRUE);
}

/**
 * work around bug in image_captcha upgrade that leaves the fonts not set
 */
function apim_profile_update_8117() {
  $image_captcha_fonts_preview_map_cache = \Drupal::config('image_captcha.settings')->get('image_captcha_fonts_preview_map_cache');
  if (!isset($image_captcha_fonts_preview_map_cache) || empty($image_captcha_fonts_preview_map_cache)) {
    $image_captcha_fonts_preview_map_cache = [
      'ced5d84285b76ebcaa40beb0b5c0efc54aca6a6d347da73638673906d5cda331' => [
        'uri' => 'modules/captcha/image_captcha/fonts/Tuffy/Tuffy_Bold.ttf',
        'filename' => 'Tuffy_Bold.ttf',
        'name' => 'Tuffy_Bold',
      ],
      '3438abc85ac58eaab01cd741b1c3f9bb5dd3b9be3c079b1a7851884135608b2f' => [
        'uri' => 'modules/captcha/image_captcha/fonts/Tuffy/Tuffy.ttf',
        'filename' => 'Tuffy.ttf',
        'name' => 'Tuffy',
      ],
      '984e950858126332ff4905c76efeb723ee1aa185c07f80537ce57c26be1cc0c5' => [
        'uri' => 'modules/captcha/image_captcha/fonts/Tesox/tesox.ttf',
        'filename' => 'tesox.ttf',
        'name' => 'tesox',
      ],
    ];
    $image_captcha_fonts = [
      '3438abc85ac58eaab01cd741b1c3f9bb5dd3b9be3c079b1a7851884135608b2f' => '3438abc85ac58eaab01cd741b1c3f9bb5dd3b9be3c079b1a7851884135608b2f',
      '984e950858126332ff4905c76efeb723ee1aa185c07f80537ce57c26be1cc0c5' => '984e950858126332ff4905c76efeb723ee1aa185c07f80537ce57c26be1cc0c5',
    ];
    \Drupal::service('config.factory')
      ->getEditable('image_captcha.settings')
      ->set('image_captcha_fonts_preview_map_cache', $image_captcha_fonts_preview_map_cache)
      ->set('image_captcha_fonts', $image_captcha_fonts)
      ->save(TRUE);
  }
}

/**
 * Create AsyncAPI docs
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8201() {
  $path = __DIR__;
  require_once $path . '/apim_profile.import_nodes.inc';
  apim_profile_create_asyncapi_pages();
}

/**
 * Search results page needs to use current language
 */
function apim_profile_update_8202() {
  // update search page to use card view
  $view = Views::getView('search_content');
  if ($view !== NULL) {
    $filters = $view->getDisplay()->getOption('filters');
    if (!isset($filters['search_api_language'])) {
      $filters['search_api_language'] = [
        'id' => 'search_api_language',
        'table' => 'search_api_index_default_index',
        'field' => 'search_api_language',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'operator' => 'in',
        'value' => [
          '***LANGUAGE_language_interface***' => '***LANGUAGE_language_interface***',
          'zxx' => 'zxx',
          'und' => 'und',
        ],
        'group' => 1,
        'exposed' => FALSE,
        'expose' => [
          'operator_id' => '',
          'label' => '',
          'description' => '',
          'use_operator' => FALSE,
          'operator' => '',
          'operator_limit_selection' => FALSE,
          'operator_list' => [],
          'identifier' => '',
          'required' => FALSE,
          'remember' => FALSE,
          'multiple' => FALSE,
          'remember_roles' => [
            'authenticated' => 'authenticated',
          ],
          'reduce' => FALSE,
        ],
        'is_grouped' => FALSE,
        'group_info' => [
          'label' => '',
          'description' => '',
          'identifier' => '',
          'optional' => TRUE,
          'widget' => 'select',
          'multiple' => FALSE,
          'remember' => FALSE,
          'default_group' => 'All',
          'default_group_multiple' => [],
          'group_items' => [],
        ],
        'plugin_id' => 'search_api_language',
      ];
      $view->getDisplay()->setOption('filters', $filters);
      $view->save();
    }
  }
}

/**
 * enable ibm_event_log module
 */
function apim_profile_update_8203() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('ibm_event_log')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['ibm_event_log']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function apim_profile_update_8204() {
  $block = Block::load('apiconceptsblock');
  if ($block === NULL) {
    $values = [
      'id' => 'apiconceptsblock',
      'plugin' => 'ibm_apim_concepts',
      'provider' => NULL,
      'region' => 'disabled',
      'settings' => [
        'id' => 'ibm_apim_concepts',
        'label' => 'Concepts overview',
        'provider' => 'ibm_apim',
        'label_display' => '0',
      ],
      'theme' => 'connect_theme',
      'visibility' => [],
      'weight' => 0,
    ];
    $block = Block::create($values);
    $block->save();
  }
  // update faq page to remove filter
  $view = Views::getView('faqs');
  if ($view !== NULL) {
    $exposed_form = $view->getDisplay()->getOption('exposed_form');
    if ($exposed_form['options']['reset_button'] === TRUE) {
      $exposed_form['options']['reset_button'] = FALSE;
      $view->getDisplay()->setOption('exposed_form', $exposed_form);
      $view->save();
    }
    $pager = $view->getDisplay()->getOption('pager');
    if ($pager['options']['expose']['items_per_page'] === TRUE) {
      $pager['options']['expose']['items_per_page'] = FALSE;
      $view->getDisplay()->setOption('pager', $pager);
      $view->save();
    }
    $filter = $view->getDisplay()->getOption('filters');
    if (isset($filter['faqs_question'])) {
      unset($filter['faqs_question']);
      $view->getDisplay()->setOption('filters', $filter);
      $view->save();
    }
  }
}

/**
 * Update FAQ and Getting Started content after
 * change to subscription and client credentials semantics
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function apim_profile_update_8205() {

  // update block contents on homepage
  // welcome page is managed by page_manager
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('page_manager')) {
    $page = \Drupal::entityTypeManager()->getStorage('page')->load('welcome');
    if ($page !== NULL) {
      $variants_array = $page->getVariants();
      if ($variants_array !== NULL && !empty($variants_array)) {
        $variant = reset($variants_array);
        $content = $variant->calculateDependencies()['content'];
        $block_content_storage = \Drupal::entityTypeManager()->getStorage('block_content');
        module_load_include('inc', 'apim_profile', 'apim_profile.homepage');

        foreach ($content as $block_content_id) {
          // id = block_content:basic:0b7e88e2-549b-4497-8a77-41a3c2885786
          // we just need the uuid from this.
          $raw_block_content_id = explode(':', $block_content_id)[2];

          $block_content_array = $block_content_storage->loadByProperties(['uuid' => $raw_block_content_id]);
          $block_content = reset($block_content_array);

          if ($block_content !== NULL && $block_content !== FALSE) {
            // we have to match on the label of the block as we don't have anything else
            $label = $block_content->get('info')->value;
            switch ($label) {
              case 'Getting Started [en]':
                $block_content->set('body', [
                  'value' => get_localized_gsb_content('en'),
                  'format' => 'full_html',
                ]);
                $block_content->save();
                add_getting_started_block_content_translations($block_content);
                break;
            }
          }

        }
      }
    }
  }
  module_load_include('inc', 'apim_profile', 'apim_profile.import_nodes');

  $api_faq_node_ids = \Drupal::entityQuery('node')
    ->condition('type', 'faq')
    ->condition('title', 'Using our APIs')
    ->execute();

  if (count($api_faq_node_ids) === 1) {
    $api_faq_node = \Drupal::entityTypeManager()->getStorage('node')->load(array_pop($api_faq_node_ids));
    if ($api_faq_node !== NULL) {
      $api_faq_node->set('faqs', get_localized_apis_content('en'));
      $api_faq_node->save();
      add_api_faq_node_translations($api_faq_node);
    }
  }
  else {
    \Drupal::logger('apim_profile')
      ->warning('Expected 1 node for FAQ "Using our APIs" but there were @count. Will not update the content.', ['@count' => count($api_faq_node_ids)]);
  }

  $app_faq_node_ids = \Drupal::entityQuery('node')
    ->condition('type', 'faq')
    ->condition('title', 'Apps')
    ->execute();

  if (count($app_faq_node_ids) === 1) {
    $app_faq_node = \Drupal::entityTypeManager()->getStorage('node')->load(array_pop($app_faq_node_ids));
    if ($app_faq_node !== NULL) {
      $app_faq_node->set('faqs', get_localized_apps_content('en'));
      $app_faq_node->save();
      add_app_faq_node_translations($app_faq_node);
    }
  }
  else {
    \Drupal::logger('apim_profile')
      ->warning('Expected 1 node for FAQ "Apps" but there were @count. Will not update the content.', ['@count' => count($app_faq_node_ids)]);
  }

}

/**
 * Enable captcha on password reset page if not already there
 */
function apim_profile_update_8206() {
  try {
    _apim_profile_enable_captcha_on_form('user_pass');
  } catch (Throwable $e) {
    // just ignore it
  }
}

/**
 * Remove blocklist variable
 */
function apim_profile_update_8208() {
  $data = \Drupal::service('config.factory')->get('ibm_apim.settings')->get();
  unset($data['module_blocklist']);

  if (!empty($data)) {
    \Drupal::service('config.factory')
      ->getEditable('ibm_apim.settings')
      ->setData($data)
      ->save();
  }
}

/**
 * disable bootstrap tooltips
 */
function apim_profile_update_8209() {
  \Drupal::service('config.factory')
    ->getEditable('connect_theme.settings')
    ->set('tooltip_enabled', 0)
    ->save();
}

/**
 * Need to make sure devel_settings are set
 */
function apim_profile_update_8210() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.devel_settings')
    ->set('entry_exit_trace', FALSE)
    ->set('apim_rest_trace', FALSE)
    ->set('acl_debug', FALSE)
    ->set('webhook_debug', FALSE)->save();

  // remove the devel settings from the config array
  $data = \Drupal::service('config.factory')->get('ibm_apim.settings')->get();
  unset($data['entry_exit_trace'], $data['apim_rest_trace'], $data['acl_debug'], $data['webhook_debug']);

  if (!empty($data)) {
    \Drupal::service('config.factory')
      ->getEditable('ibm_apim.settings')
      ->setData($data)
      ->save();
  }

  // if we're missing config then just reset to the defaults
  if (!array_key_exists('categories', $data) || !array_key_exists('allow_consumerorg_creation', $data)) {
    apim_profile_default_apic_config();
  }
  // ensure router type is set
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('router_type', 'hash')
    ->save();
}

/**
 * enable view_password module for the modal_application_create_form form too
 */
function apim_profile_update_8211() {
  \Drupal::configFactory()
    ->getEditable('view_password.settings')
    ->set('form_ids', 'user_login_form,user_register_form,apic_change_pwd_form,display_app_credentials_form,apic_resetpw,modal_application_create_form')
    ->save(TRUE);
}

/**
 * Remove blocklist variable
 */
function apim_profile_update_8212() {
  $data = \Drupal::service('config.factory')->get('ibm_apim.settings')->get();
  unset($data['module_blocklist']);

  if (!empty($data)) {
    \Drupal::service('config.factory')
      ->getEditable('ibm_apim.settings')
      ->setData($data)
      ->save();
  }
}

/**
 * enable drush_language module
 */
function apim_profile_update_8213() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('drush_language')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['drush_language']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * Need to make sure payment_method_encryption_profile is set
 */
function apim_profile_update_8214() {
  $encryptionProfileName = \Drupal::config('ibm_apim.settings')->get('payment_method_encryption_profile');
  if ($encryptionProfileName === NULL || empty($encryptionProfileName)) {
    \Drupal::service('config.factory')
      ->getEditable('ibm_apim.settings')
      ->set('payment_method_encryption_profile', 'socialblock')
      ->save();
  }
}

/**
 * ensure that the essential config is actually set
 * this is due to an earlier upgrade bug in 10.0.4 velox/devportal#7591
 */
function apim_profile_update_8215() {
  // if we're missing config then just reset to the defaults
  $data = \Drupal::service('config.factory')->get('ibm_apim.settings')->get();
  if (empty($data) || !array_key_exists('categories', $data) || !array_key_exists('allow_consumerorg_creation', $data)) {
    apim_profile_default_apic_config();
  }
}

/**
 * enable maintenance200 module
 */
function apim_profile_update_8216() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('maintenance200')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['maintenance200']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * Remove letter_avatar
 */
function apim_profile_update_8217() {
  $module_installer = \Drupal::service('module_installer');
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('letter_avatar')) {
    try {
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
      $module_installer->uninstall(['letter_avatar']);
      \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
    } catch (Throwable $e) {
        // if deleting the module fails (and it might since we've deleted the files), then just purge it from the db
        \Drupal::database()->delete('key_value')
          ->condition('collection', 'system.schema')
          ->condition('name', ['letter_avatar'], 'IN')
          ->execute();
    }
  }

  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
  $module_installer->install(['apic_letter_avatar']);
  \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  // update config
  \Drupal::service('config.factory')
  ->getEditable('avatars.generator.letter_generator')
  ->set('langcode', 'en')
  ->set('status', TRUE)
  ->set('dependencies', ['module' => ['apic_letter_avatar']])
  ->set('id', 'letter_generator')
  ->set('label', 'APIC Letter Generator')
  ->set('weight', 0)
  ->set('plugin', 'apic_letter_avatar')
  ->set('provider', NULL)
  ->set('settings', [])
  ->save();
}

/*
* CONTEXT: There was a bug in 2018 -> v10 Upgrade. The Upgrade numbers in v2018 got bumped to the same value after a cherry picked which should have had the
* number changed. So when we upgraded, drupal would see 8217 would have already been applied missing out all these v10 only updates that need to be performed.
* This is a fix to ensure that the missing updates are applied and we have bumped the upgrade number to 8300 so we can deviate from 2018 again.
*/
function apim_profile_update_8300() {
  $arr = array(8029, 8030, 8101, 8102,
  8103, 8104, 8105, 8106, 8107, 8108,
  8109, 8110, 8111, 8112, 8113, 8114, 8116,
  8201, 8202, 8203, 8204, 8205, 8206,
  8208, 8209, 8210, 8211, 8212, 8213,
  8214, 8215);
  foreach ($arr as &$i) {
      $apim_func = "apim_profile_update_" . $i;
      \Drupal::logger('apim_profile')->info('Executing update: @update', [
          '@update' => $apim_func,
      ]);
      $apim_func();
      \Drupal::logger('apim_profile')->info('Finished update: @update', [
        '@update' => $apim_func,
      ]);
  }
}

function apim_profile_update_8301()
{
  $config = FieldConfig::loadByName('node', 'api', 'apic_rating');
  if ($config) {
    if ($config->getSetting('user_window') == -1) {
      $config->setSetting('user_window', -2);
    }
    if ($config->getSetting('anonymous_window') == -1) {
      $config->setSetting('anonymous_window', -2);
    }
    $config->save();
  }
  $config = FieldConfig::loadByName('node', 'product', 'apic_rating');
  if ($config) {
    if ($config->getSetting('user_window') == -1) {
      $config->setSetting('user_window', -2);
    }
    if ($config->getSetting('anonymous_window') == -1) {
      $config->setSetting('anonymous_window', -2);
    }
    $config->save();
  }
  $config = FieldConfig::loadByName('node', 'consumerorg', 'apic_rating');
  if ($config) {
    if ($config->getSetting('user_window') == -1) {
      $config->setSetting('user_window', -2);
    }
    if ($config->getSetting('anonymous_window') == -1) {
      $config->setSetting('anonymous_window', -2);
    }
    $config->save();
  }
}

/**
 * Enable page_load_progress and apic_type_count modules
 */
function apim_profile_update_8302() {
  $role = Role::load('content_author');
  if ($role !== NULL) {
    user_role_grant_permissions('content_author', ['bypass content access control', 'bypass node access', 'revert all revisions']);
  }
}

/**
 * enable trusted_reverse_proxy module
 */
function apim_profile_update_8303() {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('trusted_reverse_proxy')) {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer = \Drupal::service('module_installer');
    $module_installer->install(['trusted_reverse_proxy']);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  }
}

/**
 * Add site default and english to search filter criteria
 */
function apim_profile_update_8501() {
  $view = Views::getView('search_content');
  if ($view !== NULL) {
    $filters = $view->getDisplay()->getOption('filters');
    if (isset($filters['search_api_language'], $filters['search_api_language']['value'])) {
      $filters['search_api_language']['value']['***LANGUAGE_site_default***'] = '***LANGUAGE_site_default***';
      $filters['search_api_language']['value']['en'] = 'en';
      $view->getDisplay()->setOption('filters', $filters);
      $view->save();
    }
  }
}

/**
 * Remove adminimal_admin_toolbar
 */
function apim_profile_update_8502() {
  $module = 'adminimal_admin_toolbar';
  $module_installer = \Drupal::service('module_installer');
  try {
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', FALSE)->save();
    $module_installer->uninstall([$module]);
    \Drupal::logger('apim_profile')->info('Uninstalled module: @module', [
    '@module' => $module,
    ]);
    \Drupal::configFactory()->getEditable('locale.settings')->set('translation.import_enabled', TRUE)->save();
  } catch (Throwable $e) {
      // if deleting the module fails (and it might since we've deleted the files), itll just be purged from the db next
  }
  \Drupal::logger('apim_profile')->info('Deleting module database key: @module', [
    '@module' => $module,
  ]);
  \Drupal::database()->delete('key_value')
        ->condition('collection', 'system.schema')
        ->condition('name', $module, 'IN')
        ->execute();
  \Drupal::configFactory()->getEditable('core.extension')->clear("module.$module")->save(TRUE);
}

/**
 * Update default captcha challenge points to be image_captcha/Image
 */
function apim_profile_update_8503() {
  $query = \Drupal::entityQuery('captcha_point');
  $ids = $query->accessCheck()->execute();

  foreach ($ids as $id) {
    $cp = CaptchaPoint::load($id);
    if ($cp !== NULL && $cp->getCaptchaType() == 'default') {
      $cp->setCaptchaType('image_captcha/Image');
      $cp->save();
    }
  }
}

/**
 * Implements hook_update_dependencies().
 */
function apim_profile_update_dependencies(): array {
  return [
    'apim_profile' => [
      // block_content 8600 must run before apim_profile 8002.
      8002 => [
        'block_content' => 8600,
      ],
      // taxonomy 8502 update must have run in order to create the taxonomy_term__parent table
      8007 => [
        'taxonomy' => 8502,
      ],
      // block_content 8600 *also* must run before apim_profile 8018 - for cases where we start later than 8002.
      8018 => [
        'block_content' => 8600,
      ],
      // system 8803 must run before apim_profile 8025
      8025 => [
        'system' => 8803,
      ],
    ],
    'eu_cookie_compliance_update' => [
      // need apim_profile_update_8021 to have run before the latest eu_cookie_compliance_update update
      8114 => [
        'apim_profile' => 8021,
      ],
    ],
  ];
}
