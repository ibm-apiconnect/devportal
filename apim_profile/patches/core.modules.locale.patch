diff -Naur core/modules/locale.orig/src/PluralFormula.php core/modules/locale/src/PluralFormula.php
--- core/modules/locale/src/PluralFormula.php	2017-09-08 11:56:30.060091353 +0000
+++ core/modules/locale/src/PluralFormula.php	2017-09-08 11:57:21.256203898 +0000
@@ -10,7 +10,7 @@
  *
  * @see \Drupal\locale\PoDatabaseWriter::setHeader()
  */
-class PluralFormula implements PluralFormulaInterface {
+class PluralFormula implements PluralFormulaInterface, PluralFormulaStringInterface {

   /**
    * @var \Drupal\Core\Language\LanguageManagerInterface
@@ -41,6 +41,13 @@
   protected $formulae;

   /**
+   * The string representation of the plural formula, keyed by langcode.
+   *
+   * @var string[]
+   */
+  protected $formulaStrings;
+
+  /**
    * @param \Drupal\Core\Language\LanguageManagerInterface $language_manager
    * @param \Drupal\Core\State\StateInterface $state
    */
@@ -67,6 +74,18 @@
   /**
    * {@inheritdoc}
    */
+  public function setPluralFormulaString($langcode, $formula_string) {
+    // Ensure that the formula strings are loaded.
+    $this->loadFormulaStrings();
+
+    $this->formulaStrings[$langcode] = $formula_string;
+    $this->state->set('locale.translation.formula_strings', $this->formulaStrings);
+    return $this;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
   public function getNumberOfPlurals($langcode = NULL) {
     // Ensure that the formulae are loaded.
     $this->loadFormulae();
@@ -90,6 +109,14 @@
   }

   /**
+   * {@inheritdoc}
+   */
+  public function getFormulaString($langcode) {
+    $this->loadFormulaStrings();
+    return isset($this->formulaStrings[$langcode]) ? $this->formulaStrings[$langcode] : '';
+  }
+
+  /**
    * Loads the formulae and stores them on the PluralFormula object if not set.
    *
    * @return array
@@ -101,10 +128,20 @@
   }

   /**
+   * Loads the formula strings and stores them on the object.
+   */
+  protected function loadFormulaStrings() {
+    if (!isset($this->formulaStrings)) {
+      $this->formulaStrings = $this->state->get('locale.translation.formula_strings', []);
+    }
+  }
+
+  /**
    * {@inheritdoc}
    */
   public function reset() {
     $this->formulae = NULL;
+    $this->formulaStrings = NULL;
     return $this;
   }

diff -Naur core/modules/locale.orig/src/PluralFormulaStringInterface.php core/modules/locale/src/PluralFormulaStringInterface.php
--- core/modules/locale/src/PluralFormulaStringInterface.php	1970-01-01 00:00:00.000000000 +0000
+++ core/modules/locale/src/PluralFormulaStringInterface.php	2017-09-08 11:57:21.256203898 +0000
@@ -0,0 +1,34 @@
+<?php
+
+namespace Drupal\locale;
+
+/**
+ * An interface for handling the plural formula string data.
+ */
+interface PluralFormulaStringInterface {
+
+  /**
+   * Stores the original plural formula string.
+   *
+   * @param string $langcode
+   *   The language code of the formula string.
+   * @param string $formula_string
+   *   The plural formula string.
+   *
+   * @return self
+   *   The PluralFormula object.
+   */
+  public function setPluralFormulaString($langcode, $formula_string);
+
+  /**
+   * Gets the plural formula string for a langcode.
+   *
+   * @param string $langcode
+   *   The language code to get the formula for.
+   *
+   * @return string
+   *   Plural formula.
+   */
+  public function getFormulaString($langcode);
+
+}
diff -Naur core/modules/locale.orig/src/PoDatabaseWriter.php core/modules/locale/src/PoDatabaseWriter.php
--- core/modules/locale/src/PoDatabaseWriter.php	2017-09-08 11:56:30.056091345 +0000
+++ core/modules/locale/src/PoDatabaseWriter.php	2017-09-08 11:57:21.280203953 +0000
@@ -178,7 +178,9 @@
       $plural = $header->getPluralForms();
       if (isset($plural) && $p = $header->parsePluralForms($plural)) {
         [$nplurals, $formula] = $p;
-        \Drupal::service('locale.plural.formula')->setPluralFormula($langcode, $nplurals, $formula);
+        \Drupal::service('locale.plural.formula')
+          ->setPluralFormula($langcode, $nplurals, $formula)
+          ->setPluralFormulaString($langcode, $plural);
       }
     }
   }
diff -Naur core/modules/locale.orig/tests/src/Unit/PluralFormulaTest.php core/modules/locale/tests/src/Unit/PluralFormulaTest.php
--- core/modules/locale/tests/src/Unit/PluralFormulaTest.php	1970-01-01 00:00:00.000000000 +0000
+++ core/modules/locale/tests/src/Unit/PluralFormulaTest.php	2017-09-08 11:57:21.280203953 +0000
@@ -0,0 +1,89 @@
+<?php
+
+namespace Drupal\Tests\locale\Unit;
+
+use Drupal\locale\PluralFormula;
+use Drupal\locale\PluralFormulaStringInterface;
+use Drupal\Tests\UnitTestCase;
+
+/**
+ * @coversDefaultClass \Drupal\locale\PluralFormula
+ * @group locale
+ */
+class PluralFormulaTest extends UnitTestCase {
+
+  /**
+   * @var \Drupal\Core\Language\LanguageManagerInterface|\PHPUnit_Framework_MockObject_MockObject
+   */
+  protected $languageManager;
+
+  /**
+   * @var \Drupal\Core\State\StateInterface|\PHPUnit_Framework_MockObject_MockObject
+   */
+  protected $state;
+
+  /**
+   * The system under test.
+   *
+   * @var \Drupal\locale\PluralFormulaInterface|\Drupal\locale\PluralFormulaStringInterface
+   */
+  protected $pluralFormula;
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp() {
+    parent::setUp();
+    $this->getRandomGenerator();
+
+    $this->languageManager = $this->getMock('Drupal\Core\Language\LanguageManagerInterface');
+    $this->state = $this->getMock('Drupal\Core\State\StateInterface');
+    $this->pluralFormula = new PluralFormula($this->languageManager, $this->state);
+  }
+
+  /**
+   * Tests getting the plural formula string without setting a value previously.
+   *
+   * @covers ::setPluralFormulaString
+   */
+  public function testGetFormulaStringWithoutValue() {
+    $this->state->expects($this->once())
+      ->method('get')
+      ->with('locale.translation.formula_strings', []);
+
+    $formulaString = $this->pluralFormula->getFormulaString('nl');
+    $this->assertEquals($formulaString, '');
+  }
+
+  /**
+   * Tests getting the plural formula string with a value available.
+   *
+   * @covers ::getFormulaString
+   */
+  public function testGetFormulaStringWithValue() {
+    $randomFormulaString = $this->randomGenerator->string('12');
+    $this->state->expects($this->once())
+      ->method('get')
+      ->with('locale.translation.formula_strings', [])
+      ->will($this->returnValue(['nl' => $randomFormulaString]));
+
+    $formulaString = $this->pluralFormula->getFormulaString('nl');
+    $this->assertEquals($formulaString, $randomFormulaString);
+  }
+
+  /**
+   * Tests setting the plural formula string.
+   *
+   * @covers ::setPluralFormulaString
+   */
+  public function testSetFormulaString() {
+    $randomFormulaString = $this->randomGenerator->string('12');
+    $this->state->expects($this->once())
+      ->method('set')
+      ->with('locale.translation.formula_strings', ['nl' => $randomFormulaString]);
+
+    $result = $this->pluralFormula->setPluralFormulaString('nl', $randomFormulaString);
+    $this->assertTrue($result instanceof PluralFormulaStringInterface);
+  }
+
+}
