--- core/lib/Drupal/Core/Password/PhpPassword.php	2024-07-04 12:33:45.000000000 +0100
+++ core/lib/Drupal/Core/Password/PhpPassword.php	2024-07-18 10:10:39.801191624 +0100
@@ -34,7 +34,15 @@
       return FALSE;
     }
 
-    return password_hash($password, $this->algorithm, $this->options);
+    if (trim(@file_get_contents('/proc/sys/crypto/fips_enabled')) === '1') { 
+      $iterations = 600000;
+      $keyLength = 60;
+      $salt = base64_encode(openssl_random_pseudo_bytes(12)); // 16 byte salt
+      $hash = base64_encode(openssl_pbkdf2($password, $salt, $keyLength, $iterations, 'SHA256'));
+      return sprintf("\$p2\$%03d\$%03d\$%s\$%s", $iterations / 100000, $keyLength, $salt, $hash);
+    } else {
+      return password_hash($password, $this->algorithm, $this->options);
+    }
   }
 
   /**
@@ -50,14 +58,32 @@
       return FALSE;
     }
 
-    return password_verify($password, $hash);
+    if (trim(@file_get_contents('/proc/sys/crypto/fips_enabled')) === '1') { 
+      // hash format is $p2$006$060$3tJKtSXQcukRt7H6$JGDJ2HkVHBpLjeUWl3UkRFF6x7IDGYHYmR9QGGXDBxXTa0drgZ+esv73Tzi6Uxi8uhkWwxIcGhwQvatA
+      if (substr($hash, 0, 4) !== '$p2$') {
+        return FALSE;
+      }
+      $iterations = intval(substr($hash, 4, 3) * 100000);
+      $keyLength = intval(substr($hash, 8, 3));
+      $salt = substr($hash, 12, 16);
+      $justHash = substr($hash, 29);
+      $computedHash = base64_encode(openssl_pbkdf2($password, $salt, $keyLength, $iterations, 'SHA256'));
+
+      return ($justHash === $computedHash);
+    } else {
+      return password_verify($password, $hash);
+    }
   }
 
   /**
    * {@inheritdoc}
    */
   public function needsRehash(#[\SensitiveParameter] $hash) {
-    return password_needs_rehash($hash, $this->algorithm, $this->options);
+    if (trim(@file_get_contents('/proc/sys/crypto/fips_enabled')) === '1') {
+      return (substr($hash, 0, 4) !== '$p2$');
+    } else {
+      return password_needs_rehash($hash, $this->algorithm, $this->options);
+    }
   }
 
 }
