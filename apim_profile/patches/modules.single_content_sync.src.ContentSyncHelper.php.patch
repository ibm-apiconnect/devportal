--- modules/single_content_sync/src/ContentSyncHelper.php	2023-04-21 12:37:48
+++ modules/single_content_sync/src/ContentSyncHelper.php	2023-04-24 10:06:51
@@ -243,14 +243,15 @@
     $config = $this->configFactory->get('single_content_sync.settings')->get('allowed_entity_types');
     $entity_type_id = $entity->getEntityTypeId();

-    return $entity->getEntityType()->hasLinkTemplate('single-content:export') && $entity->access('single-content:export') && (isset($config[$entity_type_id]) && (!$config[$entity_type_id] || isset($config[$entity_type_id][$entity->bundle()])));
+    return !$this->isBlocked($entity->bundle()) && $entity->getEntityType()->hasLinkTemplate('single-content:export') && $entity->access('single-content:export') && (isset($config[$entity_type_id]) && (!$config[$entity_type_id] || isset($config[$entity_type_id][$entity->bundle()])));
   }

   /**
    * {@inheritdoc}
    */
   public function siteUuidCheckEnabled(): bool {
-    return !empty($this->configFactory->get('single_content_sync.settings')->get('site_uuid_check'));
+      // FORCE FALSE AS WE NEVER WANT IT ENABLED
+      return FALSE;
   }

   /**
@@ -258,6 +259,27 @@
    */
   public function getSiteUuid(): string {
     return $this->configFactory->get('system.site')->get('uuid');
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function containsDisallowedEntities(array $entities): bool {
+    $allowed_entity_types = $this->configFactory->get('single_content_sync.settings')->get('allowed_entity_types');
+      foreach ($entities as $entity) {
+          $entity_type_id = $entity->getEntityTypeId();
+          if ($this->isBlocked($entity->bundle()) || !isset($allowed_entity_types[$entity_type_id]) || ($allowed_entity_types[$entity_type_id] && !isset($allowed_entity_types[$entity_type_id][$entity->bundle()]))) {
+            return TRUE;
+          }
+      }
+      return FALSE;
+
   }

+  public function isBlocked(string $entity): bool {
+    $apicTypes = [ "user", "api", "application", "consumerorg", "product", "event_log", "consumerorg_payment_method", "apic_app_application_subs",
+    "apic_app_application_creds" ];
+    return in_array($entity, $apicTypes);
+  }
+
 }
