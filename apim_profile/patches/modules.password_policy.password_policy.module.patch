--- modules/password_policy/password_policy.module	2022-09-28 14:55:28.000000000 +0100
+++ modules/password_policy/password_policy.module	2022-09-29 14:35:00.000000000 +0100
@@ -9,6 +9,8 @@ use Drupal\Core\Session\AccountInterface;
 use Drupal\password_policy\Entity\PasswordPolicy;
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\user\Entity\User;
+use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\user\UserInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface;
@@ -27,6 +29,18 @@ function password_policy_theme($existing, $type, $theme, $path) {
   ];
 }
 
+// Used mainly for enforcing password policy username on password reset form
+function get_user(FormStateInterface $form_state) {
+  $user = $form_state->getFormObject()->getEntity();
+  $uid = $form_state->getValue('user_id');
+  if ((!isset($user) || $user->id() === 0) && isset($uid)) {
+    $user = User::load($uid);
+  }
+
+  return $user;
+
+}
+
 /**
  * Prepares variables for the password policy status.
  *
@@ -81,7 +95,7 @@ function password_policy_form_user_form_alter(&$form, FormStateInterface $form_s
       '#constraints' => \Drupal::service('password_policy.validator')
         ->buildPasswordPolicyConstraintsTableRows(
           $form_state->getValue('pass', ''),
-          $form_state->getFormObject()->getEntity(),
+          get_user($form_state),
           _password_policy_get_edited_user_roles($form, $form_state)
       ),
       '#weight' => 4,
@@ -192,7 +206,7 @@ function _password_policy_user_profile_form_validate(&$form, FormStateInterface
   // Check if user is authenticated externally.
   if (\Drupal::moduleHandler()->moduleExists('externalauth')) {
     $authmap = \Drupal::service('externalauth.authmap');
-    $account = $form_state->getFormObject()->getEntity();
+    $account = get_user($form_state);
     $external_ids = $authmap->getAll($account->id());
     if ($external_ids) {
       return;
@@ -211,18 +225,26 @@ function _password_policy_user_profile_form_validate(&$form, FormStateInterface
   }
   $roles = _password_policy_get_edited_user_roles($form, $form_state);
 
-  $user = $form_state->getFormObject()->getEntity();
-  $user->setUsername($form_state->getValue('name', ''));
-  /** @var \Drupal\password_policy\PasswordPolicyValidationReport $validationReport */
-  $validationReport = \Drupal::service('password_policy.validator')->validatePassword(
-    $form_state->getValue('pass', ''),
-    $user,
-    $roles
-  );
-
-  if ($validationReport->isInvalid()) {
-    $form_state->setErrorByName('pass', t('The password does not satisfy the password policies.'));
-    $form_state->setError($form, $validationReport->getErrors());
+  $user = get_user($form_state);
+  if ($user instanceof User && $user->isNew()) {
+    $user->setUsername($form_state->getValue('name', ''));
+  }
+
+  if ($user instanceof AccountProxyInterface) {
+    $user = User::load($user->id());
+  }
+
+  if (!empty($form_state->getValue('pass')) && empty($form_state->getValue('pw_no_policy'))) {
+    $validationReport = \Drupal::service('password_policy.validator')->validatePassword(
+        $form_state->getValue('pass', ''),
+        $user,
+        $roles
+    );
+
+    if ($validationReport->isInvalid()) {
+        $form_state->setErrorByName('pass', t('The password does not satisfy the password policies.'));
+        $form_state->setError($form, $validationReport->getErrors());
+    }
   }
 }
 
@@ -233,7 +255,13 @@ function _password_policy_get_edited_user_roles(&$form, FormStateInterface $form
   $roles = $form_state->getValue('roles');
   if (empty($roles)) {
     // Get if from $form; form state is always empty the first time.
-    $roles = $form['account']['roles']['#default_value'];
+    if(isset($form['roles']['#default_value'])) {
+      $roles = $form['roles']['#default_value'];
+    } else if(isset($form['account']['roles']['#default_value'])) {
+      $roles = $form['account']['roles']['#default_value'];
+    } else {
+      $roles = [];
+    }
   }
   $roles = (is_array($roles)) ? array_combine($roles, $roles) : [$roles];
 
@@ -268,7 +296,7 @@ function _password_policy_user_profile_form_update_fields(array &$form, FormStat
 
   // Get User ID from User object.
   /** @var \Drupal\user\UserInterface $user */
-  $user = $form_state->getFormObject()->getEntity();
+  $user = get_user($form_state);
   $uid = $user->id();
