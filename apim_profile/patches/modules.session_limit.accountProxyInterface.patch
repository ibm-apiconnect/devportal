--- modules/session_limit/src/Services/SessionLimit.php	2019-10-30 14:32:31.000000000 +0000
+++ modules/session_limit/src/Services/SessionLimit.php	2019-10-30 14:33:31.000000000 +0000
@@ -9,7 +9,6 @@
 use Drupal\Core\Logger\LoggerChannelFactoryInterface;
 use Drupal\Core\Messenger\MessengerInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
-use Drupal\Core\Session\AccountInterface;
 use Drupal\Core\Session\AccountProxyInterface;
 use Drupal\Core\Session\AnonymousUserSession;
 use Drupal\Core\Session\SessionManagerInterface;
@@ -59,7 +58,7 @@
   /**
    * The current user.
    *
-   * @var \Drupal\Core\Session\AccountInterface
+   * @var \Drupal\Core\Session\AccountProxyInterface
    */
   protected $currentUser;

@@ -434,13 +433,13 @@
   /**
    * Get the number of active sessions for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param \Drupal\Core\Session\AccountProxyInterface $account
    *   The user to check on.
    *
    * @return int
    *   The total number of active sessions for the given user
    */
-  public function getUserActiveSessionCount(AccountInterface $account) {
+  public function getUserActiveSessionCount(AccountProxyInterface $account) {
     $query = $this->database->select('sessions', 's')
       // Use distinct so that HTTP and HTTPS sessions
       // are considered a single sessionId.
@@ -461,13 +460,13 @@
   /**
    * Get a list of active sessions for a user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param \Drupal\Core\Session\AccountProxyInterface $account
    *   The user to check on.
    *
    * @return array
    *   A list of session objects for the user.
    */
-  public function getUserActiveSessions(AccountInterface $account) {
+  public function getUserActiveSessions(AccountProxyInterface $account) {
     $query = $this->database->select('sessions', 's')
       ->fields('s', ['uid', 'sid', 'hostname', 'timestamp'])
       ->condition('s.uid', $account->id());
@@ -485,13 +484,13 @@
   /**
    * Get the maximum sessions allowed for a specific user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param \Drupal\Core\Session\AccountProxyInterface $account
    *   The user to check on.
    *
    * @return int
    *   The number of allowed sessions. A value less than 1 means unlimited.
    */
-  public function getUserMaxSessions(AccountInterface $account) {
+  public function getUserMaxSessions(AccountProxyInterface $account) {
     $limit = $this->configFactory->get('session_limit_max');
     $role_limits = $this->configFactory->get('session_limit_roles');

@@ -562,19 +561,19 @@
    *   Severity configuration value.
    */
   public function getMessageSeverity() {
-    return $this->configFactory->get('session_limit_logged_out_message_severity');
+    return $this->configFactory->get('session_limit_logged_out_message_severity') ?? '';
   }

   /**
    * Get the logged out message for the given user.
    *
-   * @param \Drupal\Core\Session\AccountInterface $account
+   * @param \Drupal\Core\Session\AccountProxyInterface $account
    *   Current user.
    *
    * @return string
    *   Logout message.
    */
-  public function getMessage(AccountInterface $account) {
+  public function getMessage(AccountProxyInterface $account) {
     return new FormattableMarkup($this->configFactory->get('session_limit_logged_out_display_message'), ['@number' => $this->getUserMaxSessions($account)]);
   }
