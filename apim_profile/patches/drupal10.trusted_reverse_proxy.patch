diff --git modules/trusted_reverse_proxy/src/StackMiddleware/TrustedReverseProxyMiddleware.php modules/trusted_reverse_proxy/src/StackMiddleware/TrustedReverseProxyMiddleware.php
index 2e59b8d..5c6667c 100644
--- modules/trusted_reverse_proxy/src/StackMiddleware/TrustedReverseProxyMiddleware.php
+++ modules/trusted_reverse_proxy/src/StackMiddleware/TrustedReverseProxyMiddleware.php
@@ -6,6 +6,7 @@ namespace Drupal\trusted_reverse_proxy\StackMiddleware;

 use Drupal\Core\Site\Settings;
 use Symfony\Component\HttpFoundation\Request;
+use Symfony\Component\HttpFoundation\Response;
 use Symfony\Component\HttpKernel\HttpKernelInterface;

 /**
@@ -43,7 +44,7 @@ class TrustedReverseProxyMiddleware implements HttpKernelInterface {
   /**
    * {@inheritDoc}
    */
-  public function handle(Request $request, $type = self::MASTER_REQUEST, $catch = TRUE) {
+  public function handle(Request $request, int $type = self::MAIN_REQUEST, bool $catch = TRUE): Response {
     if (
       // Reverse proxy is not explicitly disabled (is unset/NULL otherwise)
       $this->settings->get('reverse_proxy') !== FALSE
diff --git modules/trusted_reverse_proxy/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php modules/trusted_reverse_proxy/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php
index dcb2bda..d903c92 100644
--- modules/trusted_reverse_proxy/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php
+++ modules/trusted_reverse_proxy/tests/src/Unit/TrustedReverseProxyMiddlewareTest.php
@@ -35,7 +35,7 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
   /**
    * {@inheritdoc}
    */
-  protected function setUp() {
+  protected function setUp(): void {
     $this->mockHttpKernel = $this->createMock(HttpKernelInterface::class);
     $this->mockReverseProxyMiddleware = $this->createMock(ReverseProxyMiddleware::class);
   }
@@ -62,7 +62,7 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
     $middleware = new TrustedReverseProxyMiddleware($this->mockHttpKernel, $settings);
     $middleware->handle(new Request());
     // Assert we have not added any settings.
-    $this->assertArrayEquals($storage, $settings->getAll());
+    $this->assertEquals($storage, $settings->getAll());
   }

   /**
@@ -77,7 +77,7 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
     $middleware = new TrustedReverseProxyMiddleware($this->mockHttpKernel, $settings);
     $middleware->handle($this->getWellFormedReverseProxyRequest());
     // Assert we have not added any settings.
-    $this->assertArrayEquals($storage, $settings->getAll());
+    $this->assertEquals($storage, $settings->getAll());
   }

   /**
@@ -89,7 +89,7 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
     $middleware = new TrustedReverseProxyMiddleware($this->mockHttpKernel, $settings);
     $request = $this->getWellFormedReverseProxyRequest();
     $middleware->handle($request);
-    $this->assertArrayEquals(
+    $this->assertEquals(
       [
         'reverse_proxy' => TRUE,
         // Should contain only the first hop.
@@ -115,7 +115,7 @@ class TrustedReverseProxyMiddlewareTest extends UnitTestCase {
       $request->headers->get('x-forwarded-for') . ', 192.0.2.2'
     );
     $middleware->handle($request);
-    $this->assertArrayEquals(
+    $this->assertEquals(
       [
         'reverse_proxy' => TRUE,
         'reverse_proxy_addresses' => ['192.0.2.2', '192.0.2.1'],
diff --git modules/trusted_reverse_proxy/trusted_reverse_proxy.info.yml modules/trusted_reverse_proxy/trusted_reverse_proxy.info.yml
index a3327c5..fb3427a 100644
--- modules/trusted_reverse_proxy/trusted_reverse_proxy.info.yml
+++ modules/trusted_reverse_proxy/trusted_reverse_proxy.info.yml
@@ -1,4 +1,4 @@
 name: Trusted Reverse Proxy Support
 type: module
 description: 'Provides sensible defaults for sites running behind known trusted reverse proxies.'
-core_version_requirement: ^9
+core_version_requirement: ^9 || ^10
