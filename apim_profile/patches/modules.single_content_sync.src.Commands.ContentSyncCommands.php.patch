--- modules/single_content_sync/src/Commands/ContentSyncCommands.php    2023-05-04 10:48:16
+++ modules/single_content_sync/src/Commands/ContentSyncCommands.php
@@ -0,0 +1,366 @@
+<?php
+namespace Drupal\single_content_sync\Commands;
+
+use Drupal\Core\Config\ConfigFactoryInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\File\FileSystemInterface;
+use Drupal\Core\Messenger\MessengerInterface;
+use Drupal\single_content_sync\ContentExporterInterface;
+use Drupal\single_content_sync\ContentFileGeneratorInterface;
+use Drupal\single_content_sync\ContentImporterInterface;
+use Drupal\single_content_sync\ContentSyncHelperInterface;
+use Drush\Commands\DrushCommands;
+
+class ContentSyncCommands extends DrushCommands {
+
+  /**
+   * The content exporter service.
+   *
+   * @var \Drupal\single_content_sync\ContentExporterInterface
+   */
+  protected $contentExporter;
+
+  /**
+   * The content importer service.
+   *
+   * @var \Drupal\single_content_sync\ContentImporterInterface
+   */
+  protected $contentImporter;
+
+  /**
+   * The content file generator service.
+   *
+   * @var \Drupal\single_content_sync\ContentFileGeneratorInterface
+   */
+  protected $fileGenerator;
+
+  /**
+   * The messenger service.
+   *
+   * @var \Drupal\Core\Messenger\MessengerInterface
+   */
+  protected $messenger;
+
+  /**
+   * The config factory service.
+   *
+   * @var \Drupal\Core\Config\ConfigFactoryInterface
+   */
+  protected $configFactory;
+
+  /**
+   * The entity type manager service.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * The content sync helper service.
+   *
+   * @var \Drupal\single_content_sync\ContentSyncHelperInterface
+   */
+  protected $contentSyncHelper;
+
+  /**
+   * The file system service.
+   *
+   * @var \Drupal\Core\File\FileSystemInterface
+   */
+  protected $fileSystem;
+
+  /**
+   * Constructor of ContentSyncCommands.
+   *
+   * @param \Drupal\single_content_sync\ContentExporter $contentExporter
+   *  The content exporter service.
+   * @param \Drupal\single_content_sync\ContentFileGenerator $fileGenerator
+   *  The content file generator service.
+   * @param \Drupal\Core\Messenger\MessengerInterface $messenger
+   *  The messenger service.
+   * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
+   *  The config factory service.
+   */
+  public function __construct(ContentExporterInterface $content_exporter, ContentImporterInterface $content_importer, ContentFileGeneratorInterface $file_generator, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ContentSyncHelperInterface $content_sync_helper, FileSystemInterface $file_system) {
+    $this->contentExporter = $content_exporter;
+    $this->contentImporter = $content_importer;
+    $this->fileGenerator = $file_generator;
+    $this->messenger = $messenger;
+    $this->configFactory = $config_factory;
+    $this->entityTypeManager = $entity_type_manager;
+    $this->contentSyncHelper = $content_sync_helper;
+    $this->fileSystem = $file_system;
+  }
+
+  /**
+   * Export all content of a given entity type.
+   *
+   * By default, running the content:export command as is ('drush content:export'),
+   * all entities of type 'node' will be exported, if allowed in the site's configuration,
+   * and placed in the directory from which the command was run.
+   *
+   * @command content:export
+   *
+   * @param $entityType The entity type to export, e.g. 'node'. default is 'node'.
+   * @option $translate Whether or not to include translations in the export.
+   * @option $assets Whether or not to include assets in the export.
+   * @option $all-content Will export all entity types.
+   * @option $dry-run Will run the command in 'dry-run mode' and will not export anything.
+   * @option $entities
+   *    A comma separated string of entity id's to be exported.
+   *    Combine with @param $entityType in order to target the correct entities.
+   *    if $all-content is used, it will take priority over this option.
+   *
+   * @usage content:export node /relative/output/path --entities="1,4,17" --translate --assets --all-content --dry-run
+   */
+  public function exportEntitiesCommand($entityType = 'node', $outputPath = '.' ,$options = ['translate' => FALSE, 'assets' => FALSE, 'all-content' => FALSE, 'dry-run' => FALSE, 'entities' => NULL]): void {
+    ['translate' => $include_translations, 'assets' => $include_assets, 'all-content' => $all_allowed_content, 'dry-run' => $is_dry_run, 'entities' => $entity_ids_to_export] = $options;
+    $output_dir = $this->getRealDirectory($outputPath);
+
+    $message = $this->createMessageWithFlags("\nExecuting drush content:export {$entityType} {$outputPath}", $options);
+    $this->output->write($message);
+    $is_dry_run && $this->output->writeln("This is a dry run. No content will be exported.\n");
+
+    $entities = $this->getEntitiesToExport($entityType, $all_allowed_content, $entity_ids_to_export);
+    if ($this->checkDisallowedEntities($entities)) {
+      return;
+    }
+    if ($is_dry_run) {
+      $file_name = sizeof($entities) === 1 && !$include_assets
+        ? "{$this->contentSyncHelper->generateContentFileName($entities[0])}.yml"
+        : sprintf('content-bulk-export-%s.zip', date('d_m_Y-H_i'));
+      $zip_path = "{$output_dir}/{$file_name}";
+      $this->messenger->addStatus("Successfully exported the content. You can find the exported file at the following location:\n{$zip_path}");
+      return;
+    }
+
+    $file = sizeof($entities) === 1 && !$include_assets
+      ? $this->fileGenerator->generateYamlFile($entities[0], $include_translations)
+      : $this->fileGenerator->generateBulkZipFile($entities, $include_translations, $include_assets);
+    $file_target = isset($_SERVER['PWD'])
+      ? $this->moveFile($file, $output_dir, explode('://', $file->getFileUri(), 2)[1])
+      : explode('://', $file->getFileUri(), 2)[1];
+
+    $this->messenger->addStatus("Successfully exported the content. You can find the exported file at the following location:\n{$file_target}");
+  }
+
+  /**
+   * Import content from a file at the given path.
+   * On Windows systems, $_SERVER['PWD'] might not be set.
+   * In that case, the path will be started from the default scheme 'public://'.
+   * If $_SERVER['PWD'] is set, the path will relative from the directory from
+   * which the command was run.
+   *
+   * @command content:import
+   *
+   * @param $path The path to the file to import.
+   *
+   * @usage content:import /path/to/file.zip
+   */
+  public function importEntitiesCommand($path): void {
+    $message = $this->createMessageWithFlags("\nExecuting drush content:import {$path}");
+    $this->output->write($message);
+    $default_scheme = $this->configFactory->get('system.file')->get('default_scheme');
+    $file_path = "{$default_scheme}://{$path}";
+
+    if (isset($_SERVER['PWD'])) {
+      $file_path = strpos($path, $_SERVER['PWD']) !== FALSE
+        ? $path
+        : $this->getRealDirectory($path);
+    }
+    $file_info = pathinfo($file_path);
+
+    try {
+      $file_info['extension'] === 'zip' ? $this->commandZipImport($file_path) : $this->contentImporter->importFromFile($file_path);
+    } catch (\Exception $e) {
+      $this->messenger->addError($e->getMessage());
+    }
+    $this->messenger->addStatus("Successfully imported the content.");
+  }
+
+  /**
+   * Append flags to a message.
+   *
+   * @param string $message
+   *   The message to append flags to.
+   * @param array $options
+   *   The options array with flags to append.
+   */
+  private function createMessageWithFlags(string $message, array $options = []): string {
+    $include_translations = $options['translate'] ?? false;
+    $include_assets = $options['assets'] ?? false;
+    $all_allowed_content = $options['all-content'] ?? false;
+    $is_dry_run = $options['dry-run'] ?? false;
+    $entity_ids_to_export = $options['entities'] ?? null;
+
+    $flags = '';
+    $flags .= $include_translations ? ' --translate' : '';
+    $flags .= $include_assets ? ' --assets' : '';
+    $flags .= $all_allowed_content ? ' --all-content' : '';
+    $flags .= $is_dry_run ? ' --dry-run' : '';
+    $flags .= $entity_ids_to_export ? " --entities=\"{$entity_ids_to_export}\"" : '';
+
+    return "{$message}{$flags}\n\n";
+}
+
+  /**
+   * Check if the given entities contain disallowed entities.
+   *
+   * @param array $entities
+   *    The entities to check.
+   *
+   *  Returns TRUE if the given entities contain disallowed entities,
+   *  else returns FALSE.
+   */
+  private function checkDisallowedEntities($entities): bool {
+    $disallowed = $this->contentSyncHelper->containsDisallowedEntities($entities);
+    if ($disallowed) {
+      $this->messenger->addError("The export couldn't be completed since it contains disallowed content. Please check the configuration of the Single Content Sync module, or export only allowed content.");
+      return TRUE;
+    }
+    return FALSE;
+  }
+
+  /**
+   * Import content from a zip file.
+   *
+   * @param string $file_path
+   *   The path to the zip file to import.
+   */
+  private function commandZipImport(string $file_path): void {
+    $zip = $this->contentSyncHelper->createZipInstance($file_path);
+
+    $import_directory = $this->contentSyncHelper->createImportDirectory();
+    $zip->extract($import_directory);
+
+    $content_file_path = NULL;
+
+    // Always import assets first, even if they're at the end of ZIP archive.
+    foreach ($zip->listContents() as $zip_file) {
+      $original_file_path = "{$import_directory}/{$zip_file}";
+      if (strpos($zip_file, 'assets') === 0) {
+        $this->contentImporter->importAssets($original_file_path, $zip_file);
+      }
+    }
+
+    foreach ($zip->listContents() as $zip_file) {
+      $original_file_path = "{$import_directory}/{$zip_file}";
+      if (strpos($zip_file, 'assets') === FALSE) {
+        $content_file_path = $original_file_path;
+        $this->contentImporter->importFromFile($original_file_path);
+      }
+
+      if (is_null($content_file_path)) {
+        throw new \Exception("The content file in YAML format could not be found.");
+      }
+    }
+  }
+
+  /**
+   * Get the entities to export.
+   *
+   * @param string $entityType
+   *    The entity type to export, e.g. 'node'.
+   * @param bool $all_allowed_content
+   *    Will export all entity types if set to TRUE.
+   *
+   *    Returns an array of entities to export.
+   */
+  private function getEntitiesToExport($entityType = 'node', $all_allowed_content = FALSE, $entity_ids_to_export = NULL): array {
+    if ($all_allowed_content) {
+      $allowed_entity_types = $this->configFactory->get('single_content_sync.settings')->get('allowed_entity_types');
+      $entities = array_reduce($this->entityTypeManager->getDefinitions(), function ($carry, $entity_type) use ($allowed_entity_types) {
+        if (isset($allowed_entity_types[$entity_type->id()])) {
+          return array_merge($carry, $this->entityTypeManager->getStorage($entity_type->id())->loadMultiple());
+        }
+        return $carry;
+      }, []);
+    } else if ($entity_ids_to_export) {
+      $entities = $this->getSelectedEntities($entityType, $entity_ids_to_export);
+    } else {
+      $entities = $this->entityTypeManager->getStorage($entityType)->loadMultiple();
+    }
+    return $entities;
+  }
+
+  /**
+   * Get an array of entities to export based on an entity type and an array of entity ids.
+   *
+   * @param string $entityType
+   *    The entity type to export, e.g. 'node'.
+   * @param string $ids_to_export
+   *    A comma separated string of entity type ids to export, e.g. "1,2,5".
+   *
+   *    Returns an array of entities.
+   */
+  private function getSelectedEntities($entityType, $ids_to_export): array {
+    $entity_ids = explode(",", $ids_to_export);
+    $entities = [];
+    $invalid_ids = [];
+    foreach($entity_ids as $id) {
+      if (!intval($id)) {
+        array_push($invalid_ids, $id);
+      }
+    }
+    if (!empty($invalid_ids)) {
+      $err_out = implode( ", ", $invalid_ids);
+      throw new \Exception("The export couldn't be completed because the --entities contain invalid ids: {$err_out}");
+    }
+    foreach ($entity_ids as $id) {
+      array_push($entities, $this->entityTypeManager->getStorage($entityType)->load($id));
+    }
+    return $entities;
+  }
+
+  /**
+   * Move a file to directory.
+   * On Windows systems, the $_SERVER['PWD'] might not work. In that case,
+   * the file will remain in the default export location of 'sites/default/files/export/'.
+   *
+   * @param FileInterface $file
+   *    The file to move.
+   * @param string $output_path
+   *    A relative path to move the file to.
+   * @param string $file_target
+   *    The current location of the file.
+   */
+  private function moveFile($file, $output_dir, $file_target): string {
+    if (!$output_dir) {
+        return $file_target;
+    }
+
+    $target_base_name = basename($file_target);
+    $moved_file_path = "{$output_dir}/{$target_base_name}";
+    $this->fileSystem->move($file->getFileUri(), $moved_file_path);
+
+    return $moved_file_path;
+}
+
+  /**
+   * Gets the real output directory based on a relative output path.
+   * On Windows systems, the $_SERVER['PWD'] might not work. In that case,
+   * the file will remain in the default export location of 'sites/default/files/export/'.
+   *
+   * @param string $output_path
+   *    The relative ouput path.
+   *
+   *    Returns a string with the real output directory.
+   */
+  private function getRealDirectory($output_path): string {
+    if (!isset($_SERVER['PWD'])) {
+        return '';
+    }
+
+    $grandparent_path = $_SERVER['PWD'];
+    if ($output_path) {
+        $relative_dir = rtrim(ltrim($output_path, './'), '/');
+        $parent_count = substr_count($relative_dir, '../');
+        $grandparent_path = !!$parent_count ? dirname($grandparent_path, $parent_count) : $grandparent_path;
+        $trimmed_relative_dir = ltrim(str_replace('../', '', $relative_dir), '/');
+        $output_dir = "{$grandparent_path}/{$trimmed_relative_dir}";
+        $this->contentSyncHelper->prepareFilesDirectory($output_dir);
+        return $output_dir;
+    }
+    return $grandparent_path;
+  }
+}

--- modules/single_content_sync/src/Commands/ContentSyncCommands.php    2023-05-04 10:48:16
+++ modules/single_content_sync/src/Commands/ContentSyncCommands.php       2023-05-04 10:48:20
@@ -10,6 +10,9 @@
 use Drupal\single_content_sync\ContentImporterInterface;
 use Drupal\single_content_sync\ContentSyncHelperInterface;
 use Drush\Commands\DrushCommands;
+use Drupal\Core\Session\UserSession;
+use Drupal\Core\Session\AccountSwitcherInterface;
+use Drupal\Core\Serialization\Yaml;

 class ContentSyncCommands extends DrushCommands {

@@ -70,6 +73,13 @@
   protected $fileSystem;

   /**
+   * The account switcher service.
+   *
+   * @var \Drupal\Core\Session\AccountSwitcherInterface
+   */
+  protected $accountSwitcher;
+
+  /**
    * Constructor of ContentSyncCommands.
    *
    * @param \Drupal\single_content_sync\ContentExporter $contentExporter
@@ -81,7 +91,7 @@
    * @param \Drupal\Core\Config\ConfigFactoryInterface $configFactory
    *  The config factory service.
    */
-  public function __construct(ContentExporterInterface $content_exporter, ContentImporterInterface $content_importer, ContentFileGeneratorInterface $file_generator, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ContentSyncHelperInterface $content_sync_helper, FileSystemInterface $file_system) {
+  public function __construct(ContentExporterInterface $content_exporter, ContentImporterInterface $content_importer, ContentFileGeneratorInterface $file_generator, MessengerInterface $messenger, ConfigFactoryInterface $config_factory, EntityTypeManagerInterface $entity_type_manager, ContentSyncHelperInterface $content_sync_helper, FileSystemInterface $file_system, AccountSwitcherInterface $account_switcher) {
     $this->contentExporter = $content_exporter;
     $this->contentImporter = $content_importer;
     $this->fileGenerator = $file_generator;
@@ -90,6 +100,7 @@
     $this->entityTypeManager = $entity_type_manager;
     $this->contentSyncHelper = $content_sync_helper;
     $this->fileSystem = $file_system;
+    $this->accountSwitcher = $account_switcher;
   }

   /**
@@ -114,6 +125,9 @@
    * @usage content:export node /relative/output/path --entities="1,4,17" --translate --assets --all-content --dry-run
    */
   public function exportEntitiesCommand($entityType = 'node', $outputPath = '.' ,$options = ['translate' => FALSE, 'assets' => FALSE, 'all-content' => FALSE, 'dry-run' => FALSE, 'entities' => NULL]): void {
+    // Switch to root user (--user option was removed from drush 9).
+    $this->accountSwitcher->switchTo(new UserSession(['uid' => 1]));
+
     ['translate' => $include_translations, 'assets' => $include_assets, 'all-content' => $all_allowed_content, 'dry-run' => $is_dry_run, 'entities' => $entity_ids_to_export] = $options;
     $output_dir = $this->getRealDirectory($outputPath);

@@ -142,6 +156,9 @@
       : explode('://', $file->getFileUri(), 2)[1];

     $this->messenger->addStatus("Successfully exported the content. You can find the exported file at the following location:\n{$file_target}");
+
+    // Switch account back.
+    $this->accountSwitcher->switchBack();
   }

   /**
@@ -154,11 +171,15 @@
    * @command content:import
    *
    * @param $path The path to the file to import.
+   * @option $uuid
+   *    The uuid of the entity you would like to import the content too.
+   *    If the uuid exists if must be of the same type you are importing i.e page
    *
    * @usage content:import /path/to/file.zip
    */
-  public function importEntitiesCommand($path): void {
-    $message = $this->createMessageWithFlags("\nExecuting drush content:import {$path}");
+  public function importEntitiesCommand($path, $options = ['uuid' => NULL] ): void {
+    ['uuid' => $uuid] = $options;
+    $message = $this->createMessageWithFlags("\nExecuting drush content:import {$path}", $options);
     $this->output->write($message);
     $default_scheme = $this->configFactory->get('system.file')->get('default_scheme');
     $file_path = "{$default_scheme}://{$path}";
@@ -169,6 +190,27 @@
         : $this->getRealDirectory($path);
     }
     $file_info = pathinfo($file_path);
+
+    if ($file_info['extension'] === 'yaml' && $file_info['extension'] === 'yml') {
+      if ($uuid != NULL) {
+        throw new \Exception("--uuid can only be used when importing single files.");
+      } else {
+        if (!is_file($file_path)) {
+          // Need to remove directory code would have created.
+          rmdir($file_path);
+          throw new \Exception("The provided file does not exist.");
+        }
+        $file_content = file_get_contents($file_path);
+        $content = Yaml::decode($file_content);
+        // Validate YAML format structure.
+        if (!is_array($content)) {
+          throw new \Exception('YAML is not valid.');
+        }
+        $content['uuid'] = $uuid;
+        file_put_contents($file_path, Yaml::encode($content));
+        $this->messenger->addStatus("Updated the yaml file's uuid to " . $uuid);
+      }
+    }

     try {
       $file_info['extension'] === 'zip' ? $this->commandZipImport($file_path) : $this->contentImporter->importFromFile($file_path);
@@ -192,6 +234,7 @@
     $all_allowed_content = $options['all-content'] ?? false;
     $is_dry_run = $options['dry-run'] ?? false;
     $entity_ids_to_export = $options['entities'] ?? null;
+    $uuid_to_import_to = $options['uuid'] ?? null;

     $flags = '';
     $flags .= $include_translations ? ' --translate' : '';
@@ -199,6 +242,7 @@
     $flags .= $all_allowed_content ? ' --all-content' : '';
     $flags .= $is_dry_run ? ' --dry-run' : '';
     $flags .= $entity_ids_to_export ? " --entities=\"{$entity_ids_to_export}\"" : '';
+    $flags .= $uuid_to_import_to ? " --uuid=\"{$uuid_to_import_to}\"" : '';

     return "{$message}{$flags}\n\n";
 }
@@ -271,14 +315,20 @@
       $allowed_entity_types = $this->configFactory->get('single_content_sync.settings')->get('allowed_entity_types');
       $entities = array_reduce($this->entityTypeManager->getDefinitions(), function ($carry, $entity_type) use ($allowed_entity_types) {
         if (isset($allowed_entity_types[$entity_type->id()])) {
-          return array_merge($carry, $this->entityTypeManager->getStorage($entity_type->id())->loadMultiple());
+          return array_filter(array_merge($carry, $this->entityTypeManager->getStorage($entity_type->id())->loadMultiple()), function($entity) {
+            $bundle = $entity->bundle() ?? '';
+            return !$this->contentSyncHelper->isBlocked($bundle);
+          });
         }
         return $carry;
       }, []);
     } else if ($entity_ids_to_export) {
       $entities = $this->getSelectedEntities($entityType, $entity_ids_to_export);
     } else {
-      $entities = $this->entityTypeManager->getStorage($entityType)->loadMultiple();
+      $entities = array_filter($this->entityTypeManager->getStorage($entityType)->loadMultiple(), function($entity) {
+        $bundle = $entity->bundle() ?? '';
+        return !$this->contentSyncHelper->isBlocked($bundle);
+      });
     }
     return $entities;
   }
@@ -351,6 +401,10 @@
         return '';
     }

+    if (str_starts_with($output_path, '/')) {
+      return rtrim($output_path, '/');
+    }
+
     $grandparent_path = $_SERVER['PWD'];
     if ($output_path) {
         $relative_dir = rtrim(ltrim($output_path, './'), '/');
