--- modules/perimeter/src/EventSubscriber/PerimeterSubscriber.php	2021-06-24 12:54:23.000000000 +0100
+++ modules/perimeter/src/EventSubscriber/PerimeterSubscriber.php	2021-06-24 12:54:23.000000000 +0100
@@ -14,6 +14,7 @@
 use Symfony\Component\HttpKernel\Event\ResponseEvent;
 use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
 use Symfony\Component\HttpKernel\KernelEvents;
+use Drupal\Core\Site\Settings;

 /**
  * On page not found events, ban the IP if the request is suspicious.
@@ -101,12 +102,13 @@
    */
   protected function handleBannedUrls(Request $request) {
     $clientIp = $request->getClientIp();
-    if ($this->currentUser->hasPermission('bypass perimeter defence rules') || $this->isWhitelisted($clientIp)) {
+    $whitelist = Settings::get('reverse_proxy_addresses', []) ;
+    if ($this->currentUser->hasPermission('bypass perimeter defence rules') || $this->isWhitelisted($clientIp) || in_array($clientIp, $whitelist)) {
       return;
     }
     $request_path = $request->getPathInfo();
     $bannedPatterns = $this->configFactory->get('perimeter.settings')->get('not_found_exception_patterns');
-    if (!empty($bannedPatterns) && !empty($request_path)) {
+    if (!empty($bannedPatterns) && !empty($request_path) && (bool)\Drupal::state()->get('ibm_apim.ip_ban_enabled', true)) {
       foreach ($bannedPatterns as $pattern) {
         $pattern = trim($pattern);
         if (!empty($pattern) && preg_match($pattern, $request_path)) {
