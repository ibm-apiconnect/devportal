diff --git modules/restrict_by_ip/restrict_by_ip.info.yml modules/restrict_by_ip/restrict_by_ip.info.yml
index 63ab66a..e21831f 100644
--- modules/restrict_by_ip/restrict_by_ip.info.yml
+++ modules/restrict_by_ip/restrict_by_ip.info.yml
@@ -2,5 +2,5 @@ name: Restrict By IP
 description: Enables limiting user login and role access to specific IP Addresses.
 type: module
 package: Access control
-core_version_requirement: ^8 || ^9
+core_version_requirement: ^8 || ^9 || ^10
 configure: restrict_by_ip.general_settings

diff --git modules/restrict_by_ip/src/EventSubscriber/FirewallSubscriber.php modules/restrict_by_ip/src/EventSubscriber/FirewallSubscriber.php
index c307c66..c5f8b8f 100644
--- modules/restrict_by_ip/src/EventSubscriber/FirewallSubscriber.php
+++ modules/restrict_by_ip/src/EventSubscriber/FirewallSubscriber.php
@@ -2,10 +2,10 @@

 namespace Drupal\restrict_by_ip\EventSubscriber;

+use Symfony\Component\HttpKernel\Event\RequestEvent;
 use Symfony\Component\EventDispatcher\EventSubscriberInterface;
 use Drupal\Core\Session\AccountInterface;
 use Drupal\restrict_by_ip\LoginFirewallInterface;
-use Symfony\Component\HttpKernel\Event\GetResponseEvent;

 /**
  * Triggers the restrict by IP login firewall.
@@ -51,10 +51,10 @@ class FirewallSubscriber implements EventSubscriberInterface {
   /**
    * This method is called whenever the kernel.request event is dispatched.
    *
-   * @param \Symfony\Component\HttpKernel\Event\GetResponseEvent $event
+   * @param \Symfony\Component\HttpKernel\Event\RequestEvent $event
    *   The event.
    */
-  public function loginFirewall(GetResponseEvent $event) {
+  public function loginFirewall(RequestEvent $event) {
     $this->loginFirewall->execute($this->currentUser);
   }

diff --git modules/restrict_by_ip/src/Form/UserSettingsForm.php modules/restrict_by_ip/src/Form/UserSettingsForm.php
index 738514e..78e09e1 100644
--- modules/restrict_by_ip/src/Form/UserSettingsForm.php
+++ modules/restrict_by_ip/src/Form/UserSettingsForm.php
@@ -2,6 +2,7 @@

 namespace Drupal\restrict_by_ip\Form;

+use Drupal\user\Entity\User;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\Core\Form\ConfigFormBase;
 use Drupal\Core\Form\FormStateInterface;
@@ -67,7 +68,7 @@ class UserSettingsForm extends ConfigFormBase {

     // Current restrictions.
     foreach ($config->get('user') as $key => $value) {
-      $account = \Drupal\user\Entity\User::load($key);
+      $account = User::load($key);
       $form['restrict_by_ip_user_' . $key] = [
         '#type' => 'textfield',
         '#title' => $this->t('@name user IP range', ['@name' => $account->label()]),
diff --git modules/restrict_by_ip/tests/src/Functional/RedirectTest.php modules/restrict_by_ip/tests/src/Functional/RedirectTest.php
index 347a10a..3eee954 100644
--- modules/restrict_by_ip/tests/src/Functional/RedirectTest.php
+++ modules/restrict_by_ip/tests/src/Functional/RedirectTest.php
@@ -23,7 +23,7 @@ class RedirectTest extends RestrictByIPWebTestBase {
    *
    * @var array
    */
-  public static $modules = [
+  protected static $modules = [
     'restrict_by_ip',
     'node',
   ];
@@ -31,7 +31,7 @@ class RedirectTest extends RestrictByIPWebTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a page users will get redirected to when denied login.
diff --git modules/restrict_by_ip/tests/src/Functional/RestrictByIPWebTestBase.php modules/restrict_by_ip/tests/src/Functional/RestrictByIPWebTestBase.php
index aaf8947..e83ce11 100644
--- modules/restrict_by_ip/tests/src/Functional/RestrictByIPWebTestBase.php
+++ modules/restrict_by_ip/tests/src/Functional/RestrictByIPWebTestBase.php
@@ -56,7 +56,7 @@ abstract class RestrictByIPWebTestBase extends BrowserTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable modules needed for these tests.
     parent::setUp();

diff --git modules/restrict_by_ip/tests/src/Functional/RoleTest.php modules/restrict_by_ip/tests/src/Functional/RoleTest.php
index a2cd212..b35191e 100644
--- modules/restrict_by_ip/tests/src/Functional/RoleTest.php
+++ modules/restrict_by_ip/tests/src/Functional/RoleTest.php
@@ -21,7 +21,7 @@ class RoleTest extends RestrictByIPWebTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     parent::setUp();

     // Create a role with administer permissions so we can load the user edit,
diff --git modules/restrict_by_ip/tests/src/Functional/UiTest.php modules/restrict_by_ip/tests/src/Functional/UiTest.php
index d2c8c06..c8d012e 100644
--- modules/restrict_by_ip/tests/src/Functional/UiTest.php
+++ modules/restrict_by_ip/tests/src/Functional/UiTest.php
@@ -19,7 +19,7 @@ class UiTest extends RestrictByIPWebTestBase {
   /**
    * {@inheritdoc}
    */
-  public function setUp() {
+  public function setUp(): void {
     // Enable modules needed for these tests.
     parent::setUp();

--- modules/restrict_by_ip/restrict_by_ip.module        2022-12-15 10:08:40
+++ modules/restrict_by_ip/restrict_by_ip copy.module   2022-12-15 16:42:52
@@ -1,5 +1,6 @@
 <?php

+use Drupal\restrict_by_ip\Exception\InvalidIPException;
 /**
  * @file
  * Restrict logins or roles to whitelisted IP addresses.
@@ -104,12 +105,12 @@
 function restrict_by_ip_user_profile_validate($form, &$form_state) {
   $ip_tools = \Drupal::service('restrict_by_ip.ip_tools');
   $ips = $form_state->getvalue('restrict_by_ip_address');
-  if (strlen($ips) > 0) {
+  if (!empty($ips)) {
     foreach (explode(';', $ips) as $ip) {
       try {
         $ip_tools->validateIP($ip);
       }
-      catch (\Drupal\restrict_by_ip\Exception\InvalidIPException $e) {
+      catch (InvalidIPException $e) {
         $form_state->setErrorByName('restrict_by_ip_address', t($e->getMessage()));
       }
     }
@@ -124,7 +125,7 @@
   $user = $form_state->getFormObject()->getEntity();
   $ips = $form_state->getValue('restrict_by_ip_address');

-  if (strlen($ips) > 0) {
+  if (!empty($ips)) {
     $config->set('user.' . $user->id(), $ips)->save();
   }
   else {
@@ -154,7 +155,7 @@
     $form_name = _restrict_by_ip_hash_role_name($name);
     $ranges = variable_get('restrict_by_ip_role_' . $form_name, '');
     // Only check IP if an IP restriction is set for this role
-    if (strlen($ranges) > 0) {
+    if (!empty($ranges)) {
       $ipaddresses = explode(';', $ranges);
       $match = FALSE;
       foreach ($ipaddresses as $ipaddress) {

diff --git modules/restrict_by_ip/src/Form/LoginSettingsForm.php modules/restrict_by_ip/src/Form/LoginSettingsForm.php
index 959243419e3ca737dee8756fffdd2bf9301f3642..c9ca60e00687139a04cc3f02a3f8035ead55c854 100644
--- modules/restrict_by_ip/src/Form/LoginSettingsForm.php
+++ modules/restrict_by_ip/src/Form/LoginSettingsForm.php
@@ -78,7 +78,7 @@ class LoginSettingsForm extends ConfigFormBase {
   public function validateForm(array &$form, FormStateInterface $form_state) {
     parent::validateForm($form, $form_state);

-    if (strlen($form_state->getValue('restrict_by_ip_login_range')) > 0) {
+    if (!empty($form_state->getValue('restrict_by_ip_login_range'))) {
       $ip_addresses = explode(";", $form_state->getValue('restrict_by_ip_login_range'));
       foreach ($ip_addresses as $ip) {
         try {
diff --git modules/restrict_by_ip/src/Form/RoleSettingsForm.php modules/restrict_by_ip/src/Form/RoleSettingsForm.php
index edb2ba9e8c5916a69e78f7916a023497f2164201..7ce4eb3cda08a0a1b10fc1555870e0a12ef2c2c0 100644
--- modules/restrict_by_ip/src/Form/RoleSettingsForm.php
+++ modules/restrict_by_ip/src/Form/RoleSettingsForm.php
@@ -81,7 +81,7 @@ class RoleSettingsForm extends ConfigFormBase {
     parent::validateForm($form, $form_state);

     foreach ($form_state->getValues() as $key => $value) {
-      if (strpos($key, 'restrict_by_ip_role_') !== FALSE && strlen($value) > 0) {
+      if (strpos($key, 'restrict_by_ip_role_') !== FALSE && !empty($value)) {
         $ip_addresses = explode(";", $value);
         foreach ($ip_addresses as $ip) {
           try {
diff --git modules/restrict_by_ip/src/Form/UserSettingsForm.php modules/restrict_by_ip/src/Form/UserSettingsForm.php
index 738514e8dc56bb890db625a939972587710ee4d4..3627b1f159eddfe48b152e7d9c325f3ffdb0e758 100644
--- modules/restrict_by_ip/src/Form/UserSettingsForm.php
+++ modules/restrict_by_ip/src/Form/UserSettingsForm.php
@@ -89,7 +89,7 @@ class UserSettingsForm extends ConfigFormBase {

     // Validation for existing restrictions.
     foreach ($form_state->getValues() as $key => $value) {
-      if (strpos($key, 'restrict_by_ip_user_') !== FALSE && strlen($value) > 0) {
+      if (strpos($key, 'restrict_by_ip_user_') !== FALSE && !empty($value)) {
         $ip_addresses = explode(";", $value);
         foreach ($ip_addresses as $ip) {
           try {
@@ -103,7 +103,7 @@ class UserSettingsForm extends ConfigFormBase {
     }

     // Validation for new restriction.
-    if (strlen($form_state->getValue('name')) > 0) {
+    if (!empty($form_state->getValue('name'))) {
       // Validate no existing restriction.
       if ($config->get('user.' . $form_state->getValue('name')) !== NULL) {
         $form_state->setErrorByName('name', $this->t('Restriction for that user already exist.'));
@@ -136,7 +136,7 @@ class UserSettingsForm extends ConfigFormBase {
         continue;
       }

-      if (strlen($value) > 0) {
+      if (!empty($value)) {
         $config->set(str_replace('restrict_by_ip_user_', 'user.', $key), $value);
       }
       else {
@@ -145,7 +145,7 @@ class UserSettingsForm extends ConfigFormBase {
     }

     // New restriction.
-    if (strlen($form_state->getValue('name')) > 0) {
+    if (!empty($form_state->getValue('name'))) {
       $config->set('user.' . $form_state->getValue('name'), $form_state->getValue('restriction'));
     }

diff --git modules/restrict_by_ip/src/LoginFirewall.php modules/restrict_by_ip/src/LoginFirewall.php
index 560378c8cd4c6cf56c86265fd58025ab1875db93..822688ec5a0630425dbe0e00528a2aaceb338528 100644
--- modules/restrict_by_ip/src/LoginFirewall.php
+++ modules/restrict_by_ip/src/LoginFirewall.php
@@ -97,7 +97,7 @@ class LoginFirewall implements LoginFirewallInterface {
     $global_data = $this->config->get('login_range');

     // If there is no global IP restriction configured, we allow all.
-    if (strlen($global_data) == 0) {
+    if (empty($global_data)) {
       return NULL;
     }

@@ -118,7 +118,7 @@ class LoginFirewall implements LoginFirewallInterface {
     $user_data = $this->config->get('user.' . $account->id());

     // If there is no user IP restriction configured, we allow all.
-    if (strlen($user_data) == 0) {
+    if (empty($user_data)) {
       return NULL;
     }

--- modules/restrict_by_ip/src/RoleFirewall.php		2024-02-12 13:11:05
+++ modules/restrict_by_ip/src/RoleFirewall.php		2024-02-09 17:04:14
@@ -44,19 +44,26 @@
     foreach ($roles as $name) {
       $role_data = $this->config->get('role.' . $name);
 
-      if (strlen($role_data) == 0) {
+      if (empty($role_data)) {
         continue;
       }
 
       $ranges = explode(';', $role_data);
-
+      
+      $valid = FALSE;
       foreach ($ranges as $range) {
         try {
           $this->ipTools->validateCIDR($user_ip, $range);
         } catch (IPOutOfRangeException $e) {
-          $remove_roles[] = $name;
+          continue;
         }
+
+        $valid = TRUE;
       }
+
+      if (!$valid) {
+        $remove_roles[] = $name;
+      }
     }
 
     return $remove_roles;

--- modules/restrict_by_ip/restrict_by_ip.services.yml  2022-12-19 10:05:18
+++ modules/restrict_by_ip/restrict_by_ip.services.yml     2022-12-19 10:05:43
@@ -12,4 +12,10 @@
       - { name: event_subscriber }
   restrict_by_ip.role_firewall:
       class: Drupal\restrict_by_ip\RoleFirewall
-      arguments: ["@restrict_by_ip.ip_tools","@config.factory","@entity_type.manager"]
\ No newline at end of file
+      arguments: ["@restrict_by_ip.ip_tools","@config.factory","@entity_type.manager"]
+  restrict_by_ip.current_user:
+    class: Drupal\Core\Session\AccountProxy
+    arguments: ['@event_dispatcher']
+  current_user:
+    class: Drupal\restrict_by_ip\Session\AccountProxy
+    arguments: ['@restrict_by_ip.current_user', '@restrict_by_ip.role_firewall']

--- modules/restrict_by_ip/src/RestrictByIpServiceProvider.php  2022-12-19 09:50:51
+++ /dev/null   2022-12-19 10:07:18
@@ -1,35 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains Drupal\restrict_by_ip\RestrictByIpServiceProvider
- */
-
-namespace Drupal\restrict_by_ip;
-
-use Symfony\Component\DependencyInjection\Definition;
-use Symfony\Component\DependencyInjection\Reference;
-use Drupal\Core\DependencyInjection\ServiceProviderBase;
-use Drupal\Core\DependencyInjection\ContainerBuilder;
-
-/**
- * Rename current_user service and replace with one provided by restrict_by_ip
- * module.
- */
-class RestrictByIpServiceProvider extends ServiceProviderBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function alter(ContainerBuilder $container) {
-    // Rename current_user service.
-    $coreService = $container->getDefinition('current_user');
-    $container->setDefinition('restrict_by_ip.current_user', $coreService);
-
-    // Register this modules class as default for current_user service.
-    $newService = new Definition('Drupal\restrict_by_ip\Session\AccountProxy');
-    $newService->addArgument(new Reference('restrict_by_ip.current_user'));
-    $newService->addArgument(new Reference('restrict_by_ip.role_firewall'));
-    $container->setDefinition('current_user', $newService);
-  }
-}
\ No newline at end of file
