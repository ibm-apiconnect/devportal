--- modules/content_synchronizer/src/Service/GlobalReferenceManager.php 2023-07-03 16:41:58
+++ modules/content_synchronizer/src/Service/GlobalReferenceManager.php    2023-08-22 12:15:02
@@ -83,6 +83,55 @@
   }

   /**
+   * Checks if there is already a gid linked to the entity type and id.
+   *
+   * @param string $entityType
+   *   The entityType.
+  * @param string $entityId
+   *   The entityId.
+   *
+   * @return bool
+   *   If a reference exists.
+   */
+  public function doesEntityHaveAReference($entityType, $entityId) {
+
+    $query = \Drupal::database()->select(self::GID_TABLE_NAME)
+      ->fields(self::GID_TABLE_NAME, [
+        self::FIELD_ENTITY_TYPE,
+        self::FIELD_ENTITY_ID,
+      ])
+      ->condition(self::FIELD_ENTITY_TYPE, $entityType)
+      ->condition(self::FIELD_ENTITY_ID, $entityId);
+
+    $result = $query->execute()->fetchAssoc();
+
+    return !empty($result);
+  }
+
+  /**
+   * Checks if there is already a gid with a entity type and id already linked to another entity id
+   *
+   * @param string $gid
+   *   The gid
+   *
+   * @return bool
+   *   If a reference exists.
+   */
+  public function hasEntityBeenImportedBefore($gid) {
+    $entityIdAndType = trim(substr($gid, strpos($gid, '.') + 1));
+    $query = \Drupal::database()->select(self::GID_TABLE_NAME)
+      ->fields(self::GID_TABLE_NAME, [
+        self::FIELD_ENTITY_TYPE,
+        self::FIELD_ENTITY_ID,
+      ])
+      ->condition(self::FIELD_GID, '.*'.$entityIdAndType.'$', 'REGEXP');
+
+    $result = $query->execute()->fetchAssoc();
+
+    return !empty($result);
+  }
+
+  /**
    * Return the entity type from the gid.
    *
    * @param string $gid
@@ -97,6 +146,21 @@
   }

   /**
+   * Return the entity id from the gid.
+   *
+   * @param string $gid
+   *   THe gid.
+   *
+   * @return string
+   *   The entity type id.
+   */
+  public function getEntityIdFromGid($gid) {
+    $entityId = explode('.', $gid)[2];
+    return $entityId;
+  }
+
+
+  /**
    * Create GID from entity and gid.
    *
    * @param \Drupal\Core\Entity\EntityInterface $entity
@@ -135,10 +199,10 @@
   /**
    * Return the entity by gid and uuid.
    */
-  public function getExistingEntityByGidAndUuid($gid, $uuid) {
+  public function getExistingEntityByGidAndUuid($gid, $uuid, $bundle) {
     // Load by gid for already imported or exported data :
     if ($existing = $this->getEntityByGid($gid)) {
-      return $existing;
+      return [ $existing, 'update' ];
     }

     // Load by uuid :
@@ -148,17 +212,43 @@

       $result = $query->accessCheck(TRUE)->execute();
       if (!empty($result)) {
-
         // Get the entity.
         $entity = \Drupal::entityTypeManager()
           ->getStorage($entityType)
           ->load(reset($result));

+        if ($entity->bundle() != $bundle) {
+          return [ NULL, 'newids'];
+        }
+
         // Create the global reference association.
         $this->createGlobalEntityByImportingEntityAndGid($entity, $gid);

-        return $entity;
+        return [ $entity, 'update' ];
       }
+
+      $entityId = $this->getEntityIdFromGid($gid);
+      $entity = \Drupal::entityTypeManager()
+          ->getStorage($entityType)
+          ->load($entityId);
+
+      if(($entity && $entity->bundle() == $bundle) && $this->hasEntityBeenImportedBefore($gid)) {
+        $this->createGlobalEntityByImportingEntityAndGid($entity, $gid);
+        return [ $entity, 'overwrite' ];
+      }
+
+      if($this->doesEntityHaveAReference($entityType, $entityId)) {
+        return [ NULL, 'newids'];
+      }
+
+      if ($entity && $entity->bundle() != $bundle) {
+        return [ NULL, 'newids'];
+      }
+
+      if ($entity) {
+        $this->createGlobalEntityByImportingEntityAndGid($entity, $gid);
+        return [ $entity, 'overwrite' ];
+      }
     }
     catch (\Exception $e) {
       // Mute exception.
