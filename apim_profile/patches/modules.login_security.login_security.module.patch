--- modules/login_security/login_security.module   2023-01-03 14:21:29
+++ modules/login_security/login_security.module   2023-12-14 16:52:50
@@ -11,6 +11,7 @@
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\Component\Render\FormattableMarkup;
+use Drupal\ibm_apim\ApicType\ApicUser;
 
 /**
  * Implements hook_cron().
@@ -124,7 +125,7 @@
 function login_security_soft_block_validate(array $form, FormStateInterface $form_state) {
   $config = \Drupal::config('login_security.settings');
 
-  $variables = _login_security_get_variables_by_name($form_state->getValue('name'));
+  $variables = _login_security_get_variables_by_name($form_state->getValue('name'), $form_state->getValue('registry_url'));
   // Check for host login attempts: Soft.
   if ($variables['@soft_block_attempts'] >= 1) {
     if ($variables['@ip_current_count'] >= $variables['@soft_block_attempts']) {
@@ -145,12 +146,13 @@
   // Sanitize user input.
   // Setting $name=NULL will use the anonymous user:
   $name = !empty($form_state->getValue('name')) ? $form_state->getValue('name') : NULL;
+  $registry_url = !empty($form_state->getValue('registry_url')) ? $form_state->getValue('registry_url') : NULL;
 
   // Expire old tracked entries.
   _login_security_remove_events();
 
   // Populate variables to be used in any module message or login operation.
-  $variables = _login_security_get_variables_by_name($name);
+  $variables = _login_security_get_variables_by_name($name, $registry_url);
 
   // Detect an ongoing attack:
   // An ongoing attack counts the total failed login attempts and notifies
@@ -436,22 +438,31 @@
  * @return array
  *   login_security variables.
  */
-function _login_security_get_variables_by_name($name = NULL) {
+function _login_security_get_variables_by_name($name = NULL, $registry = NULL) {
   global $base_url;
 
   $config = \Drupal::config('login_security.settings');
-  $account = _login_security_user_load_by_name($name);
+  $apicUserStorage = \Drupal::service('ibm_apim.user_storage');
+  if ($registry !== NULL) {
+    $login_user = new ApicUser();
+    $login_user->setUsername($name);
+    $login_user->setApicUserRegistryUrl($registry);
+    $account = $apicUserStorage->load($login_user);
+  } else {
+    // fall through to the more risky user_load_by_name - this will fail if there are more than 1 matching user by name
+    $account = user_load_by_name($name);
+  }
   $ipaddress = \Drupal::request()->getClientIp();
   $request_time = \Drupal::time()->getRequestTime();
   $variables = [
     '@date' => \Drupal::service('date.formatter')->format($request_time),
     '@ip' => $ipaddress,
-    '@username' => $account->getAccountName(),
-    '@email' => $account->getEmail() ?? '',
-    '@uid' => $account->id(),
+    '@username' => $account ? $account->getAccountName() : null, 
+    '@email' => $account ? $account->getEmail() : null,
+    '@uid' => $account ? $account->id() : null,
     '@site' => \Drupal::config('system.site')->get('name'),
     '@uri' => $base_url,
-    '@edit_uri' => Url::fromRoute('entity.user.edit_form', ['user' => $account->id()], ['absolute' => TRUE])->toString(),
+    '@edit_uri' => $account ? Url::fromRoute('entity.user.edit_form', ['user' => $account->id()], ['absolute' => TRUE])->toString() : null,
     '@hard_block_attempts' => $config->get('host_wrong_count_hard'),
     '@soft_block_attempts' => $config->get('host_wrong_count'),
     '@user_block_attempts' => $config->get('user_wrong_count'),
