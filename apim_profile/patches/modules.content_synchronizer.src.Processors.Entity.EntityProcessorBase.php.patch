--- modules/content_synchronizer/src/Processors/Entity/EntityProcessorBase.php  2023-07-12 16:00:08
+++ modules/content_synchronizer/src/Processors/Entity/EntityProcessorBase.php     2023-07-12 16:00:35
@@ -339,6 +339,7 @@
   final public function import(array $dataToImport) {
     $gid = $dataToImport[ExportEntityWriter::FIELD_GID];
     $uuid = $dataToImport[ExportEntityWriter::FIELD_UUID];
+    $bundle = $dataToImport[ExportEntityWriter::FIELD_BUNDLE];

     // If the entity has already been imported, we don't have to do it again.
     $import = ImportProcessor::getCurrentImportProcessor()->getImport();
@@ -351,10 +352,10 @@
       ->getImport()
       ->tagHasImporting($gid);

+    $existingEntity = $this->getGlobalReferenceManager()->getExistingEntityByGidAndUuid($gid, $uuid, $bundle);
     // Get the previous entity by gid.
-    if ($existingEntity = $this->getGlobalReferenceManager()
-      ->getExistingEntityByGidAndUuid($gid, $uuid)
-    ) {
+    if(!empty($existingEntity) && $existingEntity[0]) {
+      $existingEntity = $existingEntity[0];
       if ($existingEntity) {
         $backup = clone($existingEntity);
       }
@@ -566,23 +567,27 @@
       $backup = clone($entityToImport);
     }

+    $typeId = $this->getGlobalReferenceManager()
+      ->getEntityTypeFromGid($data[ExportEntityWriter::FIELD_GID]);
+    $typeManager = \Drupal::entityTypeManager()->getDefinition($typeId);
+    $idKey = $typeManager->getKey('id');
     // Create Entity.
     if (is_null($entityToImport)) {
       try {
-        $typeId = $this->getGlobalReferenceManager()
-          ->getEntityTypeFromGid($data[ExportEntityWriter::FIELD_GID]);
         $defaultData = $this->getDefaultLanguageData($data);

         // Get type manager.
         /** @var \Drupal\Core\Entity\ContentEntityType $typeManager */
-        $typeManager = $this->entityTypeManager->getDefinition($typeId);
         $bundleKey = $typeManager->getKey('bundle');

-        $baseDefinitions = $this->entityFieldManager->getFieldDefinitions($typeId, $data[$bundleKey]);
+        $bundle = $data[$bundleKey] ?? $defaultData[$bundleKey];
+        $baseDefinitions = $this->entityFieldManager->getFieldDefinitions($typeId, $bundle);
         $createData = array_intersect_key($defaultData, $baseDefinitions);

-        unset($createData[$typeManager->getKey('id')]);
+        unset($createData[$idKey]);
         unset($createData['uuid']);
+        unset($createData['vid']);
+        unset($createData['nid']);

         $entityToImport = $this->entityTypeManager
           ->getStorage($typeId)
@@ -598,6 +603,11 @@

     // Properties not to import.
     $propertyIdsNotToImport = $this->getPropertiesIdsNotToExportList();
+    $removeProperties[] = "uuid";
+    $removeProperties[] = "nid";
+    $removeProperties[] = "vid";
+    $removeProperties[] = $idKey;
+    $propertyIdsNotToImport = array_merge($propertyIdsNotToImport, $removeProperties);

     // Get the existing translations.
     $alreadyExistingEntityTranslations = $this->getEntityTranslations($entityToImport);
@@ -698,7 +708,7 @@
    *   The entity processor manager service.
    */
   protected function getEntityProcessorManager() {
-    return $this->entityProcessorManager;
+    return $this->entityProcessorPluginManager;
   }

   /**
