<?php
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2015, 2020
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * IBM API Connect Integration
 *
 * Makes the API developer functions from a IBM API Connect management node
 * available in Drupal.
 */

/**
 * Implements hook_language_negotiation_info_alter().
 *
 * Remove the 'cache' setting from LOCALE_LANGUAGE_NEGOTIATION_BROWSER since
 * the code that utilizes this setting will in fact prevent browser negotiation.
 *
 * @param $negotiation_info
 */
function ibm_apim_language_negotiation_info_alter(&$negotiation_info) {
  unset($negotiation_info[LOCALE_LANGUAGE_NEGOTIATION_BROWSER]['cache']);
}

/**
 * Implementation of hook_help().
 *
 * @param $path
 * @param $arg
 * @return string
 */
function ibm_apim_help($path, $arg) {
  switch ($path) {
    case 'admin/help#api' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module provides tight integration with IBM API Connect.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Authentication') . '</dt>';
      $output .= '<dd>' . t("This module changes the login procedure so users are authenticated against IBM API Connect.") . '</dd>';
      $output .= '<dt>' . t('User Management') . '</dt>';
      $output .= '<dd>' . t("Developers already members of the provider organization in IBM API Connect will have IDs in this portal created for them automatically when they login.") . '</dd>';
      $output .= '<dt>' . t('Self sign up') . '</dt>';
      $output .= '<dd>' . t("It is possible for developers to sign up for an account in Drupal which will create an account and a developer organization in IBM API Connect.") . '</dd>';
      $output .= '<dt>' . t('Developer organization Management') . '</dt>';
      $output .= '<dd>' . t("It is possible to invite other users to your developer organization or remove existing ones.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function ibm_apim_permission() {
  return array(
    'administer APIC integration' => array(
      'title' => t('Administer APIC integration')
    )
  );
}

/**
 * Implementation of hook_preprocess_html().
 *
 * Set some css classes which we can use to format the html based on whether we are
 * showing a collection of nodes or a single node
 *
 * @param $vars
 */
function ibm_apim_preprocess_html(&$vars) {
  // Add class for whether we are a teaser of full detail view
  // $vars['classes_array'][] = 'node-view-' . $vars['view_mode'];
  $path = drupal_get_path_alias();
  if (isset($path)) {
    $aliases = explode('/', $path);
    if ($aliases[0] == "application" || $aliases[0] == "api" || $aliases[0] == "product" || $aliases[0] == "devorg") {
      if (isset($aliases[1])) {
        $vars['classes_array'][] = drupal_clean_css_identifier('full-mode');
      }
      else {
        $vars['classes_array'][] = drupal_clean_css_identifier('teaser-mode');
      }
    }
  }
}

/**
 * Implements hook_page_build().
 *
 * @param $page
 */
function ibm_apim_page_build(&$page) {
  // needed to try and fix some jquery issues
  drupal_add_library('system', 'ui');
  drupal_add_js('misc/jquery.ba-bbq.js');
}

/**
 * Implementation of hook_theme().
 *
 * Tell Drupal that we have template files for the content types that we define in the module.
 * A theme can override these template files if it wishes to do so, but we include them
 * in our module so that the nodes render correctly when used with a theme that doesn't know
 * about them.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function ibm_apim_theme($existing, $type, $theme, $path) {
  $theme = array();
  $templates_path = drupal_get_path('module', 'ibm_apim') . '/templates';
  $theme['node__api'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api',
    'path' => $templates_path
  );
  $theme['node__api__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api--teaser',
    'path' => $templates_path
  );
  $theme['node__api__embedded'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api--embedded',
    'path' => $templates_path
  );
  $theme['node__api__inner'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--api--inner',
    'path' => $templates_path
  );
  $theme['node__devorg'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--devorg',
    'path' => $templates_path
  );
  $theme['node__devorg__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--devorg--teaser',
    'path' => $templates_path
  );
  $theme['node__application'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--application',
    'path' => $templates_path
  );
  $theme['node__application__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--application--teaser',
    'path' => $templates_path
  );
  $theme['node__product'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--product',
    'path' => $templates_path
  );
  $theme['node__product__teaser'] = array(
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--product--teaser',
    'path' => $templates_path
  );
  return $theme;
}

/**
 * Implementation of hook_form().
 * Create a new developer org.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function ibm_apim_create_developer_org_form($form, &$form_state) {
  $ibm_apim_allow_devorg_creation = variable_get('ibm_apim_allow_devorg_creation', TRUE);
  if ($ibm_apim_allow_devorg_creation == 1) {
    $form = array();
    $form['orgname'] = array(
      '#type' => 'textfield',
      '#title' => t('Organization name'),
      '#size' => 25,
      '#maxlength' => 50,
      '#required' => TRUE
    );
    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['#submit'] = array('ibm_apim_create_developer_org_form_submit_handler');
    $form['#attributes']['class'] = 'reg-form';
    return $form;
  }
  else {
    drupal_set_message(t('Access Denied.'), 'error');
    return array();
  }
}

/**
 * Submit handler for the create developer org form.
 *
 * @param $form
 * @param $form_state
 */
function ibm_apim_create_developer_org_form_submit_handler($form, &$form_state) {
  $orgname = filter_xss($form_state['values']['orgname']);
  $ibm_apim_allow_devorg_creation = variable_get('ibm_apim_allow_devorg_creation', TRUE);
  if ($ibm_apim_allow_devorg_creation == 1) {
    // update APIm
    $url = '/v1/portal/orgs';
    $data = array("name" => $orgname);
    $result = ibm_apim_post($url, json_encode($data));
    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      drupal_set_message(t('Developer organization created successfully.'));
      $apim_session = &_ibm_apim_get_apim_session();
      unset($apim_session['developer_organizations']);
      _ibm_apim_refresh_user_data();
      // clear cache
      cache_clear_all();
      $form_state['redirect'] = '<front>';
    }
    else {
      module_load_include('pages.inc', 'user');
      drupal_set_message(t('Failed to create developer organization.'), 'error');
      watchdog('ibm_apim_create_developer_org_form_submit_handler', 'Failed to create developer organization. response: %response', array(
        '%response' => serialize($result)
      ), WATCHDOG_NOTICE);
      user_logout();
      $form_state['redirect'] = '<front>';
    }
  }
  else {
    $form_state['redirect'] = '<front>';
  }
}

/**
 * Implementation of hook_form().
 * The module devel admin configuration settings.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function ibm_apim_devel_config_form($form, &$form_state) {
  $form = array();

  $form['ibm_apim_insecure'] = array(
    '#type' => 'checkbox',
    '#title' => t('Accept Self-Signed SSL Certificates (Developer Mode)'),
    '#default_value' => variable_get('ibm_apim_insecure', FALSE),
    '#weight' => -4,
    '#description' => t('WARNING: This should only be used for testing and development purposes as it leaves you vulnerable to a man-in-the-middle attack. Check this if the API Manager uses a self-signed SSL certificate.')
  );

  $form['ibm_apim_disable_etags'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable background sync ETags (Developer Mode)'),
    '#default_value' => variable_get('ibm_apim_disable_etags', FALSE),
    '#weight' => -4,
    '#description' => t('WARNING: This should only be used for testing and development purposes as it increases the load on the Management Node.')
  );

  $form['ibm_apim_disable_highlightjs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable HighlightJS for APIs'),
    '#default_value' => variable_get('ibm_apim_disable_highlightjs', FALSE),
    '#weight' => -4,
    '#description' => t('This turns off highlightJS syntax highlighting for APIs which can speed up the rendering, but at the expense of aesthetics.')
  );

  $form['ibm_apim_cron_drush'] = array(
    '#type' => 'checkbox',
    '#title' => t('Fork drush commands for background sync'),
    '#default_value' => variable_get('ibm_apim_cron_drush', FALSE),
    '#weight' => -4,
    '#description' => t('WARNING: This should only be used if directed to do so by IBM Support. Disabled by default.')
  );

  $form['ibm_apim_test_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Test Username'),
    '#description' => t('The username to use as the Application Developer in the IBM APIM Tests accessed from Configuration->Development->Testing'),
    '#required' => FALSE,
    '#weight' => 5,
    '#default_value' => variable_get('ibm_apim_test_username')
  );

  $form['ibm_apim_test_password'] = array(
    '#type' => 'password',
    '#title' => t('Test Password'),
    '#description' => t('The password to use for the Application Developer specified above in the IBM APIM Tests.'),
    '#required' => FALSE,
    '#weight' => 6,
    '#default_value' => variable_get('ibm_apim_test_password')
  );

  $form['ibm_apim_debug_trace'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Debug Level Trace'),
    '#default_value' => variable_get('ibm_apim_debug_trace', FALSE),
    '#weight' => -4,
    '#description' => t('WARNING: This should only be used for debugging purposes as it increases the logging load on the Developer Portal.')
  );

  $form['ibm_apim_insecure_token_validation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable Insecure Token Validation'),
    '#default_value' => variable_get('ibm_apim_insecure_token_validation', FALSE),
    '#weight' => -4,
    '#description' => t('Disable validation of activation tokens. In some special configurations, the Portal\'s understanding of the management server URL (as set by set_apim_host) might be different to the URL configured in the management server. This should be corrected, but if that is impossible then this setting can be used to disable the validation of activation tokesn issued by the management server. WARNING: Enablng this setting may leave you vulnerable to malicious token manipulation attacks.')
  );

  // Make it a settings form.
  $form = system_settings_form($form);

  return $form;
}

/**
 * Implementation of hook_form().
 * The module admin configuration settings.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function ibm_apim_config_form($form, &$form_state) {
  $readonly = variable_get('ibm_apim_readonly_idp', 0);
  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
  $form = array();
  $form['apim_host'] = array(
    '#markup' => t('IBM API Connect Management Service hostname: @hostname', array(
      '@hostname' => variable_get('ibm_apim_host', '')
    )),
    '#weight' => -20
  );
  $form['config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['config']['ibm_apim_autocreate_apiforum'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically create a forum per API'),
    '#default_value' => variable_get('ibm_apim_autocreate_apiforum', TRUE),
    '#weight' => -15,
    '#description' => t('If checked then a new forum will be created for each API that is available to a developer. Note that the forums will only be created when a developer first sees the APIs listed in the Developer Portal.')
  );

  $form['config']['ibm_apim_show_placeholder_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show placeholder images for Apps and APIs'),
    '#default_value' => variable_get('ibm_apim_show_placeholder_images', 1),
    '#weight' => -14,
    '#description' => t('If checked then a placeholder image will be shown for the Applications and APIs that do not have one explicitly set. Uncheck to not show an image at all.')
  );

  $form['config']['ibm_apim_show_register_app'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show links to register applications'),
    '#default_value' => variable_get('ibm_apim_show_register_app', 1),
    '#weight' => -13,
    '#description' => t('If unchecked then all links to register new applications will be hidden. Applications will have to be registered externally to this portal.')
  );

  $form['config']['ibm_apim_show_versions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show version numbers for APIs and Products'),
    '#default_value' => variable_get('ibm_apim_show_versions', 1),
    '#weight' => -12,
    '#description' => t('If unchecked then version numbers will not be displayed for APIs or Products.')
  );

  $form['config']['ibm_apim_enable_api_test'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow live testing of APIs'),
    '#default_value' => variable_get('ibm_apim_enable_api_test', 1),
    '#weight' => -11,
    '#description' => t('If unchecked then interactive testing of APIs will be disabled.')
  );

  $form['config']['ibm_apim_autotag_with_phase'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically tag APIs with their phase'),
    '#default_value' => variable_get('ibm_apim_autotag_with_phase', 1),
    '#weight' => -10,
    '#description' => t('If checked then APIs will be automatically tagged with their lifecycle "Phase".')
  );

  $form['config']['ibm_apim_show_cors_warnings'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display CORS warnings for unenforced APIs'),
    '#default_value' => variable_get('ibm_apim_show_cors_warnings', 1),
    '#weight' => -10,
    '#description' => t('If checked then unenforced APIs will have a warning about needing to check CORS (Cross-Origin Response Sharing) has been implemented. Uncheck to suppress the warnings.')
  );

  $form['config']['ibm_apim_show_analytics'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display Analytics'),
    '#default_value' => variable_get('ibm_apim_show_analytics', 1),
    '#weight' => -10,
    '#description' => t('Display API Consumer analytics in the portal. If unchecked then all analytics links will be removed.')
  );

  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
  $pdur_analytics_enabled = variable_get('ibm_apim_pdur_analytics', 0);
  if ($ibm_apim_social_login == 1 && $pdur_analytics_enabled == 0) {
    $form['config']['ibm_apim_show_analytics']['#default_value'] = 0;
    $form['config']['ibm_apim_show_analytics']['#disabled'] = TRUE;
  }

  $form['config']['ibm_apim_soap_swagger_download'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow Download of Open API documents for SOAP APIs'),
    '#default_value' => variable_get('ibm_apim_soap_swagger_download', 0),
    '#weight' => -10,
    '#description' => t('If checked API consumers will be able to download the Open API documents for SOAP APIs as well as REST APIs.')
  );

  $form['config']['ibm_apim_allow_application_images'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow the upload of custom application images'),
    '#default_value' => variable_get('ibm_apim_allow_application_images', 1),
    '#weight' => -10,
    '#description' => t('If checked API consumers will be able to upload custom images for their applications.')
  );

  $form['config']['ibm_apim_enable_version_page'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable APIC version page'),
    '#default_value' => variable_get('ibm_apim_enable_version_page', 0),
    '#weight' => -10,
    '#description' => t('If checked then the APIC version is available from /ibm_apim/version.')
  );

  // code snippets options
  $form['categories'] = array(
    '#type' => 'fieldset',
    '#title' => t('Categories'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['categories']['ibm_apim_allow_categories'] = array(
    '#type' => 'checkbox',
    '#title' => t('Tag APIs and Products using provided categories'),
    '#default_value' => variable_get('ibm_apim_allow_categories', TRUE),
    '#weight' => -15,
    '#description' => t('If checked then APIs and Products will be tagged with the categories defined within them.')
  );
  $form['categories']['ibm_apim_create_taxonomies_from_categories'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create taxonomies for categories if they do not already exist'),
    '#default_value' => variable_get('ibm_apim_create_taxonomies_from_categories', FALSE),
    '#weight' => -14,
    '#description' => t('If checked then new taxonomies will be created to match the provided categories.')
  );

  // developer organization options
  $form['devorg'] = array(
    '#type' => 'fieldset',
    '#title' => t('Applications'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['devorg']['ibm_apim_allow_devorg_creation'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow users to create additional developer organizations'),
    '#default_value' => variable_get('ibm_apim_allow_devorg_creation', TRUE),
    '#weight' => -15,
    '#description' => t('If enabled then users will be allowed to create additional developer organizations. Note that self service onboarding must also be enabled in API Manager catalog settings.')
  );
  $form['devorg']['ibm_apim_allow_devorg_rename'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow developer organization owners to rename their organization'),
    '#default_value' => variable_get('ibm_apim_allow_devorg_rename', TRUE),
    '#weight' => -14,
    '#description' => t('If this field is checked then developer organization owners will be able to rename their developer organizations.')
  );
  $form['devorg']['ibm_apim_allow_devorg_deletion'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow users to delete their developer organizations'),
    '#default_value' => variable_get('ibm_apim_allow_devorg_deletion', TRUE),
    '#weight' => -13,
    '#description' => t('If enabled then users will be allowed to delete their developer organizations.')
  );
  $form['devorg']['ibm_apim_allow_devorg_ownerchange'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow users to change ownership of their developer organizations'),
    '#default_value' => variable_get('ibm_apim_allow_devorg_ownerchange', TRUE),
    '#weight' => -13,
    '#description' => t('If enabled then users will be allowed to change the ownership of their developer organizations.')
  );
  $form['devorg']['ibm_apim_allow_user_deletion'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow users to delete their accounts'),
    '#default_value' => variable_get('ibm_apim_allow_user_deletion', TRUE),
    '#weight' => -12,
    '#description' => t('If enabled then users will be allowed to delete their accounts.')
  );

  // application options
  $form['applications'] = array(
    '#type' => 'fieldset',
    '#title' => t('Applications'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['applications']['ibm_apim_allow_clientidreset'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow developer organization members to reset the application Client ID'),
    '#default_value' => variable_get('ibm_apim_allow_clientidreset', TRUE),
    '#weight' => -15,
    '#description' => t('If checked then authorised developer organization members will be allowed to reset the client IDs')
  );
  $form['applications']['ibm_apim_allow_clientsecretreset'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow developer organization members to reset the application Client Secret'),
    '#default_value' => variable_get('ibm_apim_allow_clientsecretreset', TRUE),
    '#weight' => -14,
    '#description' => t('If checked then authorised developer organization members will be allowed to reset the client secrets')
  );
  $form['applications']['ibm_apim_allow_newcreds'] = array(
    '#type' => 'checkbox',
    '#title' => t('Allow developer organization members to create additional credentials'),
    '#default_value' => variable_get('ibm_apim_allow_newcreds', TRUE),
    '#weight' => -14,
    '#description' => t('If checked then authorised developer organization members will be allowed to create additional application credentials.')
  );

  // code snippets options
  $form['codesnippets'] = array(
    '#type' => 'fieldset',
    '#title' => t('API Code Snippets'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['codesnippets']['ibm_apim_soap_codesnippets'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display code snippets for SOAP APIs as well as REST APIs'),
    '#default_value' => variable_get('ibm_apim_soap_codesnippets', FALSE),
    '#weight' => -1,
    '#description' => t('Code snippets are displayed for REST APIs, if this field is checked then they will also be displayed for SOAP APIs. The code snippets will use raw HTTP and not a client SOAP library.')
  );
  $form['codesnippets']['intro'] = array(
    '#markup' => '<p>' . t('Select which languages are included in the code snippets for APIs.') . '</p>',
    '#weight' => 0
  );
  $form['codesnippets']['ibm_apim_codesnippets_curl'] = array(
    '#type' => 'checkbox',
    '#title' => t('cURL'),
    '#default_value' => variable_get('ibm_apim_codesnippets_curl', 1),
    '#weight' => 1
  );
  $form['codesnippets']['ibm_apim_codesnippets_ruby'] = array(
    '#type' => 'checkbox',
    '#title' => t('Ruby'),
    '#default_value' => variable_get('ibm_apim_codesnippets_ruby', 1),
    '#weight' => 2
  );
  $form['codesnippets']['ibm_apim_codesnippets_python'] = array(
    '#type' => 'checkbox',
    '#title' => t('Python'),
    '#default_value' => variable_get('ibm_apim_codesnippets_python', 1),
    '#weight' => 3
  );
  $form['codesnippets']['ibm_apim_codesnippets_php'] = array(
    '#type' => 'checkbox',
    '#title' => t('PHP'),
    '#default_value' => variable_get('ibm_apim_codesnippets_php', 1),
    '#weight' => 4
  );
  $form['codesnippets']['ibm_apim_codesnippets_java'] = array(
    '#type' => 'checkbox',
    '#title' => t('Java'),
    '#default_value' => variable_get('ibm_apim_codesnippets_java', 1),
    '#weight' => 5
  );
  $form['codesnippets']['ibm_apim_codesnippets_node'] = array(
    '#type' => 'checkbox',
    '#title' => t('Node'),
    '#default_value' => variable_get('ibm_apim_codesnippets_node', 1),
    '#weight' => 6
  );
  $form['codesnippets']['ibm_apim_codesnippets_go'] = array(
    '#type' => 'checkbox',
    '#title' => t('Go'),
    '#default_value' => variable_get('ibm_apim_codesnippets_go', 1),
    '#weight' => 7
  );
  $form['codesnippets']['ibm_apim_codesnippets_swift'] = array(
    '#type' => 'checkbox',
    '#title' => t('Swift'),
    '#default_value' => variable_get('ibm_apim_codesnippets_swift', 1),
    '#weight' => 8
  );
  $form['codesnippets']['ibm_apim_codesnippets_c'] = array(
    '#type' => 'checkbox',
    '#title' => t('C'),
    '#default_value' => variable_get('ibm_apim_codesnippets_c', 0),
    '#weight' => 9
  );
  $form['codesnippets']['ibm_apim_codesnippets_csharp'] = array(
    '#type' => 'checkbox',
    '#title' => t('C#'),
    '#default_value' => variable_get('ibm_apim_codesnippets_csharp', 0),
    '#weight' => 10
  );

  // user registration options
  $form['userreg'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Registration'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );
  $form['userreg']['intro'] = array(
    '#markup' => '<p>' . t('The settings below allow you to customize what fields are shown during user registration.') . '</p>'
  );

  $form['userreg']['fielddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('fieldDiv'))
  );
  $form['userreg']['reqddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredDiv'))
  );
  if ($readonly != 1 && $ibm_apim_social_login != 1) {

    $form['userreg']['fielddiv']['emaildiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv'))
    );
    $form['userreg']['fielddiv']['emaildiv']['ibm_apim_email_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Email'),
      '#default_value' => variable_get('ibm_apim_email_show', 1),
      '#weight' => -3
    );
    $form['userreg']['reqddiv']['emaildiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv'))
    );
    $form['userreg']['reqddiv']['emaildiv']['ibm_apim_email_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_email_reqd', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_email_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['emaildiv']['ibm_apim_email_as_username'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Email as username'),
      '#default_value' => variable_get('ibm_apim_email_as_username', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_email_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['emaildiv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');
  }

  // if using email as the username then disable the username field,
  // if registry is readonly then force field to be on but disabled
  $current_email_as_user = variable_get('ibm_apim_email_as_username');
  if ($readonly == 1) {
    $user_defvalue = 1;
    $user_reqdvalue = 1;
    $user_disabled = TRUE;
  }
  elseif ($current_email_as_user == 1) {
    $user_defvalue = 0;
    $user_reqdvalue = 0;
    $user_disabled = TRUE;
  }
  else {
    $user_defvalue = 1;
    $user_reqdvalue = 1;
    $user_disabled = FALSE;
  }
  $form['userreg']['fielddiv']['usernamediv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('showFieldDiv'))
  );
  $form['userreg']['fielddiv']['usernamediv']['ibm_apim_username_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Username'),
    '#default_value' => $user_defvalue,
    '#disabled' => $user_disabled,
    '#weight' => -3
  );
  $form['userreg']['reqddiv']['usernamediv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredFieldDiv'))
  );
  $form['userreg']['reqddiv']['usernamediv']['ibm_apim_username_reqd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => $user_reqdvalue,
    '#disabled' => $user_disabled,
    '#attributes' => array('class' => array('requiredCheckbox'))
  );
  $form['userreg']['reqddiv']['usernamediv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');

  $form['userreg']['fielddiv']['passworddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('showFieldDiv'))
  );
  $form['userreg']['fielddiv']['passworddiv']['ibm_apim_password_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Password and Confirm password'),
    '#default_value' => 1,
    '#disabled' => TRUE,
    '#weight' => -3
  );
  $form['userreg']['reqddiv']['passworddiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredFieldDiv'))
  );
  $form['userreg']['reqddiv']['passworddiv']['ibm_apim_password_reqd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => 1,
    '#disabled' => TRUE,
    '#attributes' => array('class' => array('requiredCheckbox'))
  );
  $form['userreg']['reqddiv']['passworddiv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');

  $form['userreg']['fielddiv']['orgdiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('showFieldDiv'))
  );
  $form['userreg']['fielddiv']['orgdiv']['ibm_apim_organization_show'] = array(
    '#type' => 'checkbox',
    '#title' => t('Developer organization'),
    '#default_value' => variable_get('ibm_apim_organization_show', 1),
    '#weight' => -3
  );
  $form['userreg']['reqddiv']['orgdiv'] = array(
    '#type' => 'container',
    '#attributes' => array('class' => array('requiredFieldDiv'))
  );
  $form['userreg']['reqddiv']['orgdiv']['ibm_apim_organization_reqd'] = array(
    '#type' => 'checkbox',
    '#title' => t('Required'),
    '#default_value' => variable_get('ibm_apim_organization_reqd', 1),
    '#states' => array('visible' => array(':input[name="ibm_apim_organization_show"]' => array('checked' => TRUE))),
    '#attributes' => array('class' => array('requiredCheckbox'))
  );
  $form['userreg']['reqddiv']['orgdiv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');

  if ($readonly != 1) {
    $form['userreg']['fielddiv']['firstnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv'))
    );
    $form['userreg']['fielddiv']['firstnamediv']['ibm_apim_firstname_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('First name'),
      '#default_value' => variable_get('ibm_apim_firstname_show', 1),
      '#weight' => -3
    );
    $form['userreg']['reqddiv']['firstnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv'))
    );
    $form['userreg']['reqddiv']['firstnamediv']['ibm_apim_firstname_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_firstname_reqd', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_firstname_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['firstnamediv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');

    $form['userreg']['fielddiv']['lastnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv'))
    );
    $form['userreg']['fielddiv']['lastnamediv']['ibm_apim_lastname_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Last name'),
      '#default_value' => variable_get('ibm_apim_lastname_show', 1),
      '#weight' => -3
    );
    $form['userreg']['reqddiv']['lastnamediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv'))
    );
    $form['userreg']['reqddiv']['lastnamediv']['ibm_apim_lastname_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_lastname_reqd', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_lastname_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['lastnamediv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');
  }

  if ($readonly != 1) {
    $form['userreg']['fielddiv']['companydiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv'))
    );
    $form['userreg']['fielddiv']['companydiv']['ibm_apim_company_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Company Name'),
      '#default_value' => variable_get('ibm_apim_company_show', 1),
      '#weight' => -3
    );
    $form['userreg']['reqddiv']['companydiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv'))
    );
    $form['userreg']['reqddiv']['companydiv']['ibm_apim_company_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_company_reqd', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_company_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['companydiv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');

    $form['userreg']['fielddiv']['phonediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv'))
    );
    $form['userreg']['fielddiv']['phonediv']['ibm_apim_phone_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Phone number'),
      '#default_value' => variable_get('ibm_apim_phone_show', 1),
      '#weight' => -3
    );
    $form['userreg']['reqddiv']['phonediv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv'))
    );
    $form['userreg']['reqddiv']['phonediv']['ibm_apim_phone_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_phone_reqd', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_phone_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['phonediv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');

    $form['userreg']['fielddiv']['addressdiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('showFieldDiv'))
    );
    $form['userreg']['fielddiv']['addressdiv']['ibm_apim_address_show'] = array(
      '#type' => 'checkbox',
      '#title' => t('Address'),
      '#default_value' => variable_get('ibm_apim_address_show', 1),
      '#weight' => -3
    );
    $form['userreg']['reqddiv']['addressdiv'] = array(
      '#type' => 'container',
      '#attributes' => array('class' => array('requiredFieldDiv'))
    );
    $form['userreg']['reqddiv']['addressdiv']['ibm_apim_address_reqd'] = array(
      '#type' => 'checkbox',
      '#title' => t('Required'),
      '#default_value' => variable_get('ibm_apim_address_reqd', 1),
      '#states' => array('visible' => array(':input[name="ibm_apim_address_show"]' => array('checked' => TRUE))),
      '#attributes' => array('class' => array('requiredCheckbox'))
    );
    $form['userreg']['reqddiv']['addressdiv']['spacer'] = array('#markup' => '<div class="spacerDiv">&nbsp;</div>');
  }

  if (module_exists('legal')) {
    $form['userreg']['tsandcs'] = array(
      '#markup' => '<p>' . t('To configure the display of terms and conditions during user registration <a href="@url">click here</a>.', array(
          '@url' => url('admin/config/people/legal')
        )) . '</p>'
    );
  }
  if (module_exists('captcha')) {
    $form['userreg']['captcha'] = array(
      '#markup' => '<p>' . t('To configure the use of CAPTCHAs during user login or registration <a href="@url">click here</a>.', array(
          '@url' => url('admin/config/people/captcha')
        )) . '</p>'
    );
  }

  $form['#attached']['js'][] = array(
    'data' => 'jQuery(document).ready(function(){
                    jQuery("#edit-ibm-apim-email-as-username").click(toggleemailasuer);
                    function toggleemailasuer() {
                       if(this.checked) {
                         jQuery("#edit-ibm-apim-username-show").prop("checked", false);
                         jQuery("#edit-ibm-apim-username-reqd").prop("checked", false);
                         jQuery("#edit-ibm-apim-username-show").attr("disabled", true);
                         jQuery("#edit-ibm-apim-username-reqd").attr("disabled", true);
                       } else {
                         jQuery("#edit-ibm-apim-username-show").prop("checked", true);
                         jQuery("#edit-ibm-apim-username-reqd").prop("checked", true);
                         jQuery("#edit-ibm-apim-username-show").removeAttr("disabled");
                         jQuery("#edit-ibm-apim-username-reqd").removeAttr("disabled");
                       }
                    }
                    jQuery("#edit-ibm-apim-email-show").click(toggleemail);
                    function toggleemail() {
                       if(!this.checked) {
                         jQuery("#edit-ibm-apim-email-as-username").prop("checked", false);
                         jQuery(".form-item-ibm-apim-email-as-username").hide();
                         jQuery("#edit-ibm-apim-username-show").prop("checked", true);
                         jQuery(".form-item-ibm-apim-username-reqd").show();
                         jQuery("#edit-ibm-apim-username-reqd").prop("checked", true);
                       }
                    }
                    jQuery("#edit-ibm-apim-username-show").click(toggleuser);
                    function toggleuser() {
                       if(!this.checked) {
                         jQuery("#edit-ibm-apim-email-show").prop("checked", true);
                         jQuery(".form-item-ibm-apim-email-reqd").show();
                         jQuery("#edit-ibm-apim-email-reqd").prop("checked", true);
                         jQuery("#edit-ibm-apim-email-as-username").prop("checked", true);
                         jQuery(".form-item-ibm-apim-email-as-username").show();
                       }
                    }
        });',
    'type' => 'inline'
  );

  // Make it a settings form.
  $form = system_settings_form($form);
  // But also do some custom submission handling.
  $form['#submit'][] = 'ibm_apim_config_form_submit';

  return $form;
}

/**
 * Submission handler for the config settings form.
 *
 * @param $form
 * @param $form_state
 */
function ibm_apim_config_form_submit($form, &$form_state) {
  // have to set these ourselves as the JS in the form seems to mess up the ['values'] array
  // so the variables arent set automagically by drupal
  if (isset($form_state['input']['ibm_apim_username_show'])) {
    variable_set('ibm_apim_username_show', $form_state['input']['ibm_apim_username_show']);
  }
  if (isset($form_state['input']['ibm_apim_email_show'])) {
    variable_set('ibm_apim_email_show', $form_state['input']['ibm_apim_email_show']);
  }
  if (isset($form_state['input']['ibm_apim_username_reqd'])) {
    variable_set('ibm_apim_username_reqd', $form_state['input']['ibm_apim_username_reqd']);
  }
  if (isset($form_state['input']['ibm_apim_email_reqd'])) {
    variable_set('ibm_apim_email_reqd', $form_state['input']['ibm_apim_email_reqd']);
  }
  if (isset($form_state['input']['ibm_apim_email_as_username'])) {
    variable_set('ibm_apim_email_as_username', $form_state['input']['ibm_apim_email_as_username']);
  }

  $ibm_apim_first_name_show = variable_get('ibm_apim_firstname_show', 1);
  $ibm_apim_last_name_show = variable_get('ibm_apim_lastname_show', 1);
  $ibm_apim_phone_show = variable_get('ibm_apim_phone_show', 0);
  $ibm_apim_company_show = variable_get('ibm_apim_company_show', 0);
  $ibm_apim_developer_organization_show = variable_get('ibm_apim_organization_show', 1);
  $ibm_apim_address_show = variable_get('ibm_apim_address_show', 0);

  $ibm_apim_first_name_reqd = variable_get('ibm_apim_firstname_reqd', 1);
  $ibm_apim_last_name_reqd = variable_get('ibm_apim_lastname_reqd', 1);
  $ibm_apim_phone_reqd = variable_get('ibm_apim_phone_reqd', 0);
  $ibm_apim_company_reqd = variable_get('ibm_apim_company_reqd', 0);
  $ibm_apim_developer_organization_reqd = variable_get('ibm_apim_organization_reqd', 1);
  $ibm_apim_address_reqd = variable_get('ibm_apim_address_reqd', 0);

  if ($ibm_apim_first_name_show == 1) {
    _ibm_apim_show_first_name_field();
  }
  else {
    _ibm_apim_hide_first_name_field();
    variable_set('ibm_apim_firstname_reqd', 0);
  }
  if ($ibm_apim_last_name_show == 1) {
    _ibm_apim_show_last_name_field();
  }
  else {
    _ibm_apim_hide_last_name_field();
    variable_set('ibm_apim_lastname_reqd', 0);
  }
  if ($ibm_apim_developer_organization_show == 1) {
    _ibm_apim_show_developer_organization_field();
  }
  else {
    _ibm_apim_hide_developer_organization_field();
    variable_set('ibm_apim_organization_reqd', 0);
  }
  if ($ibm_apim_phone_show == 1) {
    _ibm_apim_show_phone_field();
  }
  else {
    _ibm_apim_hide_phone_field();
    variable_set('ibm_apim_phone_reqd', 0);
  }
  if ($ibm_apim_company_show == 1) {
    _ibm_apim_show_company_field();
  }
  else {
    _ibm_apim_hide_company_field();
    variable_set('ibm_apim_company_reqd', 0);
  }
  if ($ibm_apim_address_show == 1) {
    _ibm_apim_show_address_field();
  }
  else {
    _ibm_apim_hide_address_field();
    variable_set('ibm_apim_address_reqd', 0);
  }

  // toggle whether required or not
  _ibm_apim_toggle_field_required("field_first_name", $ibm_apim_first_name_reqd);
  _ibm_apim_toggle_field_required("field_last_name", $ibm_apim_last_name_reqd);
  _ibm_apim_toggle_field_required("field_developer_organization", $ibm_apim_developer_organization_reqd);
  _ibm_apim_toggle_field_required("field_phone", $ibm_apim_phone_reqd);
  _ibm_apim_toggle_field_required("field_company", $ibm_apim_company_reqd);
  _ibm_apim_toggle_field_required("field_address", $ibm_apim_address_reqd);

  $codesnippets = array(
    'curl' => variable_get('ibm_apim_codesnippets_curl', 1),
    'ruby' => variable_get('ibm_apim_codesnippets_ruby', 1),
    'python' => variable_get('ibm_apim_codesnippets_python', 1),
    'php' => variable_get('ibm_apim_codesnippets_php', 1),
    'java' => variable_get('ibm_apim_codesnippets_java', 1),
    'node' => variable_get('ibm_apim_codesnippets_node', 1),
    'go' => variable_get('ibm_apim_codesnippets_go', 1),
    'swift' => variable_get('ibm_apim_codesnippets_swift', 1),
    'c' => variable_get('ibm_apim_codesnippets_c', 0),
    'csharp' => variable_get('ibm_apim_codesnippets_csharp', 0)
  );
  variable_set('ibm_apim_codesnippets', $codesnippets);
}

/**
 * hide all fields other than username and password for readonly registries
 */
function _ibm_apim_hide_extra_userfields($registryType = NULL) {

  // Handle fields that are common to ldap and authUrl registries
  variable_set('ibm_apim_phone_show', 0);
  variable_set('ibm_apim_company_show', 0);
  variable_set('ibm_apim_address_show', 0);
  variable_set('ibm_apim_phone_reqd', 0);
  variable_set('ibm_apim_company_reqd', 0);
  variable_set('ibm_apim_address_reqd', 0);
  variable_set('ibm_apim_email_as_username', 0);
  _ibm_apim_hide_company_field();
  _ibm_apim_hide_address_field();
  _ibm_apim_hide_phone_field();
  _ibm_apim_toggle_field_required("field_phone", 0);
  _ibm_apim_toggle_field_required("field_company", 0);
  _ibm_apim_toggle_field_required("field_address", 0);

  // Show first name and last name fields for authUrl idp (devportal/issues/1821)
  if ($registryType == "authUrl") {
    variable_set('ibm_apim_firstname_show', 1);
    variable_set('ibm_apim_lastname_show', 1);
    variable_set('ibm_apim_firstname_reqd', 1);
    variable_set('ibm_apim_lastname_reqd', 1);
    _ibm_apim_show_first_name_field();
    _ibm_apim_show_last_name_field();
    _ibm_apim_toggle_field_required("field_first_name", 1);
    _ibm_apim_toggle_field_required("field_last_name", 1);
  }
  // Keep the existing behaviour for ldap
  else {
    variable_set('ibm_apim_firstname_show', 0);
    variable_set('ibm_apim_lastname_show', 0);
    variable_set('ibm_apim_firstname_reqd', 0);
    variable_set('ibm_apim_lastname_reqd', 0);
    _ibm_apim_hide_first_name_field();
    _ibm_apim_hide_last_name_field();
    _ibm_apim_toggle_field_required("field_first_name", 0);
    _ibm_apim_toggle_field_required("field_last_name", 0);
  }

  // shouldnt need to set these but just in case:
  variable_set('ibm_apim_username_show', 1);
  variable_set('ibm_apim_username_reqd', 1);
  variable_set('ibm_apim_email_show', 0);
  variable_set('ibm_apim_email_reqd', 0);
  variable_set('ibm_apim_password_show', 1);
  variable_set('ibm_apim_password_reqd', 1);
}

/**
 * reverse of the hide method above
 * unlikely to ever get run since only for when switch from readonly IDP to a writable one
 * which isn't hugely likely, but for completeness....
 */
function _ibm_apim_show_default_extra_userfields() {
  variable_set('ibm_apim_firstname_show', 1);
  variable_set('ibm_apim_lastname_show', 1);
  variable_set('ibm_apim_phone_show', 0);
  variable_set('ibm_apim_company_show', 0);
  variable_set('ibm_apim_address_show', 0);
  variable_set('ibm_apim_firstname_reqd', 1);
  variable_set('ibm_apim_lastname_reqd', 1);
  variable_set('ibm_apim_phone_reqd', 0);
  variable_set('ibm_apim_company_reqd', 0);
  variable_set('ibm_apim_address_reqd', 0);
  variable_set('ibm_apim_email_as_username', 1);
  _ibm_apim_show_first_name_field();
  _ibm_apim_show_last_name_field();
  _ibm_apim_hide_company_field();
  _ibm_apim_hide_address_field();
  _ibm_apim_hide_phone_field();
  _ibm_apim_toggle_field_required("field_first_name", 1);
  _ibm_apim_toggle_field_required("field_last_name", 1);
  _ibm_apim_toggle_field_required("field_phone", 0);
  _ibm_apim_toggle_field_required("field_company", 0);
  _ibm_apim_toggle_field_required("field_address", 0);

  // shouldnt need to set these but just in case:
  variable_set('ibm_apim_username_show', 0);
  variable_set('ibm_apim_username_reqd', 0);
  variable_set('ibm_apim_email_show', 1);
  variable_set('ibm_apim_email_reqd', 1);
  variable_set('ibm_apim_password_show', 1);
  variable_set('ibm_apim_password_reqd', 1);
}

/**
 * Implementation of hook_init().
 */
function ibm_apim_init() {
  // not during install
  if (variable_get('install_task') != 'done') {
    return;
  }
  else {
    drupal_add_css(drupal_get_path('module', 'ibm_apim') . '/css/ibm_apim.css');

    if (isset($_SERVER["REMOTE_ADDR"]) && $_SERVER["REMOTE_ADDR"] != '127.0.0.1') {
      // The time stamp should be today's date at 23:59:59 hours in seconds
      // so it is easy to compare with the timestamp in the sessions and users tables
      $date = new DateTime();
      $timestamp = $date->setTime(23, 59, 59)->getTimeStamp();

      $ibm_apim_last_access = variable_get('ibm_apim_last_access', 0);
      if ($ibm_apim_last_access != $timestamp) {
        variable_set('ibm_apim_last_access', $timestamp);
      }
    }
  }
}

/**
 * Setup our session storage.
 *
 * @return array|null
 */
function &_ibm_apim_get_apim_session() {
  $retSession = NULL;

  // We need $_SESSION to always exist even when the user
  // has not logged in yet
  if (!isset($_SESSION)) {
    $_SESSION = array();
  }

  // Ensure we have our storage area in the session
  if (!isset($_SESSION['ibm_apim'])) {
    $_SESSION['ibm_apim'] = array();
    $config_data = _ibm_apim_get_apim_config();
    if (isset($config_data)) {
      $_SESSION['ibm_apim']['gatewayURL'] = check_plain($config_data['gatewayURL']);
      $_SESSION['ibm_apim']['portalURL'] = check_plain($config_data['portalURL']);
      $_SESSION['ibm_apim']['customGatewayURL'] = check_plain($config_data['customGatewayURL']);
      $_SESSION['ibm_apim']['customPortalURL'] = check_plain($config_data['customPortalURL']);
      $_SESSION['ibm_apim']['env'] = check_plain($config_data['envID']);
      $_SESSION['ibm_apim']['org'] = check_plain($config_data['orgID']);
    }
  }

  $retSession = &$_SESSION['ibm_apim'];

  return $retSession;
}

/**
 * Get basic APIC config and store it in the session.
 *
 * @throws \Exception
 */
function _ibm_apim_check_and_get_config() {

  // Ensure that we have a session variable as we require the _SESSION varaible
  // so that we can store a few essential variables
  $apim_session = &_ibm_apim_get_apim_session();

  $path = drupal_get_path('module', 'ibm_apim') . '/ibm_apim.info';
  $info = drupal_parse_info_file($path);
  variable_set('ibm_apim_version', $info['version']);

  $config_data = _ibm_apim_get_apim_config();

  if (isset($config_data)) {
    $apim_session['gatewayURL'] = check_plain($config_data['gatewayURL']);
    $apim_session['portalURL'] = check_plain($config_data['portalURL']);
    $apim_session['customGatewayURL'] = check_plain($config_data['customGatewayURL']);
    $apim_session['customPortalURL'] = check_plain($config_data['customPortalURL']);
    $apim_session['env'] = check_plain($config_data['envID']);
    $apim_session['org'] = check_plain($config_data['orgID']);
    // if invitationEnabled is disabled then disable developer invitations
    if (isset($config_data['invitationEnabled']) && $config_data['invitationEnabled'] == FALSE) {
      variable_set('ibm_apim_disallow_invitations', 1);
    }
    else {
      variable_set('ibm_apim_disallow_invitations', 0);
    }
    if (isset($config_data['applicationLifecycleEnabled']) && $config_data['applicationLifecycleEnabled'] == TRUE) {
      variable_set('ibm_apim_applifecycle_enabled', 1);
    }
    else {
      variable_set('ibm_apim_applifecycle_enabled', 0);
    }
    if (isset($config_data['paymentGateways']) && !empty($config_data['paymentGateways'])) {
      variable_set('ibm_apim_billing_enabled', 1);
    }
    else {
      variable_set('ibm_apim_billing_enabled', 0);
    }
    // get current saml variable to see if its changed
    $prev_saml_idp = variable_get('ibm_apim_saml_idp');
    $prev_portal_idp = variable_get('ibm_apim_social_login');
    // IBM ID / SAML
    if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['type']) && $config_data['userRegistry']['type'] == "saml") {
      if (!isset($prev_portal_idp) || $prev_portal_idp != 0) {
        _ibm_apim_switch_from_social_login();
      }

      variable_set('ibm_apim_saml_idp', 1);
      if (!isset($prev_saml_idp) || ($prev_saml_idp == 0)) {
        // Change Login link
        $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path", array(':link_path' => 'user/login'))->fetchField();
        $link = menu_link_load($mlid);

        $link['link_path'] = 'ibm_apim/saml/login';
        $link['customized'] = 1;
        menu_link_save($link);
        if (module_exists('menu_item_visibility')) {
          $query = db_insert('menu_links_visibility_role');
          $query->fields(array('mlid', 'rid'));
          $query->values(array('mlid' => $mlid, 'rid' => 1));
          $query->execute();
        }
        $item = array(
          'link_title' => 'Admin Login',
          'link_path' => 'user/login',
          'menu_name' => 'login-menu',
          'language' => 'und',
          'customized' => 1,
          'weight' => 2
        );
        menu_link_save($item);

        // change autologout redirection
        variable_set('autologout_redirect_url', '<front>');

        // disable TFA modules
        module_disable(array('tfa'), TRUE);
        drupal_flush_all_caches();
      }
    }
    else if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['type']) && $config_data['userRegistry']['type'] == "portal") {
      // social login
      _ibm_apim_enable_social_login();
      variable_set('ibm_apim_saml_idp', 0);
    }
    else {
      _ibm_apim_switch_from_social_login();
      if (isset($prev_saml_idp) && $prev_saml_idp == 1) {
        variable_set('ibm_apim_saml_idp', 0);
        // change login link back to normal
        $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path", array(':link_path' => 'ibm_apim/saml/login'))->fetchField();
        $link = menu_link_load($mlid);
        $link['link_path'] = 'user/login';
        $link['router_path'] = 'user/login';
        $link['customized'] = 0;
        menu_link_save($link);

        if (module_exists('menu_item_visibility')) {
          db_delete('menu_links_visibility_role')->condition('mlid', $mlid)->execute();
        }

        // remove admin login link
        $admmlid = db_query("SELECT mlid FROM {menu_links} WHERE link_title=:link_title AND menu_name=:menu_name", array(
          ':link_title' => 'Admin Login',
          ':menu_name' => 'login-menu'
        ))->fetchField();
        menu_link_delete($admmlid);

        // change autologout redirection
        variable_set('autologout_redirect_url', 'user/login');
        drupal_flush_all_caches();
      }
    }
    $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
    // ignore the selfSignUpEnabled field if using social login
    if ($ibm_apim_social_login != 1) {
      // if selfSignUpEnabled is disabled then disable user registration
      if (isset($config_data['selfSignUpEnabled']) && $config_data['selfSignUpEnabled'] == FALSE) {
        variable_set('user_register', 0);
        variable_set('ibm_apim_selfSignUpEnabled', 0);
        // hide create new org link too
        $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path AND menu_name=:menu_name", array(
          ':link_path' => 'ibm_apim/org/create',
          ':menu_name' => 'user-menu'
        ))->fetchField();
        $link = menu_link_load($mlid);
        // Alter "hidden" value.
        $link['hidden'] = 1;
        $link['customized'] = 1;
        menu_link_save($link);
      }
      else {
        variable_set('user_register', 1);
        $current_selfsignup = variable_get('ibm_apim_selfSignUpEnabled');
        variable_set('ibm_apim_selfSignUpEnabled', 1);
        // show create new org link if onboarding just enabled
        // this protects against people who have intentionally turned it off and want it to stay that way
        if (isset($current_selfsignup) && $current_selfsignup == 0) {
          $mlid = db_query("SELECT mlid FROM {menu_links} WHERE link_path=:link_path AND menu_name=:menu_name", array(
            ':link_path' => 'ibm_apim/org/create',
            ':menu_name' => 'user-menu'
          ))->fetchField();
          $link = menu_link_load($mlid);
          // Alter "hidden" value.
          $link['hidden'] = 0;
          $link['customized'] = 1;
          menu_link_save($link);
        }
      }
    }
    // if not writable then disable editing user form
    if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['writable']) && $config_data['userRegistry']['writable'] == FALSE) {
      // if IDP type has changed then flush all caches
      $current_ro_idp = variable_get('ibm_apim_readonly_idp');
      if ($current_ro_idp != 1) {
        drupal_flush_all_caches();
      }
      variable_set('ibm_apim_readonly_idp', 1);
      if ($ibm_apim_social_login != 1) {
        // set all fields other than username and password to not be visible on registration form
        _ibm_apim_hide_extra_userfields($config_data['userRegistry']['type']);
      }
    }
    else {
      // check if we previously had readonly registry set, if so enable default fields and turn it off
      $current_ro_idp = variable_get('ibm_apim_readonly_idp');
      if ($current_ro_idp != 0) {
        // if IDP type has changed then flush all caches
        drupal_flush_all_caches();
        variable_set('ibm_apim_readonly_idp', 0);
        if ($ibm_apim_social_login != 1) {
          _ibm_apim_show_default_extra_userfields();
        }
      }
    }
    if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['usernameIsAlwaysEmail']) && $config_data['userRegistry']['usernameIsAlwaysEmail'] == FALSE) {
      variable_set('ibm_apim_email_as_username', 0);
      variable_set('ibm_apim_username_show', 1);
      variable_set('ibm_apim_username_reqd', 1);
      variable_set('ibm_apim_email_show', 1);
      variable_set('ibm_apim_email_reqd', 1);
    }
    else {
      variable_set('ibm_apim_email_as_username', 1);
    }
    if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['inviteViaEmailOnly']) && $config_data['userRegistry']['inviteViaEmailOnly'] == TRUE) {
      variable_set('ibm_apim_inviteViaEmailOnly', 1);
    }
    else {
      variable_set('ibm_apim_inviteViaEmailOnly', 0);
    }
    if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['displayName']) && !empty($config_data['userRegistry']['displayName'])) {
      variable_set('ibm_apim_idp_displayname', $config_data['userRegistry']['displayName']);
    }
  }
  else {
    // Clear any other messages as until this problem is fixed they will just muddy the water
    drupal_get_messages();

    // Throw an exception with a useful message so that we stop processing the request here
    global $base_url;
    throw new Exception(t('Could not retrieve portal configuration. Please ensure the Custom Developer Portal URL is set to "@baseurl" in the API Manager.', array(
      '@baseurl' => $base_url
    )));
  }
}

/**
 * Utility method to run when changing from social login back to normal LDAP, LUR etc.
 */
function _ibm_apim_switch_from_social_login() {
  variable_set('ibm_apim_social_login', 0);
  module_enable(array('auth_apic'), TRUE);
  module_disable(array(
    'hybridauth',
    'social_login',
    'ldap_authentication',
    'ldap_authorization',
    'ldap_servers',
    'ldap_user',
    'ldap_sso',
    'openid_connect',
    'openid_connect_isam'
  ), TRUE);
}

/**
 * Switch to social login
 */
function _ibm_apim_enable_social_login() {
  variable_set('ibm_apim_social_login', 1);
  module_disable(array('auth_apic', 'tfa', 'tfa_basic'), TRUE);
  module_enable(array('social_login', 'hybridauth'), TRUE);
  // set permissions so it shows up on login panel
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('use hybridauth'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('use hybridauth'));
  // set defaults for required fields
  $fields = variable_get('hybridauth_required_fields', NULL);
  if ($fields == NULL || !array_search('email', $fields)) {
    variable_set('hybridauth_required_fields', array(
      'email' => 'email',
      'firstName' => 'firstName',
      'lastName' => 'lastName'
    ));
  }
  if (variable_get('hybridauth_destination', NULL) == NULL) {
    variable_set('hybridauth_destination', '<front>');
  }
  if (variable_get('hybridauth_destination_error', NULL) == NULL) {
    variable_set('hybridauth_destination_error', '<front>');
  }
  $duplicate = variable_get('hybridauth_duplicate_emails', NULL);
  if ($duplicate == NULL || $duplicate == 1) {
    variable_set('hybridauth_duplicate_emails', 2);
  }
  if (variable_get('hybridauth_forms', NULL) == NULL) {
    variable_set('hybridauth_forms', array(
      'user_login',
      'user_login_block',
      'user_register_form'
    ));
  }
  if (variable_get('hybridauth_widget_icon_pack', NULL) == NULL) {
    variable_set('hybridauth_widget_icon_pack', 'hybridauth_48');
  }
  if (variable_get('hybridauth_widget_weight', NULL) == NULL) {
    variable_set('hybridauth_widget_weight', '-100');
  }
  if (variable_get('hybridauth_widget_title', NULL) == NULL) {
    variable_set('hybridauth_widget_title', 'Use external account ...');
  }
}

/**
 * Implementation of hook_menu().
 *
 * @return array
 */
function ibm_apim_menu() {
  $items = array();
  $items['health'] = array(
    'page callback' => 'ibm_apim_health',
    'access callback' => TRUE
  );

  if (module_exists('book')) {
    // Add tabs to core Help page to access the Admin Guide.
    $items['admin/help/tab1'] = array(
      'title' => 'Help',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
    );

    $items['admin/help/book'] = array(
      'title' => 'Admin Guide',
      'page callback' => 'ibm_apim_goto_admin_book',
      'access callback' => 'ibm_apim_access_admin_book',
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
    );
  }
  $items['admin/config/system/ibm_apim'] = array(
    'title' => 'IBM API Connect',
    'description' => 'Configuration for the IBM API Connect module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_config_form'),
    'access arguments' => array('administer APIC integration'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['admin/config/development/ibm_apim'] = array(
    'title' => 'IBM Development',
    'description' => 'Development configuration for the IBM API Connect module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_devel_config_form'),
    'access arguments' => array('administer APIC integration'),
    'type' => MENU_NORMAL_ITEM
  );
  $items['ibm_apim/swaggerjson/%'] = array(
    'title' => 'Open API UI JSON',
    'page callback' => '_ibm_apim_swaggerjson_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['ibm_apim/notifications'] = array(
    'title' => 'Notifications',
    'page callback' => '_ibm_apim_notifications_callback',
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK
  );
  $items['ibm_apim/org/%'] = array(
    'title' => 'Developer Organization Selection',
    'page callback' => 'ibm_apim_developer_org_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['ibm_apim/org/create'] = array(
    'title' => 'Create organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ibm_apim_create_developer_org_form'),
    'access callback' => '_ibm_apim_user_is_not_admin',
    'menu_name' => 'user-menu',
    'weight' => 9
  );
  $items['myorg'] = array(
    'title' => 'My organization',
    'page callback' => '_ibm_apim_myorg_page',
    'menu_name' => 'user-menu',
    'type' => MENU_NORMAL_ITEM,
    'weight' => 8,
    'access callback' => '_ibm_apim_user_is_not_admin'
  );
  $items['myorg/manage'] = array(
    'title' => 'Manage',
    'page callback' => '_ibm_apim_myorg_page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 8,
    'access callback' => '_ibm_apim_user_is_not_admin'
  );
  $items['ibm_apim/analyticsproxy'] = array(
    'title' => 'Analytics proxy',
    'type' => MENU_CALLBACK,
    'page callback' => 'ibm_apim_analytics_proxy',
    'access callback' => '_ibm_apim_user_is_not_admin_analytics'
  );
  $items['ibm_apim/analyticsiframe'] = array(
    'title' => 'Analytics proxy',
    'type' => MENU_CALLBACK,
    'page callback' => 'ibm_apim_analytics_iframe',
    'access callback' => '_ibm_apim_user_is_not_admin_analytics'
  );
  $items['myorg/analytics'] = array(
    'title' => 'Analytics',
    'page callback' => 'ibm_apim_analytics_org',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 9,
    'access callback' => '_ibm_apim_user_is_not_admin_analytics'
  );
  $items['myorg/billing'] = array(
    'title' => 'Billing',
    'page callback' => 'ibm_apim_billing',
    'type' => MENU_LOCAL_TASK,
    'menu_name' => 'user-menu',
    'weight' => 9,
    'access callback' => '_ibm_apim_billing_access'
  );
  $items['ibm_apim/billing/%'] = array(
    'title' => 'Developer Organization Selection',
    'page callback' => 'ibm_apim_billing_submit',
    'page arguments' => array(2),
    'access callback' => '_ibm_apim_billing_access',
    'type' => MENU_CALLBACK
  );

  $items['myorg/edit'] = array(
    'title' => 'Edit My Organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ibm_apim_edit_myorg'),
    'type' => MENU_CALLBACK,
    'access callback' => '_ibm_apim_user_is_org_owner'
  );
  $items['myorg/delete'] = array(
    'title' => 'Delete My Organization',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ibm_apim_delete_myorg'),
    'type' => MENU_CALLBACK,
    'access callback' => '_ibm_apim_user_is_org_owner'
  );
  $items['myorg/changeowner'] = array(
    'title' => 'Change Organization Ownership',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ibm_apim_change_owner_myorg'),
    'type' => MENU_CALLBACK,
    'access callback' => '_ibm_apim_user_is_org_owner'
  );
  $items['user/delete'] = array(
    'title' => 'Delete My Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_ibm_apim_delete_user'),
    'type' => MENU_CALLBACK,
    'access callback' => '_ibm_apim_user_is_not_admin'
  );
  $items['myorg/%'] = array(
    'title' => 'Ajax test callback',
    'type' => MENU_CALLBACK,
    'page callback' => '_ibm_apim_myorg_ajax_link_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content')
  );
  if (module_exists('flag_bookmark')) {
    $items['mybookmarks'] = array(
      'title' => 'My bookmarks',
      'page callback' => '_ibm_apim_mybookmarks',
      'menu_name' => 'user-menu',
      'weight' => 7,
      'access callback' => 'user_is_logged_in'
    );
  }
  $items['ibm_apim/version'] = array(
    'title' => 'IBM API Connect Version',
    'type' => MENU_CALLBACK,
    'page callback' => 'ibm_apim_version',
    'access callback' => '_ibm_apim_version_page_enabled'
  );

  return $items;
}

/**
 * Page callback for /health.
 *
 * @return string
 *   The current time.
 */
function ibm_apim_health() {
  drupal_page_is_cacheable(FALSE);

  echo (string) time();

  drupal_exit();
}

/**
 * Whether to enable the ibm_apim/version page
 *
 * @return mixed
 */
function _ibm_apim_version_page_enabled() {
  $ibm_apim_enable_version_page = variable_get('ibm_apim_enable_version_page', 0);
  return $ibm_apim_enable_version_page;
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 * With one exception, we want legal to run after us.
 *
 * @param $implementations
 * @param $hook
 */
function ibm_apim_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['ibm_apim'])) {
    $group = $implementations['ibm_apim'];
    unset($implementations['ibm_apim']);
    $implementations['ibm_apim'] = $group;
    if ($hook == 'form_alter' && isset($implementations['legal'])) {
      $group = $implementations['legal'];
      unset($implementations['legal']);
      $implementations['legal'] = $group;
    }
  }
}

/**
 * Implements hook_menu_alter().
 *
 * Move user search tab from overall search to People administration.
 */
function ibm_apim_menu_alter(&$items) {
  $module = 'user';
  $new_base_path = 'admin/people';
  $new_title = t("Search");
  // Below could move any set of menu items by defining inputs above.
  $item_indexes = array(
    'search/' . $module => $new_base_path . '/search',
    'search/' . $module . '/%menu_tail' => $new_base_path . '/search/%menu_tail',
  );
  foreach ($item_indexes as $item_index => $new_item_index) {
    if (isset($items[$item_index])) {
      $item = $items[$item_index];
      unset($items[$item_index]);
      $item['title'] = $new_title;
      $item['weight'] = -10;
      if (substr($item_index, -11) == '/%menu_tail') {
        $item['page arguments'] = array('user', 3);
        // These tabs are not subtabs.
        $item['tab_root'] = $new_base_path;
        // These tabs need to display at the same level.
        $item['tab_parent'] = $new_base_path . '/search';
      }
      $items[$new_item_index] = $item;
    }
  }
  // block access to password_policy force password change restore tab
  if (isset($items['admin/config/people/password_policy/password_change'])) {
    $items['admin/config/people/password_policy/password_change']['access callback'] = FALSE;
  }
  // block access to backup_migrate restore tab
  if (isset($items['admin/config/system/backup_migrate/restore'])) {
    $items['admin/config/system/backup_migrate/restore']['access callback'] = FALSE;
  }
}

/**
 * Implementation of hook_menu_local_tasks_alter().
 * Hide the tabs for the pages of our admin guide book
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function ibm_apim_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  if (isset($router_item) && isset($router_item['page_arguments'][0]) && isset($router_item['page_arguments'][0]->type) && $router_item['page_arguments'][0]->type == 'book') {
    $book_ids = variable_get('ibm_apim_book_ids', array());
    $bid = $book_ids['bid'];
    if (isset($bid) && isset($router_item['page_arguments'][0]->nid) && ($router_item['page_arguments'][0]->nid == $bid) || (isset($router_item['page_arguments'][0]->book) && isset($router_item['page_arguments'][0]->book['bid']) && $router_item['page_arguments'][0]->book['bid'] == $bid)) {
      $newactions = array();
      if (module_exists('devel')) {
        foreach ($data['tabs'][0]['output'] as $action) {
          if ($action['#link']['path'] != 'node/%/translate' && $action['#link']['path'] != 'node/%/revisions') {
            $newactions[] = $action;
          }
        }
      }
      else {
        foreach ($data['tabs'][0]['output'] as $action) {
          if ($action['#link']['path'] != 'node/%/translate' && $action['#link']['path'] != 'node/%/revisions' && $action['#link']['path'] != 'node/%/edit' && $action['#link']['path'] != 'node/%/outline' && $action['#link']['path'] != 'node/%/view') {
            $newactions[] = $action;
          }
        }
      }
      $data['tabs'][0]['output'] = $newactions;
    }
  }
}

/**
 * Implementation of hook_boot().
 */
function ibm_apim_boot() {
}

/**
 * Implements hook_token_info().
 * Add a token with the expiry value
 *
 * @return mixed
 */
function ibm_apim_token_info() {
  $info['tokens']['user']['password_reset_timeout'] = array(
    'name' => t('User password reset timeout'),
    'description' => t('Provides the current password reset link expiry.'),
  );
  return $info;
}

/**
 * Implements hook_tokens().
 * @param $type
 * @param $tokens
 * @param array $data
 * @param array $options
 * @return array
 */
function ibm_apim_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $timeout = variable_get('user_password_reset_timeout', 86400);
  $sanitize = !empty($options['sanitize']);

  if ($type == 'user' && !empty($data['user'])) {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'password_reset_timeout':
          $value = ibm_apim_seconds_to_human($timeout);
          $replacements[$original] = $sanitize ? check_plain($value) : $value;
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Utility function to convert number of seconds into a human readable form
 * @param $value
 * @return string
 */
function ibm_apim_seconds_to_human($value) {
  $s = $value % 60;
  $m = floor(($value % 3600) / 60);
  $h = floor(($value % 86400) / 3600);
  $d = floor(($value % 2592000) / 86400);
  $M = floor($value / 2592000);
  $out = "";
  if ($M > 0) {
    $out .= format_plural($M, '1 month', '@count months');
  }
  if ($d > 0) {
    if (!empty($out)) {
      $out .= ', ';
    }
    $out .= format_plural($d, '1 day', '@count days');
  }
  if ($h > 0) {
    if (!empty($out)) {
      $out .= ', ';
    }
    $out .= format_plural($h, '1 hour', '@count hours');
  }
  if ($m > 0) {
    if (!empty($out)) {
      $out .= ', ';
    }
    $out .= format_plural($m, '1 minute', '@count minutes');
  }
  if ($s > 0) {
    if (!empty($out)) {
      $out .= ', ';
    }
    $out .= format_plural($s, '1 second', '@count seconds');
  }
  return $out;
}

/**
 * Implementation of hook_block_info().
 *
 * @return mixed
 */
function ibm_apim_block_info() {
  $blocks['api_list'] = array(
    'info' => t('API List'),
    'cache' => DRUPAL_CACHE_PER_USER,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "api\napi/*"
  );
  $blocks['app_list'] = array(
    'info' => t('Application List'),
    'cache' => DRUPAL_CACHE_PER_USER,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "application\napplication/*"
  );
  $blocks['product_list'] = array(
    'info' => t('Product List'),
    'cache' => DRUPAL_CACHE_PER_USER,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "product\nproduct/*"
  );
  $blocks['developer_org_select'] = array(
    'info' => t('Developer Organization Selection'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header'
  );
  $blocks['app_details_menu'] = array(
    'info' => t('Application Menu'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'secondary_content'
  );
  $blocks['apim_notification_count'] = array(
    'info' => t('APIC Notification Count'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header'
  );
  $blocks['apim_config_check'] = array(
    'info' => t('APIC Config Check'),
    'status' => TRUE,
    'cache' => DRUPAL_NO_CACHE,
    'region' => 'header'
  );
  return $blocks;
}

/**
 * Implementation of hook_block_view().
 *
 * @param string $delta
 * @return array
 * @throws \Exception
 */
function ibm_apim_block_view($delta = '') {
  global $user;
  $block = array();
  switch ($delta) {
    case 'developer_org_select' :
      if (user_is_logged_in() && $user->uid != 1) {
        $block['subject'] = NULL;
        $markup = ibm_apim_select_developer_menu();
        $block['content'] = array('#markup' => $markup);
      }
      break;
    case 'api_list' :
      $block['subject'] = t('APIs');
      if (module_exists('api')) {

        $nids = api_list_apis();
        $nodes = node_load_multiple($nids);

        $items = array();
        if (is_array($nodes)) {
          foreach ($nodes as $item) {
            $items[] = array(
              'data' => l(check_plain($item->title), 'node/' . $item->nid)
            );
          }
          $block['content'] = theme('item_list', array('items' => $items));
        }
      }
      else {
        $block['content'] = array('#markup' => '<p>' . t('Enable the api module to use this block.') . '</p>');
      }
      break;
    case 'app_list' :
      $block['subject'] = t('Applications');
      if (module_exists('application')) {
        $nodes = array();
        $nids = application_list_applications();
        if (isset($nids)) {
          $nodes = node_load_multiple($nids);
        }
        $items = array();
        if (is_array($nodes)) {
          foreach ($nodes as $node) {
            $items[] = array('data' => l(check_plain($node->title), 'node/' . $node->nid));
          }
        }
        if (ibm_apim_check_is_developer()) {
          $items[] = array('data' => l(t('Register New Application'), 'application/new'));
        }
        $block['content'] = theme('item_list', array('items' => $items));
      }
      else {
        $block['content'] = array('#markup' => '<p>' . t('Enable the application module to use this block.') . '</p>');
      }
      break;
    case 'product_list' :
      $block['subject'] = t('Products');
      if (module_exists('product')) {
        $nids = product_list_products();
        if (isset($nids)) {
          $nodes = node_load_multiple($nids);
        }
        $items = array();
        if (is_array($nodes)) {
          foreach ($nodes as $node) {
            $items[] = array('data' => l(check_plain($node->title), 'node/' . $node->nid));
          }
        }
        $block['content'] = theme('item_list', array('items' => $items));
      }
      else {
        $block['content'] = array('#markup' => '<p>' . t('Enable the product module to use this block.') . '</p>');
      }
      break;
    case 'app_details_menu' :

      // Only show this link on the collection of applications
      if ($user->uid && arg(0) == 'application' && arg(1) == NULL && ibm_apim_check_is_developer()) {
        if (module_exists('application')) {
          $ibm_apim_show_register_app = variable_get('ibm_apim_show_register_app', 1);
          if ($ibm_apim_show_register_app == 1) {
            $content = '<span class="registerApp"><a href="' . url("application/new") . '"><i class="material-icons">add</i>' . t('Create new App') . '</a></span>';
            $block = array('subject' => '<none>', 'content' => $content);
          }
        }
        else {
          $block['content'] = array('#markup' => '<p>' . t('Enable the application module to use this block.') . '</p>');
        }
      }
      break;
    case 'apim_notification_count' :
      if (user_is_logged_in() && $user->uid != 1) {
        $block['subject'] = NULL;
        $markup = ibm_apim_notification_count_block();
        $block['content'] = array('#markup' => $markup);
      }
      break;
    case 'apim_config_check' :
      $ibm_apim_bgsync_error = variable_get('ibm_apim_bgsync_error', 0);
      if (isset($ibm_apim_bgsync_error) && $ibm_apim_bgsync_error == 1) {
        drupal_set_message(t('The system is currently experiencing problems. Please try again later.'), 'warning');
      }
      break;
  }
  return $block;
}

/**
 * Redirect to the admin guide book
 */
function ibm_apim_goto_admin_book() {
  if (module_exists('book')) {
    $book_ids = variable_get('ibm_apim_book_ids', array());
    $bid = $book_ids['bid'];
    if (isset($bid)) {
      drupal_goto('node/' . $bid);
    }
  }
}

/**
 * Check if the current user has access to see the admin guide book
 * @return bool
 */
function ibm_apim_access_admin_book() {
  global $user;
  $admin_role = user_role_load_by_name('administrator');
  $admin_rid = $admin_role->rid;
  $mod_role = user_role_load_by_name('forum moderator');
  $mod_rid = $mod_role->rid;
  $editor_role = user_role_load_by_name('content author');
  $editor_rid = $editor_role->rid;
  if ((isset($user->uid) && $user->uid == 1) || user_has_role($admin_rid) || user_has_role($mod_rid) || user_has_role($editor_rid)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * A function to get the APIm config
 *
 *
 * @return string NULL if an error occurs otherwise an array of the apim config.
 */
function _ibm_apim_get_apim_config() {
  $config_data = variable_get('ibm_apim_portal_config');

  return unserialize($config_data);
}

/**
 * A helper function to use when submitted an IBM API GET call
 *
 * @param string $url
 *          The IBM APIm API URL
 *
 * @param string $auth
 *          The authorization string to use, the default is the current user
 *
 * @param bool $getting_config
 *          Getting /portal/config or not
 *
 * @param bool $message_errors
 *          Log errors or not
 *
 * @param bool $returnresult
 *          return entire result object or just data
 *
 * @return null|\stdClass|void
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_call($url, $auth = 'user', $getting_config = FALSE, $message_errors = TRUE, $returnresult = FALSE) {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'GET', $auth, NULL, $message_errors, $returnresult, $getting_config, FALSE);
}

/**
 * A helper function to use when submitted an IBM API GET call.
 * This
 * function is only needed if you need the raw return data, for instance
 * when retrieving an image.
 *
 * @param string $url
 *          The IBM APIm API URL
 *
 * @param string $auth
 *          The authorization string to use, the default is the current user
 *
 * @return null|\stdClass|void
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_raw_data($url, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'GET', $auth, NULL, TRUE, TRUE, TRUE, TRUE);
}

/**
 * A helper function to use when submitted an IBM API POST call
 *
 * @param string $url
 *          The IBM APIm API URL
 *
 * @param string $data
 *          A string containing the JSON data to submit to the IBM API
 *
 * @param string $auth
 *          The authorization string to use, the default is the current user
 *
 * @return null|\stdClass|void
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_post($url, $data, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'POST', $auth, $data);
}

/**
 * A helper function to use when submitted an IBM API PUT call
 *
 * @param string $url
 *          The IBM APIm API URL
 *
 * @param string $data
 *          A string containing the JSON data to submit to the IBM API
 *
 * @param string $auth
 *          The authorization string to use, the default is the current user
 *
 * @return null|\stdClass|void
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_put($url, $data, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'PUT', $auth, $data);
}

/**
 * A helper function to use when submitted an IBM API DELETE call
 *
 * @param string $url
 *          The IBM APIm API URL
 *
 * @param string $auth
 *          The authorization string to use, the default is the current user
 *
 * @return null|\stdClass|void
 *         Note that DELETE calls usually return nothing in which this function
 *         will return an empty string.
 *
 * @see _ibm_apim_call_base()
 */
function ibm_apim_delete($url, $auth = 'user') {
  $returnValue = NULL;
  return _ibm_apim_call_base($url, 'DELETE', $auth);
}

/**
 * Turns a string of JSON into a PHP object.
 *
 * @param $string
 * @return mixed
 */
function _ibm_apim_get_json($string) {
  $decoded = json_decode($string, TRUE);
  return $decoded;
}

/**
 * A Utility function that can be used to check that the SSL certificate that has been set works
 * correctly. It will return a exit code that is 0 for everything is correct or another number
 * for incorrect. Currently the error code is 5 the same as the PHP Curl result code.
 * @param $url
 * @param boolean $insecure
 * @param string $provided_certificate
 * @param string $certificate_location
 */
function validate_https_call_certificate($url, $insecure = NULL, $provided_certificate = NULL, $certificate_location = "/etc/apim.crt") {
  try {
    _ibm_apim_json_http_request($url, 'GET', NULL, NULL, TRUE, FALSE, $insecure, $provided_certificate, $certificate_location, FALSE);
  } catch (Exception $e) {
    if (strpos($e->getMessage(), 'Could not communicate with server. Reason: SSL certificate problem: unable to get local issuer certificate') !== FALSE) {
      exit(7);
    }
    if (strpos($e->getMessage(), 'Could not communicate with server. Reason: SSL certificate problem: self signed certificate') !== FALSE) {
      exit(6);
    }
    elseif (strpos($e->getMessage(), 'SSL: certificate verification failed (result: 5)') !== FALSE) {
      exit(5);
    }
    elseif (strpos($e->getMessage(), 'Could not communicate with server. Reason: Could not resolve host:') !== FALSE) {
      exit(4);
    }
    elseif (strpos($e->getMessage(), 'Could not communicate with server.') !== FALSE && strpos($e->getMessage(), 'Reason: Failed to connect to') !== FALSE && strpos($e->getMessage(), 'Connection refused') !== FALSE) {
      exit(3);
    }
    elseif (strpos($e->getMessage(), 'Could not communicate with server. Reason: SSL: no alternative certificate subject name matches target host name') !== FALSE) {
      exit(2);
    }
    else {
      echo 'Caught exception: ', $e->getMessage(), "\n";
      exit(1);
    }
  }
  exit(0);
}

/**
 * If the developer mode config parameter is true then sets options
 * on a curl resource to enable auto-accept of self-signed
 * certificates.
 * @param $resource
 * @param $provided_certificate
 * @param $certificate_location
 * @param $insecure
 */
function _ibm_apim_curl_set_accept_ssl($resource, $insecure = NULL, $provided_certificate = NULL) {

  // Always set the defaults first
  curl_setopt($resource, CURLOPT_SSL_VERIFYPEER, TRUE);
  curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 2);

  if (is_null($insecure)) {
    $insecure = variable_get('ibm_apim_insecure');
  }

  if ($insecure) {
    curl_setopt($resource, CURLOPT_SSL_VERIFYPEER, FALSE);
    curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 0);
  }
  else {
    if (is_null($provided_certificate)) {
      $provided_certificate = variable_get('ibm_apim_provided_certificate');
    }
    elseif ($provided_certificate == 'Default CA') {
      $provided_certificate = NULL;
    }

    if ($provided_certificate) {
      // Tell curl to use the certificate the user provided
      curl_setopt($resource, CURLOPT_CAINFO, "/etc/apim.crt");
      if ($provided_certificate == 'mismatch') {
        // If the certificate is does not contain the correct server name
        // then tell curl to accept it anyway. The user gets a warning when
        // they provide a certificate like this so they understand this is
        // less secure than using a certificate with a matching server name.
        curl_setopt($resource, CURLOPT_SSL_VERIFYHOST, 0);
      }
    }
  }
}

/**
 * @param $url
 * @param string $verb
 * @param null $headers
 * @param null $data
 * @param bool $return_result
 * @param bool $raw_api_call
 * @param bool $insecure
 * @param string $provided_certificate
 * @param string $certificate_location
 * @param bool $notify_drupal
 * @return \stdClass
 * @throws \Exception
 */
function _ibm_apim_json_http_request($url, $verb = 'GET', $headers = NULL, $data = NULL, $return_result = FALSE, $raw_api_call = FALSE, $insecure = NULL, $provided_certificate = NULL, $notify_drupal = TRUE) {

  if (mb_strpos($url, 'https://') !== 0) {
    $host_pieces = _ibm_apim_parse_apim_host();
    if (isset($host_pieces['url'])) {
      $url = $host_pieces['url'] . $url;
    }
    else {
      drupal_set_message(t('APIC Hostname not set. Aborting'), 'error');
      return NULL;
    }
  }

  // Use curl instead of drupal_http_request so that we can
  // check the server certificates are genuine so that we
  // do not fall foul of a man-in-the-middle attack.
  $resource = curl_init();

  curl_setopt($resource, CURLOPT_URL, $url);
  if (!is_null($headers)) {
    curl_setopt($resource, CURLOPT_HTTPHEADER, $headers);
  }
  curl_setopt($resource, CURLOPT_RETURNTRANSFER, 1);

  // Return the response header as part of the response
  curl_setopt($resource, CURLOPT_HEADER, 1);

  if ($verb != 'GET') {
    curl_setopt($resource, CURLOPT_CUSTOMREQUEST, $verb);
  }

  if ($verb == 'PUT' || $verb == 'POST') {
    curl_setopt($resource, CURLOPT_POSTFIELDS, $data);
  }
  if ($verb == 'HEAD') {
    curl_setopt($resource, CURLOPT_NOBODY, TRUE);
    curl_setopt($resource, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
  }

  // Enable auto-accept of self-signed certificates if this
  // has been set in the module config by an admin.
  _ibm_apim_curl_set_accept_ssl($resource, $insecure, $provided_certificate);

  if ($notify_drupal == TRUE) {
    // set a custom UA string for the portal
    $apic_version = variable_get('ibm_apim_version', '');
    $hostname = gethostname();
    if (!isset($hostname)) {
      $hostname = '';
    }
    curl_setopt($resource, CURLOPT_USERAGENT, 'IBM API Connect Developer Portal/' . $apic_version . ' ' . $hostname);
  }

  $response = curl_exec($resource);

  $http_status = curl_getinfo($resource, CURLINFO_HTTP_CODE);
  $error = curl_error($resource);

  // Construct the result object we expect
  $result = new stdClass();

  // Assign the response headers
  $header_size = curl_getinfo($resource, CURLINFO_HEADER_SIZE);
  $header_txt = mb_substr($response, 0, $header_size);
  $result->headers = array();

  foreach (explode("\r\n", $header_txt) as $line) {
    $parts = explode(': ', $line);
    if (count($parts) == 2) {
      $result->headers[$parts[0]] = $parts[1];
    }
  }

  if ($error) {
    // a return code of zero mostly likely means there has been a certificate error
    // so make sure we surface this in the UI
    if ($http_status == 0) {
      if ($notify_drupal) {
        throw new Exception(t('Could not communicate with server. Reason: ') . $error);
      }
      else {
        throw new Exception('Could not communicate with server. Reason: ' . $error);
      }
    }
  }

  $result->data = mb_substr($response, $header_size);

  $result->code = $http_status;

  curl_close($resource);

  if (!$return_result) {
    if ($result->data != '') {
      if (empty($headers) || !in_array('Accept: application/vnd.ibm-apim.swagger2+yaml', $headers)) {
        $result->data = _ibm_apim_get_json($result->data);
      }
    }
  }

  return $result;
}

/**
 * Where the real work to make a call to the IBM APIm API is done.
 *
 * @param $url
 *          The IBM APIm API URL
 *
 * @param $verb
 *          The HTTP verb to use, must be in the list: GET, PUT, DELETE, POST
 *
 * @param $auth
 *          The authorization string to use, the default is the current user. Other
 *          options are:
 *          clientid - which will use the catalog's client ID header
 *          admin - which will use the admin user registered in the
 *          module configuration settings
 *          NULL - use no authorization
 *          any other value - will be included in the Authorization: Basic header
 *          as is.
 *
 * @param $data
 *          A string containing the JSON data to submit to the IBM API
 *
 * @param bool $message_errors
 *          Should the function log errors?
 *
 * @param bool $return_result
 *          Normally only the result data is returned, if set to TRUE the entire
 *          result object will be returned.
 * @param bool $getting_config
 *
 * @param bool $raw_api_call
 * @return null|\stdClass
 * @throws \Exception
 */
function _ibm_apim_call_base($url, $verb, $auth = 'user', $data = NULL, $message_errors = TRUE, $return_result = FALSE, $getting_config = FALSE, $raw_api_call = FALSE) {
  global $user;

  // dont bother with running api calls during the install
  if (variable_get('install_task') != 'done') {
    return NULL;
  }

  $apim_session = &_ibm_apim_get_apim_session();

  $returnValue = NULL;
  if (mb_strpos($url, 'https://') !== 0) {
    $host_pieces = _ibm_apim_parse_apim_host();
    if (isset($host_pieces['url'])) {
      $url = $host_pieces['url'] . $url;
    }
    else {
      drupal_set_message(t('APIC Hostname not set. Aborting'), 'error');
      return NULL;
    }
  }

  $headers = array(
    'Content-Type: application/json',
    'Accept: application/json'
  );
  global $language;
  $lang_name = _ibm_apim_convert_lang_name($language->language);
  if (isset($lang_name)) {
    $headers[] = 'Accept-Language: ' . $lang_name;
  }

  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);

  if ($getting_config == FALSE) {
    $headers[] = 'X-IBM-APIManagement-Context: ' . $apim_session['org'] . '.' . $apim_session['env'];
  }
  if ($auth == 'clientid' || $ibm_apim_social_login == 1) {
    $clientid = variable_get('ibm_apim_client_id');
    $headers[] = 'X-IBM-Client-Id: ' . $clientid;
    if (isset($user->name) && $user->uid != 1) {
      $headers[] = 'X-IBM-APIManagement-Principal: ' . $user->name;
      $headers[] = 'X-IBM-APIManagement-Principal-Base64: ' . base64_encode($user->name);
    }
    else if (isset($data)) {
      // For writable LDAP
      $decoded = json_decode($data);
      if (isset($decoded->username)) {
        $headers[] = 'X-IBM-APIManagement-Principal: ' . $decoded->username;
        $headers[] = 'X-IBM-APIManagement-Principal-Base64: ' . base64_encode($decoded->username);
      }
    }
  }
  elseif ($auth == 'user') {
    $ibm_apim_saml_idp = variable_get('ibm_apim_saml_idp', 0);
    if ($ibm_apim_saml_idp == 1) {
      if (isset($apim_session['samltoken']) && !empty($apim_session['samltoken'])) {
        $headers[] = 'X-IBM-APIManagement-IBMIDToken: ' . $apim_session['samltoken'];
      }
    }
    elseif (isset($apim_session['auth'])) {
      $headers[] = 'Authorization: Basic ' . $apim_session['auth'];
    }
  }
  elseif ($auth != NULL) {
    $headers[] = 'Authorization: Basic ' . $auth;
  }

  $secs = time();


  $debug_trace = variable_get('ibm_apim_debug_trace', FALSE);

  if ($debug_trace == TRUE) {
    watchdog('_ibm_apim_call_base', 'START: %verb %url %headers %data', array(
      '%verb' => $verb,
      '%url' => $url,
      '%headers' => serialize($headers),
      '%data' => serialize($data)
    ), WATCHDOG_DEBUG);
  }
  else {
    watchdog('_ibm_apim_call_base', 'START: %verb %url', array(
      '%verb' => $verb,
      '%url' => $url
    ), WATCHDOG_INFO);
  }

  $result = _ibm_apim_json_http_request($url, $verb, $headers, $data, $return_result, $raw_api_call);
  $secs = time() - $secs;

  if ($debug_trace == TRUE) {
    watchdog('_ibm_apim_call_base', '%secs secs duration. END: %verb %url %result', array(
      '%secs' => $secs,
      '%verb' => $verb,
      '%url' => $url,
      '%result' => serialize($result)
    ), WATCHDOG_DEBUG);
  }
  else {
    watchdog('_ibm_apim_call_base', '%secs secs duration. END: %verb %url %code', array(
      '%secs' => $secs,
      '%verb' => $verb,
      '%url' => $url,
      '%code' => $result->code
    ), WATCHDOG_INFO);
  }

  $secs = time() - $secs;


  if ($getting_config && isset($result) && $result->code == 204) {
    $result->data = NULL;
    $returnValue = $result;
  }
  else {
    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      if ($return_result != TRUE) {
        $returnValue = $result;
      }
    }
    else {
      if ($message_errors) {
        if ($return_result) {
          // Need to convert to json if return_result was true as _ibm_apim_json_http_request()
          // will not have done it
          $result->data = _ibm_apim_get_json($result->data);
        }
        $json_result = $result->data;
        $errors = $json_result['errors'];
        if ($errors) {
          foreach ($errors as $error) {
            $keys = array_keys($error);
            if ($keys) {
              foreach ($keys as $key) {
                if ($key != 'plans.planNotFound') {
                  // Don't log errors about unpublished plans
                  drupal_set_message(check_plain($error[$key]), 'error');
                  $returnValue = $result;
                }
              }
            }
          }
        }
      }
    }
  }
  if ($return_result) {
    return $result;
  }
  return $returnValue;
}

/**
 * Load the user's developer organizations and store them in a session variable.
 * The developer org is used in most IBM APIm API calls, storing it saves a lot
 * of extra calls.
 *
 * @return array|null
 */
function _ibm_apim_load_developer_orgs() {
  global $user;
  if (user_is_logged_in() && isset($user->uid) && $user->uid != 1) {
    $apim_session = &_ibm_apim_get_apim_session();
    if (isset($apim_session['userdata'])) {
      return $apim_session['userdata']['orgs'];
    }
    else {
      $ibmid = variable_get('ibm_apim_saml_idp', 0);
      $social = variable_get('ibm_apim_social_login', 0);
      if (isset($apim_session['auth']) || $ibmid == 1 || $social == 1) {
        $apim_session['developer_organizations'] = array();
        if ($social == 1) {
          $result = ibm_apim_call('/v1/portal/orgs', 'clientid');
        }
        else {
          $result = ibm_apim_call('/v1/portal/orgs');
        }
        if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
          $apim_session['developer_organizations'] = $result->data;
        }
        return $apim_session['developer_organizations'];
      }
    }
  }
  return NULL;
}

/**
 * Return all of the developer orgs the current user owns.
 */
function _ibm_apim_owned_developer_orgs() {
  $current_orgs = _ibm_apim_load_developer_orgs();
  $owned = array();
  foreach ($current_orgs as $org) {
    if (isset($org['owner']) && $org['owner']){
      $owned[] = $org;
    } else {
      foreach ($org['roles'] as $role) {
        if ($role['name'] === 'owner') {
          $owned[] = $org;
        }
      }
    }
  }
  return $owned;
}

/**
 * update the cached user data (orgs list, roles, etc.)
 * @return mixed
 */
function _ibm_apim_refresh_user_data() {
  global $user;
  if (user_is_logged_in() && isset($user->uid) && $user->uid != 1) {
    $apim_session = &_ibm_apim_get_apim_session();
    $result = ibm_apim_call('/v1/portal/me?expand=true');
    unset($apim_session['userdata']);

    if (isset($result) && ($result->code == 200) && $result->data != '') {
      $apim_session['userdata'] = $result->data;
      if (isset($result->data['id'])) {
        $apim_session['memberid'] = $result->data['id'];
      }
      return $result->data;
    }
    else {
      return NULL;
    }
  }
  else {
    return NULL;
  }
}

/**
 * Sets the current developer org in a session variable.
 * Users may belong to
 * multiple developer orgs.
 *
 * @param string $org_id
 * @return array The form
 */
function _ibm_apim_set_current_developer_org($org_id) {
  $orgs = _ibm_apim_load_developer_orgs();
  $apim_session = &_ibm_apim_get_apim_session();
  if ($orgs) {
    foreach ($orgs as $org) {
      if ($org['id'] == $org_id) {
        $apim_session['current_developer_organizations'] = $org;
        break;
      }
    }
  }
  // remove cached isdeveloper value
  unset($apim_session['isdeveloper']);
  unset($apim_session['orgowner']);
  cache_clear_all();
  watchdog('_ibm_apim_set_current_developer_org', 'Developer org set %data', array(
    '%data' => json_encode($apim_session['current_developer_organizations'], JSON_PRETTY_PRINT)
  ), WATCHDOG_NOTICE);
  return $apim_session['current_developer_organizations'];
}

/**
 * Allow devorg owner to set billing info for monetization
 */
function ibm_apim_billing() {
  $markup = '';
  $billing_data = array();
  $developer_org = ibm_apim_get_current_developer_org();
  $expiration_set = TRUE;
  $billing_expiration = '';

  // get current billing info
  $url = '/v1/portal/orgs/' . $developer_org['id'] . '/billing';
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $billing_data = $result->data;
  }
  if (!isset($billing_data[0]['properties']['email'])) {
    $billing_data[0]['properties']['email'] = '';
  }
  if (!isset($billing_data[0]['properties']['name'])) {
    $billing_data[0]['properties']['name'] = '';
  }
  if (!isset($billing_data[0]['properties']['last4'])) {
    $billing_data[0]['properties']['last4'] = '';
  }
  if (!isset($billing_data[0]['properties']['exp_month'])) {
    $billing_data[0]['properties']['exp_month'] = '';
    $expiration_set = FALSE;
  }
  if (!isset($billing_data[0]['properties']['exp_year'])) {
    $billing_data[0]['properties']['exp_year'] = '';
    $expiration_set = FALSE;
  }
  if ($expiration_set) {
    $billing_expiration = $billing_data[0]['properties']['exp_month'] . '/' . $billing_data[0]['properties']['exp_year'];
  }
  $markup .= "<p>" . t('The current billing information for your developer organization is shown below. To update the information use the \'Update\' button to launch a wizard which will guide you through the process.') . "</p>";
  $markup .= "<div id='billing' class='fieldset-wrapper'>";
  $markup .= "<div class='form-item form-item-role'>";
  $markup .= "<label for='edit-role'>" . t('Contact information') . "</label>";
  $markup .= "<div class='form-item form-type-textfield'>";
  $markup .= "<label for='billing_name'>" . t('Name:') . "</label>";
  $markup .= "<span id='billing_name'>" . ' ' . check_plain($billing_data[0]['properties']['name']) . "</span>";
  $markup .= "</div>";
  $markup .= "<div class='form-item form-type-textfield'>";
  $markup .= "<label for='billing_email'>" . t('Email:') . "</label>";
  $markup .= "<span id='billing_email'>" . ' ' . check_plain($billing_data[0]['properties']['email']) . "</span>";
  $markup .= "</div>";
  $markup .= "</div>";
  $markup .= "<div class='form-item form-item-role'>";
  $markup .= "<label for='edit-role'>" . t('Credit card') . "</label>";
  $markup .= "<div class='form-item form-type-textfield'>";
  $markup .= "<label for='card_ending'>" . t('Card ending in:') . "</label>";
  $markup .= "<span id='card_ending'>" . ' ' . check_plain($billing_data[0]['properties']['last4']) . "</span>";
  $markup .= "</div>";
  $markup .= "<div class='form-item form-type-textfield form-item-new-email'>";
  $markup .= "<label for='card_expiring'>" . t('Card expiration:') . "</label>";
  $markup .= "<span id='card_expiring'>" . ' ' . check_plain($billing_expiration) . "</span>";
  $markup .= "</div>";
  $markup .= "</div>";
  $markup .= "<button id='billing_button' class='form-submit'>" . t('Update') . "</button>";
  $markup .= "</div>";

  // get the current site logo
  if (!$logo = theme_get_setting('logo_path')) {
    $logo = file_create_url(theme_get_setting('logo'));
  }

  if (empty($logo)) {
    global $base_url;
    $logo = $base_url . '/sites/all/modules/ibm_apim/images/icons/product/product_05.png';
  }
  $config_data = _ibm_apim_get_apim_config();
  if (!isset($config_data['paymentGateways'][0]['publishableKey'])) {
    $config_data['paymentGateways'][0]['publishableKey'] = '';
  }

  drupal_add_js(array(
    'billing_key' => $config_data['paymentGateways'][0]['publishableKey'],
    'billing_siteName' => variable_get('site_name', 'Default'),
    'billing_logoPath' => $logo,
    'billing_label' => t('Update Billing Details'),
    'billing_description' => t('Update your Billing Information'),
    'billing_endpoint' => url('ibm_apim/billing')
  ), 'setting');
  drupal_add_js('https://checkout.stripe.com/checkout.js', array(
    'type' => 'external',
    'defer' => 'defer'
  ));
  drupal_add_js(drupal_get_path('module', 'ibm_apim') . '/js/billing.js', array('defer' => 'defer'));
  return array('#markup' => $markup);
}

/**
 * Take token from stripe and pass to APIM
 * @param $input
 */
function ibm_apim_billing_submit($input) {
  $token = json_decode(ibm_apim_base64_url_decode($input), TRUE);
  $developer_org = ibm_apim_get_current_developer_org();

  if (!isset($token['card']['name'])) {
    $token['card']['name'] = ' ';
  }
  if (!isset($token['email'])) {
    $token['email'] = ' ';
  }
  $data = array(
    'provider' => 'stripe',
    'model' => 'stripe_customer',
    'properties' => array(
      'source' => $token['id'],
      "email" => $token['email'],
      "name" => $token['card']['name']
    )
  );

  $url = '/v1/portal/orgs/' . $developer_org['id'] . '/billing';
  $result = ibm_apim_put($url, json_encode($data));
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    drupal_set_message(t('Billing information updated successfully'));
  }
}

/**
 * Display graphs of analytics for the current developer organization
 *
 * @param null $appid
 * @return array
 */
function ibm_apim_analytics_org($appid = NULL) {
  $markup = "";
  $developer_org = ibm_apim_get_current_developer_org();
  $catalog = unserialize(variable_get('ibm_apim_catalog_config'));
  $apim_session = &_ibm_apim_get_apim_session();
  $catalogId = $catalog['id'];
  $catalogName = $catalog['title'];
  $porgid = $catalog['organization']['id'];
  $devorgid = $developer_org['id'];
  $showplaceholders = variable_get('ibm_apim_show_placeholder_images', 1);

  $filterString = '';
  if (isset($appid)) {
    $filter = 'app_id';
    $apim_session['analytics_appid'] = $appid;
    $value = preg_replace("/[^a-zA-Z0-9]+/", "", filter_xss($appid));
    $filterString = '&_a=(filters:!((\'$state\':(store:appState),meta:(index:\'apim-' . $porgid . '*\',key:' . $filter . ',value:\'' . $value . '\'),query:(match:(' . $filter . ':(query:\'' . $value . '\',type:phrase))))))';
  }
  else {
    unset($apim_session['analytics_appid']);
  }

  drupal_add_js('jQuery(document).ready(function(){
      jQuery("#resizable-iframe-wrapper").resizable({
        alsoResize : \'#analytics-iframe\'
      });
    });', 'inline');
  $class = '';
  $markup .= '<h3>' . t('Select a scope:') . '</h3>';
  $markup .= '<ul class="analyticsAppSelector">';
  if (!isset($appid)) {
    $class = 'selected';
  }
  $markup .= '<li class="all ' . $class . '"><a href="' . url('myorg/analytics') . '"><div class="container"><div class="icon"><i class="material-icons">apps</i></div><div class="name">' . t('All applications') . '</div></div></a></li>';
  if (isset($devorgid)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'application')
      ->fieldCondition('application_orgid', 'value', $devorgid);
    $results = $query->execute();
    if (isset($results['node'])) {
      $nids = array();
      foreach ($results['node'] as $item) {
        $nids[] = $item->nid;
      }
      $nodes = node_load_multiple($nids);
      if (isset($nodes) && is_array($nodes)) {
        foreach ($nodes as $app) {
          if (isset($appid) && $appid == $app->application_apiid[$app->language][0]['value']) {
            $class = 'selected';
          }
          else {
            $class = '';
          }
          $icon = '';
          if (isset($app->application_image[$app->language][0]) && !(empty($app->application_image[$app->language][0]))) {
            $icon = '<div class="field field-name-api-image field-type-image field-label-hidden view-mode-teaser">
			   <div class="field-items">
				 <figure class="clearfix field-item even">
				   <img typeof="foaf:Image" class="image-style-none" src="' . file_create_url($app->application_image[$app->language][0]['uri']) . '" width="40" height="40" alt="">
				 </figure>
		       </div>
			 </div>';
          }
          elseif ($showplaceholders != 0) {
            $icon = '<div class="field field-name-api-image field-type-image field-label-hidden view-mode-teaser">
			   <div class="field-items">
				 <figure class="clearfix field-item even">
				   <img typeof="foaf:Image" class="image-style-none" src="' . file_create_url(drupal_get_path('module', 'ibm_apim') . '/images/icons/app/' . application_random_image($app->title)) . '" width="40" height="40" alt="">
				 </figure>
		       </div>
			 </div>';
          }
          $markup .= '<li class="app ' . $class . '"><a href="' . url('myorg/analytics/' . $app->application_apiid[$app->language][0]['value']) . '"><div class="container"><div class="icon">' . $icon . '</div><div class="name">' . check_plain($app->title) . '</div></div></a></li>';
        }
      }
    }
  }
  $markup .= '</ul>';
  $markup .= '<div id="resizable-iframe-wrapper"><iframe id="analytics-iframe" src="' . url('ibm_apim/analyticsiframe/') . '#/dashboard/portal_default?_g=(devOrgId:\'' . $devorgid . '\',catalogId:\'' . $catalogId . '\',catalogName:\'' . urlencode($catalogName) . '\',currentDashboard:portal_default,orgId:\'' . $porgid . '\',refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-4h,mode:quick,to:now))&embed&portal' . $filterString . '" height="800" width="100%"></iframe></div>';
  return array('#markup' => $markup);
}

/**
 * callback for the analytics iframe
 */
function ibm_apim_analytics_iframe() {
  drupal_page_is_cacheable(FALSE);
  $apim_session = &_ibm_apim_get_apim_session();
  global $base_url;
  $base_path = parse_url($base_url, PHP_URL_PATH);
  $developer_org = ibm_apim_get_current_developer_org();
  $catalog = unserialize(variable_get('ibm_apim_catalog_config'));
  $catalogId = $catalog['id'];
  $catalogName = $catalog['title'];
  $porgid = $catalog['organization']['id'];
  $devorgid = $developer_org['id'];
  $filterString = '';
  if (isset($apim_session['analytics_appid'])) {
    $filter = 'app_id';
    $value = preg_replace("/[^a-zA-Z0-9]+/", "", filter_xss($apim_session['analytics_appid']));
    $filterString = '&_a=(filters:!((\'$state\':(store:appState),meta:(index:\'apim-' . $porgid . '*\',key:' . $filter . ',value:\'' . $value . '\'),query:(match:(' . $filter . ':(query:\'' . $value . '\',type:phrase))))))';
  }

  $mgmturl = _ibm_apim_parse_apim_host()['url'];
  $url = $mgmturl . '/v1/kibana/portal-kibana#/dashboard/portal_default?_g=(devOrgId:\'' . $devorgid . '\',catalogId:\'' . $catalogId . '\',catalogName:\'' . urlencode($catalogName) . '\',currentDashboard:portal_default,orgId:\'' . $porgid . '\',refreshInterval:(display:Off,pause:!f,value:0),time:(from:now-4h,mode:quick,to:now))&embed&portal' . $filterString;

  $filtered = _ibm_apim_download_proxy($url, 'GET', NULL, TRUE);
  if (is_string($filtered)) {
    $filtered = preg_replace("@/v1/kibana@", $base_path . "/ibm_apim/analyticsproxy", $filtered);
  }
  print $filtered;
}

/**
 * proxy handling substitutions necessary for the analytics
 * multiple inputs are purely to handle variable numbers of inputs to this script
 * @param null $input1
 * @param null $input2
 * @param null $input3
 * @param null $input4
 * @param null $input5
 * @param null $input6
 * @param null $input7
 * @param null $input8
 * @param null $input9
 * @param null $input10
 */
function ibm_apim_analytics_proxy($input1 = NULL, $input2 = NULL, $input3 = NULL, $input4 = NULL, $input5 = NULL, $input6 = NULL, $input7 = NULL, $input8 = NULL, $input9 = NULL, $input10 = NULL) {
  drupal_page_is_cacheable(FALSE);
  global $base_url;
  $base_path = parse_url($base_url, PHP_URL_PATH);
  $mgmturl = _ibm_apim_parse_apim_host()['url'];
  $string = join('/', func_get_args());
  // trim any naughty attempts to load other files using relative paths
  $string = preg_replace("@\.(\.)+/@", "/", $string);
  $url = $mgmturl . '/v1/kibana/' . $string;

  $data = NULL;
  $verb = $_SERVER['REQUEST_METHOD'];
  if (!isset($verb)) {
    $verb = 'GET';
  }
  if ($verb == 'POST' || $verb == 'PUT') {
    $data = file_get_contents("php://input");
  }

  if (isset($_SERVER['QUERY_STRING']) && strcmp($_SERVER['QUERY_STRING'], '') != 0) {
    $url = $url . '?' . $_SERVER['QUERY_STRING'];
  }

  $headers = array();
  if (isset($_SERVER['HTTP_KBN_VERSION'])) {
    $headers[] = "kbn-version: " . $_SERVER['HTTP_KBN_VERSION'];
  }

  $filtered = _ibm_apim_download_proxy($url, $verb, NULL, TRUE, $data, $headers);
  if (is_string($filtered)) {
    $filtered = preg_replace("@/v1/kibana@", $base_path . "/ibm_apim/analyticsproxy", $filtered);
  }
  print $filtered;
}

/**
 * Gets the current developer org object from a session variable.
 *
 * @return array The the current developer org object or NULL if a user does not belong to a
 *         developer org or one is not set.
 */
function ibm_apim_get_current_developer_org() {
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($apim_session['current_developer_organizations'])) {
    return $apim_session['current_developer_organizations'];
  }
  else {
    _ibm_apim_refresh_user_data();
    if (isset($apim_session['userdata']['orgs'])) {
      $orgs = $apim_session['userdata']['orgs'];
      if (isset($orgs) && isset($orgs[0]['id'])) {
        _ibm_apim_set_current_developer_org($orgs[0]['id']);
      }
      return $orgs[0];
    }
    else {
      return array();
    }
  }
}

/**
 * Generate an array suitable as input for a form select box.
 * The data will
 * be the API methods available for an application id.
 *
 * @param string $appId
 * @return array The array of methods available for the given appId
 */
function _ibm_apim_apis_for_app_select_options($appId) {
  $returnValue = array();
  $plan_data = array();
  if ($appId == '') {
    return $returnValue;
  }
  $returnValue[''] = 'Select a method';
  $org = ibm_apim_get_current_developer_org();
  $developerOrg = $org['id'];
  $url = '/v1/portal/orgs/' . $developerOrg . '/apps/' . $appId . '/subscriptions';
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $plan_data = $result->data;
  }
  if (count($plan_data) == 0) {
    return NULL;
  }
  foreach ($plan_data as $plan_details) {
    if ($plan_details['approved'] == FALSE) {
      continue;
    }
    $result = ibm_apim_call($plan_details['planURL']);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $plan_info = $result->data;
    }
    if (isset($plan_info) && $plan_info['apis']) {
      foreach ($plan_info['apis'] as $api) {
        if ($api['resources']) {
          foreach ($api['resources'] as $resource) {
            $returnValue[$api['api']['apiId'] . ':' . $api['api']['version'] . ':' . $developerOrg . ':' . $resource['id']] = $resource['verb'] . ' ' . $api['api']['name'] . '/' . $resource['name'];
          }
        }
      }
    }
  }
  return $returnValue;
}

/**
 * Callback for serving up the Swagger 2 JSON
 *
 * @param $apiref
 * @return bool
 */
function _ibm_apim_swaggerjson_callback($apiref) {
  if (isset($apiref)) {
    $ref = ibm_apim_base64_url_decode($apiref);

    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'api')
      ->fieldCondition('api_ref', 'value', $ref);

    $results = $query->execute();

    if (isset($results['node'])) {
      $first = array_shift($results['node']);
      $nid = $first->nid;
      $node = node_load($nid);
    }
    if (isset($node)) {
      // check access to this node
      if (api_check_api_access($node)) {
        $yaml = unserialize($node->api_resources[$node->language][0]['value']);
        // if empty securityDefinitions and others then needs to be stdClass not array
        foreach (array(
                   'securityDefinitions',
                   'responses',
                   'parameters',
                   'definitions',
                   'paths'
                 ) as $key) {
          if (is_array($yaml[$key]) && empty($yaml[$key])) {
            unset($yaml[$key]);
          }
          if (is_array($yaml[$key])) {
            foreach ($yaml[$key] as $prop => $value) {
              if ($prop == 'schema') {
                if (is_array($yaml[$key][$prop]) && empty($yaml[$key][$prop])) {
                  unset($yaml[$key][$prop]);
                }
              }
              if (is_array($yaml[$key][$prop])) {
                foreach ($yaml[$key][$prop] as $prop2 => $value2) {
                  if ($prop2 == 'schema' || $prop2 == 'properties') {
                    if (is_array($yaml[$key][$prop][$prop2]) && empty($yaml[$key][$prop][$prop2])) {
                      unset($yaml[$key][$prop][$prop2]);
                    }
                  }
                }
              }
            }
          }
        }
        foreach ($yaml['paths'] as $pathname => $path) {
          foreach ($path as $verb => $op) {
            if (isset($op['responses'])) {
              foreach ($op['responses'] as $code => $response) {
                if (is_array($response['schema']) && empty($response['schema'])) {
                  unset($yaml['paths'][$pathname][$verb]['responses'][$code]['schema']);
                }
              }
            }
          }
        }
        header('Content-type: application/yaml');
        header('Content-Disposition: attachment; filename="' . $node->title . '.yaml"');
        print yaml_emit($yaml, YAML_UTF8_ENCODING);
        return TRUE;
      }
      else {
        drupal_access_denied();
        drupal_exit();
        return FALSE;
      }
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Gets all of the members of the specified developer org
 *
 * @param $developer_org string
 * @return array An array containing details for the members of the org and their roles
 */
function _ibm_apim_get_members($developer_org) {
  $url = '/v1/portal/orgs/' . $developer_org . '/members';
  $returnValue = NULL;
  $result = ibm_apim_call($url);
  if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
    $data = $result->data;
  }
  if (isset($data)) {
    $returnValue = array();
    foreach ($data as $member_record) {
      $temparray = array();
      $temparray['id'] = $member_record['id'];
      $temparray['name'] = $member_record['name'];
      $temparray['status'] = $member_record['status'];
      $temparray['url'] = $member_record['url'];
      if (isset($member_record['roleUrls'])) {
        $member_roles = array();
        $member_displayroles = array();
        foreach ($member_record['roleUrls'] as $roleurl) {
          $roleresult = ibm_apim_call($roleurl);
          if (isset($roleresult) && isset($roleresult->data) && !isset($roleresult->data['errors'])) {
            $member_roles[] = $roleresult->data['name'];
            $member_displayroles[] = $roleresult->data['displayName'];
          }
        }
        $temparray['roles'] = implode(", ", $member_roles);
        $temparray['displayroles'] = implode(", ", $member_displayroles);
      }

      $returnValue[] = $temparray;
    }
  }
  return $returnValue;
}

/**
 * Gets all of the roles in the specified developer org
 *
 * @param $developer_org string
 * @return array An array containing details for the roles
 */
function _ibm_apim_get_roles($developer_org) {
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();
  if (!isset($developer_org)) {
    $org = ibm_apim_get_current_developer_org();
    $developer_org = $org['id'];
  }  if (isset($developer_org)) {
    $url = '/v1/portal/orgs/' . $developer_org . '/roles';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
    return $returnValue;
  }
}

/**
 * Form to delete a user from an org
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_delete_user_from_org($form, &$form_state) {
  $url = '/v1/portal/orgs/' . check_plain($form_state['values']['org']) . '/members/' . check_plain($form_state['values']['id']);
  $result = ibm_apim_delete($url);
  if (isset($result)) {
    drupal_set_message(t('User removed successfully.'));
  }
  $form_state['redirect'] = 'myorg';
}

/**
 * Utility method to create the user object to send to apic
 *
 * @param $values
 * @return array
 */
function ibm_apim_convert_to_apic_address($values) {
  $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
  $name = '';
  $data = array();

  if (isset($values['name'])) {
    $name = $values['name'];
  }
  if (isset($values['pass'])) {
    $pass = $values['pass'];
    $data['password'] = $pass;
  }
  if (isset($values['field_first_name']['und'][0]['value']) && !empty($values['field_first_name']['und'][0]['value'])) {
    $fname = $values['field_first_name']['und'][0]['value'];
    $data['firstName'] = $fname;
  }
  else {
    $data['firstName'] = 'null';
  }
  if (isset($values['field_last_name']['und'][0]['value']) && !empty($values['field_last_name']['und'][0]['value'])) {
    $lname = $values['field_last_name']['und'][0]['value'];
    $data['lastName'] = $lname;
  }
  else {
    $data['lastName'] = 'null';
  }
  if (isset($values['field_developer_organization']['und'][0]['value'])) {
    $developerorg = $values['field_developer_organization']['und'][0]['value'];
    $data['organization'] = $developerorg;
  }
  if (isset($values['mail'])) {
    $mail = $values['mail'];
  }
  else {
    $mail = NULL;
  }
  $username = $name;
  $emailasuser = variable_get('ibm_apim_email_as_username', 1);
  if ($emailasuser) {
    $username = $mail;
  }
  else {
    if (isset($values['mail'])) {
      // if username not email then update that too
      // commented out until APIC API can handle it
      //$data['email'] = $mail;

      // do include email address for authURL user registries
      $config_data = _ibm_apim_get_apim_config();
      if (isset($config_data['userRegistry']) && isset($config_data['userRegistry']['type']) && $config_data['userRegistry']['type'] == "authUrl") {
        $data['email'] = $mail;
      }
    }
  }
  $data['username'] = $username;
  // do not include additionalFields for readonly IDPs
  if ($ibm_apim_readonly_idp != TRUE && $ibm_apim_social_login != TRUE) {
    $data['additionalFields'] = array();
    if (isset($values['mail'])) {
      $data['additionalFields']['email'] = $mail;
    }
    if (isset($values['field_company']['und'][0]['value'])) {
      $companyname = $values['field_company']['und'][0]['value'];
      $data['additionalFields']['company_name'] = $companyname;
    }
    if (isset($values['field_phone']['und'][0]['value'])) {
      $phone = $values['field_phone']['und'][0]['value'];
      $data['additionalFields']['phone_number'] = array(array('value' => $phone));
    }
    if (isset($values['field_address']['und'][0])) {
      $administrative_area = @$values['field_address']['und'][0]['administrative_area'] or $administrative_area = "";
      $country = @$values['field_address']['und'][0]['country'] or $country = "";
      $locality = @$values['field_address']['und'][0]['locality'] or $locality = "";
      $postal_code = @$values['field_address']['und'][0]['postal_code'] or $postal_code = "";
      $thoroughfare = @$values['field_address']['und'][0]['thoroughfare'] or $thoroughfare = "";
      $premise = @$values['field_address']['und'][0]['premise'] or $premise = "";
      $address = array(
        'administrative_area' => $administrative_area,
        'country' => $country,
        'locality' => $locality,
        'postal_code' => $postal_code,
        'thoroughfare' => $thoroughfare,
        'premise' => $premise
      );
      $data['additionalFields']['addresses'] = array($address);
    }
  }

  return $data;
}

/**
 * Form to resend a user's invite email from the IBM APIm system.
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_resend_user_invite_from_org($form, &$form_state) {
  watchdog('_ibm_apim_resend_user_invite_from_org', 'resend invite to %id', array('%id' => check_plain($form_state['values']['id'])), WATCHDOG_NOTICE);
  $apim_session = &_ibm_apim_get_apim_session();
  $url = '/v1/portal/users/' . check_plain($form_state['values']['id']) . '/resendInvite?' . 'idpOrganization=' . $apim_session['org'] . '&idpEnvironment=' . $apim_session['env'] . '&consumerOrg=' . check_plain($form_state['values']['org']);
  $result = ibm_apim_post($url, '');
  if (isset($result) && $result->code >= 200 && $result->code < 300) {
    drupal_set_message(t('Invite resent successfully.'));
  }

  $form_state['redirect'] = 'myorg';
}

/**
 * Determine if the current user is logged in and not admin
 *
 * @return boolean
 */
function _ibm_apim_user_is_not_admin() {
  global $user;
  if (user_is_logged_in() && isset($user) && $user->uid != 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Determine if the current user is logged in and not admin and analytics is enabled
 *
 * @return boolean
 */
function _ibm_apim_user_is_not_admin_analytics() {
  global $user;
  $analytics_enabled = variable_get('ibm_apim_show_analytics', 1);
  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
  $pdur_analytics_enabled = variable_get('ibm_apim_pdur_analytics', 0);
  if ($analytics_enabled == 1 && ($ibm_apim_social_login == 0|| $pdur_analytics_enabled == 1) && user_is_logged_in() && isset($user) && $user->uid != 1) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Determine if the current user is logged in, the devorg owner and not admin and billing is enabled
 *
 * @return boolean
 */
function _ibm_apim_billing_access() {
  global $user;
  $billing_enabled = variable_get('ibm_apim_billing_enabled', 0);
  if ($billing_enabled == 1 && user_is_logged_in() && isset($user) && $user->uid != 1 && _ibm_apim_user_is_org_owner()) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Determine if the current user is the owner of the current developer org
 *
 * @return boolean TRUE if the user is the owner of the current developer org, FALSE otherwise.
 */
function _ibm_apim_user_is_org_owner() {
  global $user;
  $apim_session = &_ibm_apim_get_apim_session();
  $currentorg = ibm_apim_get_current_developer_org();
  if (isset($currentorg) && isset($apim_session['developer_organizations'])) {
    foreach ($apim_session['developer_organizations'] as $org) {
      if ($org['id'] == $currentorg['id']) {
        if ($org['owner'] == TRUE) {
          return TRUE;
        }
      }
    }
  }
  elseif (isset($currentorg) && isset($apim_session['userdata']['orgs'])) {
    foreach ($apim_session['userdata']['orgs'] as $org) {
      if ($org['id'] == $currentorg['id']) {
        foreach ($org['roles'] as $role) {
          if ($role['name'] == 'owner') {
            return TRUE;
          }
        }
      }
    }
  }
  elseif (isset($currentorg) && isset($user->data)) {
    $url = '/v1/portal/orgs/' . $currentorg['id'] . '/owner';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors']) && isset($apim_session['memberid'])) {
      if ($result->data['id'] === $apim_session['memberid']) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Determine if the current user is a developer in the current developer org
 * This method uses a cache to avoid hitting the server too hard
 *
 * @return boolean TRUE if the user is in the develeoper role in the current developer org, FALSE otherwise.
 */
function ibm_apim_check_is_developer() {
  $apim_session = &_ibm_apim_get_apim_session();
  if (!isset($apim_session['isdeveloper'])) {
    $apim_session['isdeveloper'] = _ibm_apim_user_is_developer();
  }
  return $apim_session['isdeveloper'];
}

/**
 * Determine if the current user is a developer in the current developer org
 *
 * @return boolean TRUE if the user is in the develeoper role in the current developer org, FALSE otherwise.
 */
function _ibm_apim_user_is_developer() {
  $returnValue = FALSE;
  global $user;
  $apim_session = &_ibm_apim_get_apim_session();
  $currentorg = ibm_apim_get_current_developer_org();
  if (!user_is_logged_in() || $user->uid == 1) {
    return FALSE;
  }
  else if (isset($currentorg) && isset($apim_session['userdata'])) {
    foreach ($apim_session['userdata']['orgs'] as $org) {
      if ($org['id'] == $currentorg['id']) {
        foreach ($org['roles'] as $role) {
          if ($role['name'] == 'owner' || $role['name'] == 'developer') {
            $returnValue = TRUE;
          }
        }
      }
    }
  }
  else {
    if (isset($currentorg) && isset($apim_session['developer_organizations'])) {
      foreach ($apim_session['developer_organizations'] as $org) {
        if ($org['id'] == $currentorg['id']) {
          if ($org['owner'] == TRUE) {
            $returnValue = TRUE;
          }
        }
      }
    }

    if (isset($currentorg) && $returnValue != TRUE) {
      $url = '/v1/portal/orgs/' . $currentorg['id'] . '/members';
      $result = ibm_apim_call($url);
      if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
        foreach ($result->data as $data) {
          if (isset($data['id']) && isset($data['roleUrls']) && ($data['id'] === $apim_session['memberid'] || $data['name'] == $user->name)) {
            foreach ($data['roleUrls'] as $roleurl) {
              $roleresult = ibm_apim_call($roleurl);
              if (isset($roleresult) && isset($roleresult->data) && !isset($roleresult->data['errors'])) {
                if ($roleresult->data['name'] == "developer" || $roleresult->data['name'] == "owner") {
                  $returnValue = TRUE;
                }
              }
            }
          }
        }
      }
    }
  }
  return $returnValue;
}

/**
 * Page callback to the bookmarks for the current user
 * only really needed here since can't put the uid in a path
 */
function _ibm_apim_mybookmarks() {
  global $user;
  if (isset($user->uid)) {
    drupal_goto('user/' . $user->uid . '/bookmarks');
  }
}

/**
 * Page callback to display the members of the current developer org
 * @return string
 */
function _ibm_apim_myorg_page() {
  drupal_add_library('system', 'ui.accordion');
  drupal_add_js('jQuery(document).ready(function(){
      jQuery("div#accordion").accordion({
        header: "> div > h3",
        collapsible: true,
        active: false,
        heightStyle: "content",
      });
    });', 'inline');

  $markup = '';

  $image = theme('image', array(
    'path' => file_create_url(drupal_get_path('module', 'ibm_apim') . '/images/user_add.png'),
    'width' => '20',
    'height' => '20',
    'title' => 'Add a user',
    'alt' => 'Invite user'
  ));

  $_ibm_apim_invite_user_form = drupal_get_form('_ibm_apim_invite_user_form');
  if (_ibm_apim_user_is_org_owner()) {
    $markup .= '<div class="myorgLinks"><div class="myorgEditLink">' . l(t('Edit organization'), 'myorg/edit') . '</div>';
    $ibm_apim_allow_devorg_ownerchange = variable_get('ibm_apim_allow_devorg_ownerchange', TRUE);
    if ($ibm_apim_allow_devorg_ownerchange == TRUE) {
      $markup .= '<div class="myorgOwnerChangeLink">' . l(t('Change ownership'), 'myorg/changeowner') . '</div>';
    }
    $ibm_apim_allow_devorg_deletion = variable_get('ibm_apim_allow_devorg_deletion', TRUE);
    if ($ibm_apim_allow_devorg_deletion == TRUE) {
      $markup .= '<div class="myorgDeleteLink">' . l(t('Delete organization'), 'myorg/delete') . '</div>';
    }
    $markup .= '</div>';
  }

  $disallow_invitations = variable_get('ibm_apim_disallow_invitations', 0);
  if ($disallow_invitations != 1 && _ibm_apim_user_is_org_owner()) {
    $markup .= '<div id="accordion"><div class="myorgAddUserLink"><h3>' . t('Add a user') . $image . '</h3>';
    $markup .= '<div class="portalApi animateMaxHeight">' . drupal_render($_ibm_apim_invite_user_form) . '</div></div></div>';
  }
  $markup .= '<div class="clearBoth" id="ajax-response-goes-here"></div>';

  $limit = variable_get('default_nodes_main', 10);
  $developer_org = ibm_apim_get_current_developer_org();
  $members = array();
  if (isset($developer_org)) {
    $members = _ibm_apim_get_members($developer_org['id']);
    if ($members) {
      $page = pager_find_page();
      $total = count($members);
      $offset = $limit * $page;
      $chunk = array_slice($members, $offset, $limit);
      pager_default_initialize($total, $limit);
      foreach ($chunk as $member) {
        $user_form = drupal_get_form('_ibm_apim_myorg_user_form_' . $member['id'], $member, $developer_org['id']);
        $markup .= drupal_render($user_form);
      }
    }
  }
  $output = $markup;
  $output .= theme('pager', array('quantity', count($members)));
  return $output;
}

/**
 * AJAX callback to add the invite user form to the organization page.
 *
 * @param $ajax
 * @return array
 */
function _ibm_apim_myorg_ajax_link_callback($ajax) {
  if ($ajax == 'ajax') {
    $_ibm_apim_invite_user_form = drupal_get_form('_ibm_apim_invite_user_form');
    $markup = drupal_render($_ibm_apim_invite_user_form);

    $commands = array();
    // Ajax command to replace the #ajax-response-goes-here element with the form.
    $commands[] = ajax_command_replace('#ajax-response-goes-here', '<div class="clearBoth" id="ajax-response-goes-here">' . $markup . '</div>');
    // Add a visual "changed" marker.
    $commands[] = ajax_command_changed('#ajax-response-goes-here');
    // Menu 'page callback' and #ajax['callback'] functions return render
    // arrays. Render array wrapper for the AJAX commands array.
    ajax_deliver(array('#type' => 'ajax', '#commands' => $commands));
  }
  else {
    return array('#markup' => '');
  }
  return NULL;
}

/**
 * Form to allow user to edit their organization details.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function _ibm_apim_edit_myorg($form, &$form_state) {
  $org_data = array();
  $org_data['name'] = '';
  $ibm_apim_allow_devorg_rename = variable_get('ibm_apim_allow_devorg_rename', TRUE);
  if ($ibm_apim_allow_devorg_rename == 1) {
    $org = ibm_apim_get_current_developer_org();
    $developerOrg = $org['id'];
    $result = ibm_apim_call('/v1/portal/orgs/' . $developerOrg);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $org_data = $result->data;
    }
    $form = array();
    $form['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Organization name'),
      '#size' => 25,
      '#maxlength' => 50,
      '#required' => TRUE,
      '#default_value' => $org_data['name']
    );
    $form['orgid'] = array('#type' => 'hidden', '#value' => $developerOrg);

    $form['actions'] = ['#type' => 'actions'];
    $form['actions']['cancel'] = array(
      '#type' => 'link',
      '#title' => t('Cancel'),
      '#href' => 'myorg',
    );
    $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['actions']['#submit'] = array('_ibm_apim_edit_myorg_submit_handler');
    $form['#submit'] = array('_ibm_apim_edit_myorg_submit_handler');
    $form['#attributes']['class'] = 'reg-form';
    return $form;
  }
  else {
    drupal_set_message(t('Access Denied.'), 'error');
    return array();
  }
}

/**
 * Submit handler for the organization edit form.
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_edit_myorg_submit_handler($form, &$form_state) {
  $name = filter_xss($form_state['values']['name']);
  $orgid = check_plain($form_state['values']['orgid']);
  $ibm_apim_allow_devorg_rename = variable_get('ibm_apim_allow_devorg_rename', TRUE);
  if ($ibm_apim_allow_devorg_rename == 1) {
    if (empty($name)) {
      drupal_set_message(t('An organization name is required.', 'error'));
      watchdog('_ibm_apim_edit_myorg_submit_handler', 'Missing organization name', array(), WATCHDOG_NOTICE);
    }

    // update APIm
    $result = ibm_apim_update_org_name($orgid, $name);
    if (isset($result) && ($result->code == 200 && $result->code < 300)) {
      drupal_set_message(t('Organization name updated.'));
      $apim_session = &_ibm_apim_get_apim_session();
      unset($apim_session['developer_organizations']);
      // clear cache
      cache_clear_all();
      _ibm_apim_refresh_user_data();
      _ibm_apim_set_current_developer_org($orgid);
      $developer_org = ibm_apim_get_current_developer_org();
    }
  }
  $form_state['redirect'] = 'myorg/';
}


/**
 * Form to allow user to change owner of devorg
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function _ibm_apim_change_owner_myorg($form, &$form_state) {
  $ibm_apim_allow_devorg_ownerchange = variable_get('ibm_apim_allow_devorg_ownerchange', TRUE);
  if ($ibm_apim_allow_devorg_ownerchange == 1) {
    $developer_org = ibm_apim_get_current_developer_org();
    $members = array();
    $values = array();
    global $user;
    if (isset($developer_org)) {
      $members = _ibm_apim_get_members($developer_org['id']);
      if ($members) {
        // If there is only one member, do not allow change
        if(count($members) === 1) {
          drupal_set_message(t('Cannot change ownership: only one user in developer organization %org', array("%org" =>$developer_org['name'])),'error');
          return array();
        }
        foreach ($members as $member) {
          // Don't include the current user in the list
          if ($member['id'] != $user->data['remote_id']) {
            $values[$member['name']] = $member['name'];
          }
        }
      } else {
        drupal_set_message(t('Failed to retrieve member list for developer organization %org', array("%org" =>$developer_org['name'])),'error');
        return array();
      }
    }
    $form['change_owner_fieldset']['new_owner'] = array(
      '#title' => t('New Owner'),
      '#type' => 'select',
      '#description' => "Select the user to take ownership.",
      '#options' => $values
    );
    return confirm_form($form, t('Change ownership of this developer organization'), '<front>', t('Are you sure you want to change ownership of this developer organization?'), t('Change'), t('Cancel'));
  }
  else {
    drupal_set_message(t('Access Denied.'), 'error');
    return array();
  }
}

/**
 * Submit handler for the organization ownership change form.
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_change_owner_myorg_submit($form, &$form_state) {
  $ibm_apim_allow_devorg_ownerchange = variable_get('ibm_apim_allow_devorg_ownerchange', TRUE);
  if ($ibm_apim_allow_devorg_ownerchange == 1) {
    $org = ibm_apim_get_current_developer_org();
    $developerOrg = $org['id'];

    $url = '/v1/portal/orgs/' . $developerOrg . '/owner';
    $name = check_plain($form_state['values']['new_owner']);

    $result = ibm_apim_put($url,'{"name":"'.$name.'"}');
    if (isset($result) && ($result->code == 204)) {
      drupal_set_message(t('Organization Ownership Changed.'));
      // Tidy up the local drupal session so we know about the change
      $apim_session = &_ibm_apim_get_apim_session();
      unset($apim_session['current_developer_organizations']);
      cache_clear_all();
      _ibm_apim_refresh_user_data();
      ibm_apim_get_current_developer_org();
    } else {
      drupal_set_message(t('Organization Ownership Change Failed: %code', array("%code" => $result->code)),'error');
    }
  }
  $form_state['redirect'] = '<front>';
}

/**
 * Form to allow user to delete their organization.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function _ibm_apim_delete_myorg($form, &$form_state) {

  $ibm_apim_allow_devorg_deletion = variable_get('ibm_apim_allow_devorg_deletion', TRUE);
  if ($ibm_apim_allow_devorg_deletion == 1) {
    if (sizeof(_ibm_apim_load_developer_orgs()) > 1) {
      return confirm_form($form, t('Are you sure you want to delete this developer organization?'), '<front>', t('This action will permanently remove access to the organization, and all of its applications and subscriptions, for all members of the organization. Please note that once an organization has been deleted, it cannot be reactivated. You might want to consider changing ownership of your Developer organizations, before deleting your account.'), t('Delete'), t('Cancel'));
    }
    else {

      $message = t('You cannot delete your organization because you are not a member of any other organizations.');
      drupal_set_message($message, 'error');

      $form = array();
      $form['description'] = array('#markup' => t('You cannot delete your organization because you must be a member of at least one organization.'));

      $form['actions'] = array('#type' => 'actions');
      $form['actions']['cancel'] = array(
        '#type' => 'link',
        '#title' => t('Cancel'),
        '#href' => 'myorg',
      );

      return $form;
    }
  }
  else {
    drupal_set_message(t('Access Denied.'), 'error');
    return array();
  }
}

/**
 * Submit handler for the organization delete form.
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_delete_myorg_submit($form, &$form_state) {

  $ibm_apim_allow_devorg_deletion = variable_get('ibm_apim_allow_devorg_deletion', TRUE);
  if ($ibm_apim_allow_devorg_deletion == 1) {
    $org = ibm_apim_get_current_developer_org();
    $developerOrg = $org['id'];

    $url = '/v1/portal/orgs/' . $developerOrg;

    $result = ibm_apim_delete($url);
    if (isset($result) && $result->code == 204) {
      drupal_set_message(t('Organization deleted.'));
      $apim_session = &_ibm_apim_get_apim_session();
      unset($apim_session['developer_organizations']);
      // clear cache
      cache_clear_all();
      _ibm_apim_refresh_user_data();
      ibm_apim_get_current_developer_org();
    }
  }
  $form_state['redirect'] = '<front>';
}

/**
 * Form to allow user to delete their account.
 *
 * @param $form
 * @param $form_state
 * @return array
 */
function _ibm_apim_delete_user($form, &$form_state) {
  global $user;
  $ibm_apim_allow_user_deletion = variable_get('ibm_apim_allow_user_deletion', TRUE);
  if ($ibm_apim_allow_user_deletion == 1 && $user->uid != 1) {

    $form = array();

    $current_org_owner = _ibm_apim_user_is_org_owner();
    $owner_of_orgs = _ibm_apim_owned_developer_orgs();

    if (sizeof($owner_of_orgs) > 1) {
      drupal_set_title(t('Delete account'));
      $form['description'] = ['#markup' => t('You are the owner of multiple Developer organizations. You can delete your account only when you are the owner of a single organization. Please transfer the ownership of, or delete, the other organizations before you delete your account.')];

      $form['actions'] = ['#type' => 'actions'];
      $form['actions']['cancel'] = [
        '#type' => 'link',
        '#title' => t('Cancel'),
        '#href' => '<front>',
      ];

    }
    else {
      drupal_set_title(t('Are you sure you want to delete your account?'));
      $form['#attributes']['class'][] = 'confirmation';
      $form['description'] = ['#markup' => t('Are you sure you want to delete your account? This action cannot be undone.')];
      if ($current_org_owner && (sizeof($owner_of_orgs) == 1)) {
        $form['delete_org_msg'] = [
          '#markup' => '<div class="deleteOrgMessage">' . t('This action will remove the organization you own. This permanently removes access to the organization, and all of its applications and subscriptions, for all members of the organization. Please note that once an organization has been deleted, it cannot be reactivated. You might want to consider changing ownership of your Developer organizations, before deleting your account.') . '</div>',
        ];
        $form['delete_org'] = [
          '#type' => 'value',
          '#value' => TRUE,
        ];
      }

      $form['actions'] = ['#type' => 'actions'];
      $form['actions']['submit'] = [
        '#type' => 'submit',
        '#value' => t('Confirm'),
      ];
      $form['actions']['cancel'] = [
        '#type' => 'link',
        '#title' => t('Cancel'),
        '#href' => '<front>',
      ];
      // By default, render the form using theme_confirm_form().
      if (!isset($form['#theme'])) {
        $form['#theme'] = 'confirm_form';
      }
    }
    return $form;
  }
  else {
    drupal_set_message(t('Access Denied.'), 'error');
    return array();
  }
}

/**
 * Submit handler for the account delete form.
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_delete_user_submit($form, &$form_state) {
  global $user;
  $ibm_apim_allow_user_deletion = variable_get('ibm_apim_allow_user_deletion', TRUE);
  if ($ibm_apim_allow_user_deletion == 1 && $user->uid != 1) {


    if ($form_state['values']['delete_org'] == TRUE) {
      _ibm_apim_delete_myorg_submit($form, $form_state);
    }

    $url = '/v1/portal/me';

    $result = ibm_apim_delete($url);

    if (isset($result) && $result->code == 204) {

      // clear cache
      cache_clear_all();
      // delete them from the drupal database, reassigning their content to anon
      user_cancel(array('user_cancel_notify' => FALSE), $user->uid, 'user_cancel_reassign');
      // Since user_cancel() is not invoked via Form API, batch processing needs
      // to be invoked manually and should redirect to the front page after
      // completion.
      batch_process('');
      drupal_set_message(t('Account deleted.'));
      // force log the user out
      user_logout();
    }
  }
  $form_state['redirect'] = '<front>';
}

/**
 * Form to invite a user to the current developer org
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function _ibm_apim_invite_user_form($form, $form_state) {
  $org = ibm_apim_get_current_developer_org();
  $form['invite_user_fieldset'] = array(
    '#type' => 'fieldset',
    '#attributes' => array('class' => array('container-inline'))
  );
  $form['invite_user_fieldset']['developer_org'] = array(
    '#type' => 'hidden',
    '#value' => $org['id']
  );
  $emailasuser = variable_get('ibm_apim_email_as_username', 1);
  $inviteviaemail = variable_get('ibm_apim_inviteViaEmailOnly', 0);
  $sociallogin = variable_get('ibm_apim_social_login', 0);
  if ($emailasuser == 1 || $sociallogin == 1 || $inviteviaemail == 1) {
    $form['invite_user_fieldset']['new_email'] = array(
      '#type' => 'textfield',
      '#title' => t('New user\'s e-mail address'),
      '#required' => TRUE
    );
  }
  else {
    $form['invite_user_fieldset']['new_email'] = array(
      '#type' => 'textfield',
      '#title' => t('New user\'s username'),
      '#required' => TRUE
    );
  }

  $roles = _ibm_apim_get_roles($org['id']);
  if (isset($roles) && count($roles) >= 1) {
    $roles_array = array();
    foreach ($roles as $role) {
      $roles_array[$role['name']] = $role['displayName'];
    }

    $form['invite_user_fieldset']['role'] = array(
      '#type' => 'radios',
      '#title' => t('Role'),
      '#default_value' => empty(!$roles) ? $roles[(count($roles)-1)]['name'] : 'developer',
      '#options' => $roles_array,
      '#disabled' => count($roles_array) == 1,
      '#description' => t('Select which role the new user will have in your organization.')
    );
  }
  $form['invite_user_fieldset']['invite_button'] = array(
    '#value' => t('Invite new user'),
    '#type' => 'submit',
    '#name' => 'invite_user',
    '#submit' => array('_ibm_apim_invite_user_form_submit_handler')
  );
  return $form;
}

/**
 * Submit handler to invite a user to the current org
 *
 * @param $form
 * @param $form_state
 */
function _ibm_apim_invite_user_form_submit_handler($form, &$form_state) {
  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  $url = '/v1/portal/orgs/' . $developerOrgs . '/members';
  $name = check_plain(trim($form_state['values']['new_email']));
  if (isset($name)) {
    $result = ibm_apim_call($url);
    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      $data = array(
        "emailURLSuffix" => "?q=ibm_apim/activate/x",
        "name" => $name
      );
      if (isset($form_state['values']['role'])) {
        $data["roles"] = array($form_state['values']['role']);
      }
      $add_member_result = ibm_apim_post($url, json_encode($data));
      if (isset($add_member_result) && $add_member_result->code >= 200 && $add_member_result->code < 300) {
        drupal_set_message(t('Invite sent successfully.'));
      }
    }
  }
  else {
    drupal_set_message(t('No user specified.'), 'error');
  }
  $form_state['redirect'] = 'myorg';
}

/**
 * Form to display details about a user
 * @param $form
 * @param $form_state
 * @param $otheruser
 * @param $developer_org
 * @return mixed
 */
function _ibm_apim_myorg_user_form($form, &$form_state, $otheruser, $developer_org) {
  global $user;
  $fieldset_title = $otheruser['name'];
  $form['user_fieldset_' . $otheruser['id']] = array(
    '#title' => $fieldset_title,
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => FALSE
  );

  $form['user_fieldset_' . $otheruser['id']]['id'] = array(
    '#type' => 'hidden',
    '#value' => $otheruser['id']
  );
  $form['user_fieldset_' . $otheruser['id']]['org'] = array(
    '#type' => 'hidden',
    '#value' => $developer_org
  );

  $form['user_fieldset_' . $otheruser['id']]['status'] = array('#markup' => t('Status:') . ' ' . $otheruser['status'] . '<br/><br/>');

  $form['user_fieldset_' . $otheruser['id']]['displayroles'] = array(
    '#markup' => t('Role:') . ' ' . $otheruser['displayroles'] . '<br/><br/>'
  );
  if (_ibm_apim_user_is_org_owner()) {
    // can't remove yourself since not allowed to remove the owner of an org
    // and you'd only be seeing this form if you are the org owner
    if ($otheruser['name'] != $user->name) {
      $form['user_fieldset_' . $otheruser['id']]['delete_user'] = array(
        '#value' => t('Remove user'),
        '#type' => 'submit',
        '#name' => 'remove_user',
        '#submit' => array('_ibm_apim_delete_user_from_org')
      );
    }
    // commented out until there is a portal API to actually invoke!
    //    if (strtolower($otheruser['status']) == 'pending') {
    //      $form['user_fieldset_' . $otheruser['id']]['resend_invite'] = array(
    //        '#value' => t('Resend invite'),
    //        '#type' => 'submit',
    //        '#name' => 'resend_invite',
    //        '#submit' => array('_ibm_apim_resend_user_invite_from_org')
    //      );
    //    }
  }
  return $form;
}

/**
 * Implementation of hook_form_node_form_alter().
 *
 * @param $form
 * @param $form_state
 */
function ibm_apim_form_node_form_alter(&$form, &$form_state) {
  // Add linkit libraries to node edit pages.
  // Since paragraphs are added through ajax, not all linkit libraries are
  // loaded when needed. We fix this by adding the linkit libraries here.
  if (module_exists('linkit')) {
    // Add the linkit library for fields.
    drupal_add_library('linkit', 'field');
    // Add the linkit library for the editor.
    drupal_add_library('linkit', 'tinymce');
  }
}

/**
 * Implementation of hook_forms().
 * Catching the _ibm_apim_myorg_user_form_<userid> to
 * return _ibm_apim_myorg_user_form, this is required to have a unique form id on the page
 * for each member of an organization.
 *
 * @param $form_id
 * @param $args
 * @return array
 */
function ibm_apim_forms($form_id, $args) {
  $forms = array();
  if (mb_strpos($form_id, '_ibm_apim_myorg_user_form_') === 0) {
    $forms[$form_id] = array('callback' => '_ibm_apim_myorg_user_form');
  }
  return $forms;
}

/**
 * Generates the HTML for the dropdown organization selection menu
 * @return string
 */
function ibm_apim_select_developer_menu() {
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($apim_session['userdata'])) {
    $result = $apim_session['userdata']['orgs'];
  }
  else {
    $result = _ibm_apim_load_developer_orgs();
  }
  $markup = '';
  if (isset($result)) {
    $count = count($result);
    if ($count == 1) {
      _ibm_apim_set_current_developer_org($result[0]['id']);
      $markup .= '<div class="elipsis-names singleOrg" title="' . t("Current organization name: ") . filter_xss($result[0]['name']) . '">' . filter_xss($result[0]['name']) . '</div>';
    }
    elseif ($count > 1) {
      $selected = ibm_apim_get_current_developer_org();
      if (!isset($selected) || empty($selected)) {
        $selected = _ibm_apim_set_current_developer_org($result[0]['id']);
      }
      $selected_name = filter_xss($selected['name']);
      $selected_id = check_plain($selected['id']);
      $markup .= '<ul class="dropitmenu orgmenu"><li><a href="#"><div class="elipsis-names">' . $selected_name . '</div> <span class="dropit-icon ui-icon-triangle-1-s"></span></a>';
      $markup .= '<ul id="dropdown-menu" class="dropdown-menu">';
      foreach ($result as $developer_org) {
        $markup .= '<li class="elipsis-names" title="' . filter_xss($developer_org['name']) . '">' . l(filter_xss($developer_org['name']), 'ibm_apim/org/' . check_plain($developer_org['id']), array(
            'html' => TRUE,
            'attributes' => array('class' => array('elipsis-names'))
          )) . '</li>';
      }
      $markup .= '</ul></li></ul>';
    }
  }
  return $markup;
}

/**
 * A function to update the organization name.
 *
 * @param null $orgid
 * @param null $orgname
 * @return array|null
 */
function ibm_apim_update_org_name($orgid = NULL, $orgname = NULL) {
  global $user;
  $result = NULL;
  if (isset($orgid) && isset($orgname)) {
    $apim_session = &_ibm_apim_get_apim_session();
    $newdata = array('name' => filter_xss($orgname));
    $developer_org_url = '/orgs/' . check_plain($orgid);
    $url = '/v1/portal' . $developer_org_url;
    $result = ibm_apim_put($url, json_encode($newdata));
  }
  return $result;
}

/**
 * Implementation of hook_form_alter().
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function ibm_apim_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  switch ($form_id) {
    case 'contact_site_form':
      // if logged in then make the contact form mail field readonly
      if (user_is_logged_in() && isset($user->mail)) {
        if (isset($form['mail'])) {
          $form['mail']['#default_value'] = $user->mail;
          $form['mail']['#disabled'] = TRUE;
        }
      }
      break;
    case 'flood_control_settings_form' :
      $form['apic_intro'] = array(
              '#markup' => '<br/><br/><p>' . t('Note: These settings control the login security provided by the Flood Control module.  Users blocked by these settings can be unblocked via the reset_locked_user CLI command.  These settings are independent of the Login Security settings managed in Configuration->People') . '</p>',
            '#weight' => -10
            );
      break;      
    case 'login_security_admin_settings' :
      $form['apic_intro'] = array(
            '#markup' => '<br/><br/><p>' . t('Note: These settings control the login security that the portal site administrator manages (unblocking users by applying the \'Unblock the selected users\' operation from the People menu).  These settings are independent of those set for Flood Control - accessed from the Configuration->System menu') . '</p>',
            '#weight' => -10
      );
      break;
    case 'user_multiple_cancel_confirm':
      $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
      if ($ibm_apim_social_login == 1) {
        $form['apic_intro'] = array(
          '#markup' => '<br/><br/><p>' . t('Note: Cancelling another user\'s account in the portal will NOT delete their account from IBM API Connect. Users must delete their own accounts from their \'Edit Profile\' page for them to be completely deleted from IBM API Connect.') . '</p>',
          '#weight' => 20
        );
      } else {
        $form['apic_intro'] = array(
          '#markup' => '<br/><br/><p>' . t('Note: Cancelling another user\'s account in the portal will NOT delete their account from IBM API Connect, the information in the Portal database will simply be recreated when they next login. Users must delete their own accounts from their \'Edit Profile\' page for them to be completely deleted from IBM API Connect.') . '</p>',
          '#weight' => 20
        );
      }
      break;
    case 'system_modules' :
      // hide the Core openid module
      if (isset($form['modules']['Core']['openid'])) {
        unset($form['modules']['Core']['openid']);
      }
      break;
    case 'password_policy_admin_form' :
      // Hide the history field
      if (isset($form['constraints']['constraint_history'])) {
         unset($form['constraints']['constraint_history']);
      }
      break;
    case 'field_ui_field_overview_form' :
      // do not allow deletion of our custom fields
      $reservedfields = NULL;
      if ($form['#bundle'] == 'api') {
        $reservedfields = _api_get_ibm_fields();
      }
      elseif ($form['#bundle'] == 'application') {
        $reservedfields = _application_get_ibm_fields();
      }
      elseif ($form['#bundle'] == 'product') {
        $reservedfields = _product_get_ibm_fields();
      }
      elseif ($form['#bundle'] == 'devorg') {
        $reservedfields = _devorg_get_ibm_fields();
      }
      if (is_array($reservedfields)) {
        foreach ($reservedfields as $ibmfield) {
          if (isset($form['fields'][$ibmfield]['delete'])) {
            unset($form['fields'][$ibmfield]['delete']);
          }
        }
      }
      break;
    case 'user_login':
    case 'user_login_block':
      $user_login_final_validate_index = array_search('user_login_final_validate', $form['#validate']);
      if ($user_login_final_validate_index >= 0) {
        $form['#validate'][$user_login_final_validate_index] = 'ibm_apim_custom_final_validate';
      }
      break;
    case 'user_register_form' :
    case 'ibm_apim_activate_create_account_form' :
      if (isset($form['field_developer_organization'])) {
        // force devorg field to look like a single text entry field even if we now have infinite cardinality
        $form['field_developer_organization']['und']['#cardinality'] = '1';
        $form['field_developer_organization']['und'][0]['#cardinality'] = '1';
        if (isset($form['field_developer_organization']['und'][0]['_weight'])) {
          unset($form['field_developer_organization']['und'][0]['_weight']);
        }
        if (isset($form['field_developer_organization']['und']['add_more'])) {
          unset($form['field_developer_organization']['und']['add_more']);
        }
        if (isset($form['field_developer_organization']['und']['#description'])) {
          $form['field_developer_organization']['und'][0]['#description'] = $form['field_developer_organization']['und']['#description'];
          $form['field_developer_organization']['und'][0]['value']['#description'] = $form['field_developer_organization']['und']['#description'];
        }
        if (isset($form['field_developer_organization']['und']['#title'])) {
          $form['field_developer_organization']['und'][0]['#title'] = $form['field_developer_organization']['und']['#title'];
          $form['field_developer_organization']['und'][0]['value']['#title'] = $form['field_developer_organization']['und']['#title'];
        }
      }
      break;
    case 'user_profile_form' :
      // hide the devorg field since it is only used on user create
      if (isset($form['field_developer_organization']) && variable_get('ibm_apim_hide_devorg_field', TRUE)) {
        unset($form['field_developer_organization']);
      }

      $ibm_apim_allow_user_deletion = variable_get('ibm_apim_allow_user_deletion', TRUE);
      if ($ibm_apim_allow_user_deletion == TRUE && $user->uid != 1) {
        global $user;
        // only if editing own account
        if ($form['#user']->uid == $user->uid) {
          $form['delete'] = array(
            '#weight' => 500,
            '#markup' => '<div class="deleteAccountWrapper"><div class="deleteAccountLink">' . l(t('Delete account'), 'user/delete') . '</div></div>'
          );
        }
      }
      break;
    case 'seckit_admin_form':
      unset($form['seckit_xss']['csp']);
      unset($form['seckit_ssl']);
      break;
    case 'backup_migrate_ui_manual_quick_backup_form':
      if (isset($form['quickbackup']['source_id']['#options'])) {
        $options = array();
        foreach ($form['quickbackup']['source_id']['#options'] as $key => $option) {
          if ($key != 'archive') {
            $options[$key] = $option;
          }
        }
        $form['quickbackup']['source_id']['#options'] = $options;
      }
      break;
    case 'backup_migrate_ui_manual_backup_form':
      if (isset($form['source']['source_id']['#options'])) {
        $options = array();
        foreach ($form['source']['source_id']['#options'] as $key => $option) {
          if ($key != 'archive') {
            $options[$key] = $option;
          }
        }
        $form['source']['source_id']['#options'] = $options;
      }
      if (isset($form['sources']['archive'])) {
        unset($form['sources']['archive']);
      }
      break;
    case 'backup_migrate_ui_manual_restore_form':
      if (isset($form['source_id']['#options'])) {
        $options = array();
        foreach ($form['source_id']['#options'] as $key => $option) {
          if ($key != 'archive') {
            $options[$key] = $option;
          }
        }
        $form['source_id']['#options'] = $options;
      }
      break;
    case 'backup_migrate_crud_edit_form':
      if (isset($form['source']['source_id']['#options'])) {
        $options = array();
        foreach ($form['source']['source_id']['#options'] as $key => $option) {
          if ($key != 'archive') {
            $options[$key] = $option;
          }
        }
        $form['source']['source_id']['#options'] = $options;
      }
      if (isset($form['sources']['archive'])) {
        unset($form['sources']['archive']);
      }
      break;
    case 'backup_migrate_nodesquirrel_settings_form':
      if (isset($form['nodesquirrel_schedule']['nodesquirrel_schedule']['settings']['nodesquirrel_schedule_source_id']['#options'])) {
        $options = array();
        foreach ($form['nodesquirrel_schedule']['nodesquirrel_schedule']['settings']['nodesquirrel_schedule_source_id']['#options'] as $key => $option) {
          if ($key != 'archive') {
            $options[$key] = $option;
          }
        }
        $form['nodesquirrel_schedule']['nodesquirrel_schedule']['settings']['nodesquirrel_schedule_source_id']['#options'] = $options;
      }
      break;
    case 'tfa_admin_settings':
      // remove ability to require TFA for all authenticated users
      if (isset($form['required_tfa_roles']['#options'])) {
        $options = array();
        foreach ($form['required_tfa_roles']['#options'] as $key => $option) {
          if ($key != '2') {
            $options[$key] = $option;
          }
        }
        $form['required_tfa_roles']['#options'] = $options;
      }
      if (isset($form['required_tfa_roles']['#default_value'])) {
        $options = array();
        foreach ($form['required_tfa_roles']['#default_value'] as $key => $option) {
          if ($key != '2') {
            $options[$key] = $option;
          }
        }
        $form['required_tfa_roles']['#default_value'] = $options;
      }
      break;
    case 'update_manager_update_form':
      // do not allow updates to modules via the UI, only via fixpack
      $modules_list = ibm_apim_get_bundled_modules();
      $ibm_update_needed = array();
        if (isset($form['projects']) && isset($form['projects']['#options'])) {
        foreach ($form['projects']['#options'] as $projectname => $project) {
          if (in_array($projectname, $modules_list)) {
            unset($form['projects']['#options'][$projectname]);
            $ibm_update_needed[] = $projectname;
          }
        }
      }
      if (isset($form['disabled_projects']) && isset($form['disabled_projects']['#options'])) {
        foreach ($form['disabled_projects']['#options'] as $projectname => $project) {
          if (in_array($projectname, $modules_list)) {
            unset($form['disabled_projects']['#options'][$projectname]);
            $ibm_update_needed[] = $projectname;
          }
        }
      }
      if (isset($form['manual_updates'])) {
        $form['manual_updates']['#prefix'] .= '<p>' . t('To update the version of Drupal Core download the latest IBM API Connect release or contact IBM Support.') . '</p>';
      }
      if (count($ibm_update_needed) > 0) {
        $form['ibm_update'] = array(
          '#markup' => '<p>' . t('Updates found for the following modules provided by IBM API Connect: %modules.', array('%modules' => implode(",", $ibm_update_needed))) . '</p><p>' . t('To update modules provided by IBM API Connect download the latest API Connect release or contact IBM Support.') . '</p>',
          '#weight' => 150
        );
      }
      break;
  }
}

/**
 * Implementation of hook_workbench_create_alter().
 * @param $output
 */
function ibm_apim_workbench_create_alter(&$output) {
  // remove our content types from the list
  $doc = new DOMDocument();
  $doc->loadHTML('<body>' . $output['workbench_create_default']['#markup'] . '</body>', LIBXML_HTML_NODEFDTD);
  $body = $doc->getElementsByTagName('body');
  $uls = $doc->getElementsByTagName('ul');
  $domElemsToRemove = array();
  foreach ($uls as $ul) {
    $items = $ul->getElementsByTagName('li');
    foreach ($items as $key => $list) {
      foreach ($list->childNodes as $child) {
        foreach ($child->childNodes as $anchor) {
          if ($anchor->nodeType == XML_ELEMENT_NODE && $anchor->hasAttribute('href')) {
            $href = $anchor->getAttribute('href');
            if (_ibm_apim_endsWith($href, '/add/api') || _ibm_apim_endsWith($href, '/add/application') || _ibm_apim_endsWith($href, '/add/product') || _ibm_apim_endsWith($href, '/add/devorg')) {
              $domElemsToRemove[] = $list;
            }
          }
        }
      }
    }
  }
  foreach ($domElemsToRemove as $domElement) {
    $domElement->parentNode->removeChild($domElement);
  }
  $out = "";
  foreach ($body[0]->childNodes as $child) {
    $out .= $doc->saveHTML($child);
  }
  $output['workbench_create_default']['#markup'] = $out;
}

/**
 * Implements hook_admin_menu_output_alter().
 * Hide the create content links for our content types if the workbench module is active
 */
function ibm_apim_admin_menu_output_alter(&$content) {
  if (isset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/api'])) {
    unset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/api']);
  }
  if (isset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/devorg'])) {
    unset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/devorg']);
  }
  if (isset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/application'])) {
    unset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/application']);
  }
  if (isset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/product'])) {
    unset($content['menu']['admin/workbench']['admin/workbench/create']['admin/workbench/create/node/add/product']);
  }
}

/**
 * Generates the HTML for the notification count block
 * @return string
 */
function ibm_apim_notification_count_block() {
  $result = _ibm_apim_get_notification_count();
  $markup = '';
  $class = '';
  if (isset($result)) {
    if (!isset($result['unreadCount'])) {
      $result['unreadCount'] = 0;
    }
    drupal_add_library('system', 'ui.dialog');
    drupal_add_js('jQuery(document).ready(function(){
                var notBox = document.getElementById("notificationBox");
                notBox.addEventListener("click", function() {
                  jQuery("#notificationBox").text("0");
                  jQuery("#notificationBox").addClass("greyBox");
                }, false);
        });', 'inline');
    if ($result['unreadCount'] == 0) {
      $class = 'greyBox';
    }
    $markup .= '<div class="notification"><button type="button" id="notificationButton" data-href="?q=ibm_apim/notifications" data-title="Notifications" data-name="content" data-rel="width:500;height:550;resizable:true;position:[center,60]" class="simple-dialog my-link-class"><div id="notificationBox" class="notificationBox ' . $class . '">' . check_plain($result['unreadCount']) . '</div></button></div>';
  }
  return $markup;
}

/**
 * A function to retrieve the notification count.
 */
function _ibm_apim_get_notification_count() {
  $returnValue = NULL;

  $org = ibm_apim_get_current_developer_org();
  if (isset($org['id'])) {
    $developerOrgs = $org['id'];
    if (isset($developerOrgs)) {
      $developer_org_url = '/orgs/' . $developerOrgs;
      $url = '/v1/portal' . $developer_org_url . '/notifications/count';
      $result = ibm_apim_call($url, 'user', FALSE, FALSE);
      if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
        $returnValue = $result->data;
      }
    }
  }
  return $returnValue;
}

/**
 * A function to retrieve the notification messages.
 */
function _ibm_apim_get_notifications() {
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
    $url = '/v1/portal' . $developer_org_url . '/notifications';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
  }
  return $returnValue;
}

/**
 * Callback to display notification messages
 * @return string
 */
function _ibm_apim_notifications_callback() {
  $output = '';
  $result = _ibm_apim_get_notifications();
  if ($result) {
    $output = '<div class="activityView"><div class="activityViewInner">';
    foreach ($result as $message) {
      $msgoutput = '<div class="viewActivity">';
      $msgoutput .= '<div class="viewActivityInner"><div class="paddingHorizontal">';
      switch ($message['type']) {
        case "alert" :
          $class = "ALERT";
          break;
        case "event" :
          $class = "EVENT";
          break;
        case "error" :
          $class = "ERROR";
          break;
        case "success" :
          $class = "SUCCESS";
          break;
        default :
          $class = "EVENT";
          break;
      }
      $msgoutput .= '<div class="statusIcon notificationStatusIconAlignment ' . $class . '"></div>';
      $msgoutput .= '<div class="notificationMessageAlignment">' . check_plain($message['message']) . '</div></div></div>';
      $msgoutput .= '<div class="clearBoth"></div><div class="subText"><div class="paddingHorizontal">';
      $updateddate = new DateTime($message['datetime']);
      $msgoutput .= '<div>' . $updateddate->format('Y-m-d H:i:s') . '</div></div></div><div class="activityBorder"></div></div>';
      $output .= $msgoutput;
    }
    $output .= '</div></div>';
  }
  else {
    $output .= '<div class="activityView noNotifications"><div class="activityViewInner">' . t("There are no notifications.") . '</div></div>';
  }
  return $output;
}

/**
 * A function to retrieve the user settings.
 *
 * @return null|object
 */
function ibm_apim_get_user_settings() {
  global $user;
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
    if (!isset($apim_session['memberid']) || empty($apim_session['memberid'])) {
      _ibm_apim_refresh_user_data();
      $apim_session = &_ibm_apim_get_apim_session();
    }
    $url = '/v1/portal' . $developer_org_url . '/members/' . $apim_session['memberid'] . '/settings';
    $result = ibm_apim_call($url);
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $returnValue = $result->data;
    }
  }
  return $returnValue;
}

/**
 * A function to retrieve the notification settings for a given app.
 *
 * @param null $appID
 * @return null
 */
function ibm_apim_get_app_notification_settings($appID = NULL) {
  $returnValue = NULL;
  $currentsettings = ibm_apim_get_user_settings();
  if (isset($appID) && isset($currentsettings) && isset($currentsettings['appNotificationSettings'])) {
    foreach ($currentsettings['appNotificationSettings'] as $setting) {
      // get appID from the appURL
      $settingid = ibm_apim_get_id_from_appurl($setting['appURL']);
      if ($settingid == check_plain($appID)) {
        $returnValue = $setting;
      }
    }
  }
  return $returnValue;
}

/**
 * A function to update the user settings.
 *
 * @param null $appURL
 * @param null $newsettings
 * @return null
 */
function ibm_apim_update_user_settings($appURL = NULL, $newsettings = NULL) {
  global $user;
  $returnValue = NULL;
  $found = FALSE;
  if (isset($appURL) && isset($newsettings)) {
    $apim_session = &_ibm_apim_get_apim_session();
    $org = ibm_apim_get_current_developer_org();
    $developerOrgs = $org['id'];
    if (isset($developerOrgs)) {
      // get current settings
      $currentsettings = ibm_apim_get_user_settings();
      $mergedsettings = array();
      if (isset($currentsettings) && isset($currentsettings['appNotificationSettings'])) {
        foreach ($currentsettings['appNotificationSettings'] as $setting) {
          // get appID from the appURLs
          if (isset($setting['appURL'])) {
            $settingid = ibm_apim_get_id_from_appurl($setting['appURL']);
            $desiredid = ibm_apim_get_id_from_appurl(check_plain($appURL));
            if ($settingid == $desiredid) {
              // use new values
              $mergedsettings[] = $newsettings;
              $found = TRUE;
            }
            else {
              $mergedsettings[] = $setting;
            }
          }
          else {
            $mergedsettings[] = $setting;
          }
        }
      }
      if ($found == FALSE) {
        $mergedsettings[] = $newsettings;
      }
      $newsettingwrapper = array();
      $newsettingwrapper['appNotificationSettings'] = $mergedsettings;

      $developer_org_url = '/orgs/' . $developerOrgs;
      if (!isset($apim_session['memberid']) || empty($apim_session['memberid'])) {
        _ibm_apim_refresh_user_data();
        $apim_session = &_ibm_apim_get_apim_session();
      }
      $url = '/v1/portal' . $developer_org_url . '/members/' . $apim_session['memberid'] . '/settings';

      $result = ibm_apim_put($url, json_encode($newsettingwrapper));
      $returnValue = $result;
    }
  }
  return $returnValue;
}

/**
 * Callback to change the current organization and then redirects to the front page
 *
 * @param $orgId
 */
function ibm_apim_developer_org_callback($orgId) {
  // check the specified org ID is actually one we're a member of
  $result = _ibm_apim_refresh_user_data();
  if ($result && $result['orgs']) {
    foreach ($result['orgs'] as $org) {
      if ($org['id'] == $orgId) {
        $selected = _ibm_apim_set_current_developer_org($orgId);
      }
    }
  }
  drupal_goto();
}

/**
 * Helper function to convert IBM APIm representation of an authorization to
 * a user friendly display value.
 *
 * @param string $ident
 *          The IBM APIm name for authorization
 *
 * @return string A user friendly string or the input string if it has no conversion.
 */
function ibm_apim_get_ident_label($ident) {
  $name_map = array(
    'clientIDAndSecret' => t('Client ID and Secret'),
    'clientID' => t('Client ID'),
    'none' => t('None')
  );
  return array_key_exists($ident, $name_map) ? $name_map[$ident] : $ident;
}

/**
 * Helper function to convert IBM APIm representation of an authorization to
 * a user friendly display explanation text.
 *
 * @param string $ident
 *          The IBM APIm name for authorization
 *
 * @return string A user friendly string or the input string if it has no conversion.
 */
function ibm_apim_get_ident_explanation($ident) {
  $name_map = array(
    'clientIDAndSecret' => t('You must always provide your application\'s client ID and Secret in order to access this API'),
    'clientID' => t('You must always provide your application\'s client ID in order to access this API'),
    'none' => t('No authorization is needed to access this API')
  );
  return array_key_exists($ident, $name_map) ? $name_map[$ident] : $ident;
}

/**
 * Helper function to convert IBM APIm representation of an authentication to
 * a user friendly display value.
 *
 * @param string $auth
 *          The IBM APIm name for authentication
 *
 * @return string A user friendly string or the input string if it has no conversion.
 */
function ibm_apim_get_auth_label($auth) {
  $auth_map = array(
    'basic' => t('Basic'),
    'oauth' => t('OAuth'),
    'none' => t('None')
  );
  return array_key_exists($auth, $auth_map) ? $auth_map[$auth] : $auth;
}

/**
 * Toggle last name field visibility
 */
function _ibm_apim_hide_last_name_field() {
  _ibm_apim_toggle_field_display('last_name', 'hidden');
}

/**
 * Toggle last name field visibility
 */
function _ibm_apim_show_last_name_field() {
  _ibm_apim_toggle_field_display('last_name', 'text_default');
}

/**
 * Toggle first name field visibility
 */
function _ibm_apim_hide_first_name_field() {
  _ibm_apim_toggle_field_display('first_name', 'hidden');
}

/**
 * Toggle first name field visibility
 */
function _ibm_apim_show_first_name_field() {
  _ibm_apim_toggle_field_display('first_name', 'text_default');
}

/**
 * Toggle dev org field visibility
 */
function _ibm_apim_hide_developer_organization_field() {
  _ibm_apim_toggle_field_display('developer_organization', 'hidden');
}

/**
 * Toggle dev org field visibility
 */
function _ibm_apim_show_developer_organization_field() {
  _ibm_apim_toggle_field_display('developer_organization', 'text_default');
}

/**
 * Toggle phone field visibility
 */
function _ibm_apim_hide_phone_field() {
  _ibm_apim_toggle_field_display('phone', 'hidden');
}

/**
 * Toggle phone field visibility
 */
function _ibm_apim_show_phone_field() {
  _ibm_apim_toggle_field_display('phone', 'text_default');
}

/**
 * Toggle company name field visibility
 */
function _ibm_apim_hide_company_field() {
  _ibm_apim_toggle_field_display('company', 'hidden');
}

/**
 * Toggle company name field visibility
 */
function _ibm_apim_show_company_field() {
  _ibm_apim_toggle_field_display('company', 'text_default');
}

/**
 * Toggle address field visibility
 */
function _ibm_apim_hide_address_field() {
  _ibm_apim_toggle_field_display('address', 'hidden');
}

/**
 * Toggle address field visibility
 */
function _ibm_apim_show_address_field() {
  _ibm_apim_toggle_field_display('address', 'addressfield_default');
}

/**
 * Utility method to toggle whether a given field is visible or not on user registration form
 *
 * @param $fieldname
 * @param $display
 * @throws \FieldException
 */
function _ibm_apim_toggle_field_display($fieldname, $display) {
  // Fetch an instance info array.
  $instance_info = field_info_instance('user', 'field_' . $fieldname, 'user');
  if (isset($instance_info)) {
    // Change a single property in the instance definition.
    $instance_info['display']['default']['type'] = $display;
    if ($display == "hidden") {
      $instance_info['settings']['user_register_form'] = 0;
    }
    else {
      $instance_info['settings']['user_register_form'] = 1;
    }
    // Write the changed definition back.
    field_update_instance($instance_info);
  }
}

/**
 * Toggle whether a given field is required or not ($required = 1 | 0)
 *
 * @param $fieldname
 * @param $required
 * @throws \FieldException
 */
function _ibm_apim_toggle_field_required($fieldname, $required) {
  // Fetch an instance info array.
  $instance_info = field_info_instance('user', $fieldname, 'user');
  if (isset($instance_info)) {
    // Change a single property in the instance definition.
    $instance_info['required'] = $required;
    // if address field then also toggle whether the individual address fields are required
    if ($fieldname == "field_address") {
      if ($required == 1) {
        unset($instance_info['widget']['settings']['format_handlers']['address-optional']);
      }
      else {
        $instance_info['widget']['settings']['format_handlers']['address-optional'] = "address-optional";
      }
    }
    // Write the changed definition back.
    field_update_instance($instance_info);
  }
}

/**
 * Utility function to handle different combinations of scheme, host and port in the apim host field
 *
 * @return array|null
 */
function _ibm_apim_parse_apim_host() {
  $returnValue = NULL;
  $variable = variable_get('ibm_apim_host');
  if (isset($variable)) {
    // only use parse_url if scheme is set
    $pieces = explode(":", $variable);
    $pieces_c = count($pieces);
    if (count($pieces) > 1) {
      // this will only work is scheme is set
      try {
        $host = parse_url($variable, PHP_URL_HOST);
        $scheme = parse_url($variable, PHP_URL_SCHEME);
        $port = (int) parse_url($variable, PHP_URL_PORT);
      } catch (Exception $e) {
      }
    }
    if (!isset($host)) {
      // check if we have custom port but no scheme
      // grab last element which must be the port
      if ($pieces_c > 1) {
        $last = array_pop($pieces);
      }
      if ($pieces_c > 1 && isset($last) && (is_int($last) || ctype_digit($last))) {
        $host = implode(':', $pieces);
        $port = (int) $last;
      }
      else {
        $host = $variable;
      }
    }
    if (!isset($port) || $port == 0) {
      $port = 443;
    }
    if (!isset($scheme) || ($scheme != 'https' && $scheme != 'http')) {
      $scheme = 'https';
    }
    $returnValue = array(
      'host' => $host,
      'port' => $port,
      'scheme' => $scheme,
      'url' => $scheme . '://' . $host . ':' . $port
    );
  }
  return $returnValue;
}

/**
 * Custom Function to return random numbers.
 *
 * @param int $n
 * @return int
 */
function _ibm_apim_random_num($n = 5) {
  return rand(0, pow(10, $n));
}

/**
 * A function to retrieve the api in swagger.
 *
 * @param $apiref
 */
function ibm_apim_get_api_swagger($apiref) {
  global $user;
  $returnValue = NULL;
  $apim_session = &_ibm_apim_get_apim_session();

  $org = ibm_apim_get_current_developer_org();
  $developerOrgs = $org['id'];
  if (isset($developerOrgs)) {
    $developer_org_url = '/orgs/' . $developerOrgs;
  }
  else {
    $developer_org_url = '';
  }

  $host_pieces = _ibm_apim_parse_apim_host();
  $ref = ibm_apim_base64_url_decode($apiref);
  $apiurl = $host_pieces['url'] . '/v1/portal' . $developer_org_url . '/apis/' . $ref;

  if (isset($apiurl)) {
    // update the stored swagger for this API
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'api')
      ->fieldCondition('api_ref', 'value', $ref);
    $results = $query->execute();

    if (isset($results['node'])) {
      $first = array_shift($results['node']);
      $nid = $first->nid;
      $node = node_load($nid);
    }
    else {
      $node = 'dummy';
    }
    _ibm_apim_download_proxy($apiurl, 'GET', $node, FALSE);
  }
}

/**
 * Generic API download proxy, used for documents and wsdls
 * if node is passed in then it will save the content as the swagger doc for that api
 * @param $url
 * @param $verb
 * @param null $node
 * @param bool $filter
 * @param null $data
 * @param null $extraHeaders An array of headers to be added to the request of the form $array[] = "headerName: value";
 * @return null
 * @throws \Exception
 */
function _ibm_apim_download_proxy($url, $verb = 'GET', $node = NULL, $filter = FALSE, $data = NULL, $extraHeaders = NULL) {
  global $user;
  // Make sure we have the session variables set
  $apim_session = &_ibm_apim_get_apim_session();
  if (empty($url)) {
    drupal_set_message(t('URL not specified. Specify a valid URL and try again.'), 'error');
    return NULL;
  }
  // Only allow this proxy to connect to the defined apim host
  $host_pieces = _ibm_apim_parse_apim_host();
  if (strpos($url, $host_pieces['url']) !== 0) {
    print 'URL not authorised';
    drupal_set_message(t('Unauthorised URL specified. Specify a valid URL and try again.'), 'error');
    return NULL;
  }

  $ch = curl_init($url);
  $ibmid = variable_get('ibm_apim_saml_idp', 0);
  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
  $headers = array();
  $headers[] = "X-IBM-APIManagement-Context: " . $apim_session['org'] . '.' . $apim_session['env'];
  global $language;
  $lang_name = _ibm_apim_convert_lang_name($language->language);
  if (isset($lang_name)) {
    $headers[] = 'Accept-Language: ' . $lang_name;
  }
  if ($ibm_apim_social_login == 1) {
    $clientid = variable_get('ibm_apim_client_id');
    $headers[] = 'X-IBM-Client-Id: ' . $clientid;
    if (isset($user->name) && $user->uid != 1) {
      $headers[] = 'X-IBM-APIManagement-Principal: ' . $user->name;
      $headers[] = 'X-IBM-APIManagement-Principal-Base64: ' . base64_encode($user->name);
    }
  }
  elseif (isset($apim_session['auth'])) {
    $headers[] = "Authorization: Basic " . $apim_session['auth'];
  }
  elseif ($ibmid == 1) {
    if (isset($apim_session['samltoken']) && !empty($apim_session['samltoken'])) {
      $headers[] = 'X-IBM-APIManagement-IBMIDToken: ' . $apim_session['samltoken'];
    }
  }
  if (isset($node)) {
    $headers[] = 'Accept: application/vnd.ibm-apim.swagger2+yaml';
    $headers[] = 'Content-Type: application/vnd.ibm-apim.swagger2+yaml';
  }
  if ($verb != 'GET') {
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, $verb);
    $headers[] = 'Content-Type: application/json';
  }
  if ($verb == 'HEAD') {
    curl_setopt($ch, CURLOPT_NOBODY, TRUE);
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
  }

  if (isset($extraHeaders)) {
    foreach ($extraHeaders as $key => $value) {
      $headers[] = $value;
    }
  }

  curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

  curl_setopt($ch, CURLOPT_FOLLOWLOCATION, TRUE);
  curl_setopt($ch, CURLOPT_HEADER, TRUE);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_VERBOSE, TRUE);


  if ($verb == 'PUT' || $verb == 'POST') {
    curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
  }

  // Enable auto-accept of self-signed certificates if this
  // has been set in the module config by an admin.
  _ibm_apim_curl_set_accept_ssl($ch);

  // set a custom UA string for the portal
  $apic_version = variable_get('ibm_apim_version', '');
  $hostname = gethostname();
  if (!isset($hostname)) {
    $hostname = '';
  }
  curl_setopt($ch, CURLOPT_USERAGENT, 'IBM API Connect Developer Portal/' . $apic_version . ' ' . $hostname);

  $response = curl_exec($ch);
  $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
  $header = mb_substr($response, 0, $header_size);
  $contents = mb_substr($response, $header_size);
  $status = curl_getinfo($ch);
  curl_close($ch);

  // preserve http response code from API call
  if (isset($status['http_code']) && !empty($status['http_code']) && is_int($status['http_code'])) {
    http_response_code($status['http_code']);
  }

  // Split header text into an array.
  $header_text = preg_split('/[\r\n]+/', $header);

  // Propagate headers to response.
  foreach ($header_text as $header) {
    if (preg_match('/^(?:kbn-version|Location|Content-Type|Content-Language|Set-Cookie|X-APIM):/i', $header)) {
      header($header);
    }
  }
  // for YAML download force the filename, otherwise will default to version number
  if (isset($node)) {
    header('Content-Disposition: attachment; filename="apidownload.yaml"');
  }
  else {
    // use original filename if set
    foreach ($header_text as $header) {
      if (preg_match('/^(?:Content-Disposition):/i', $header)) {
        header($header);
      }
    }
  }

  if (isset($node) && $node != 'dummy' && isset($contents)) {
    $data = $contents;
    if (!isset($node->api_resources[$node->language][0]['value']) || $node->api_resources[$node->language][0]['value'] != $data) {
      $node->api_resources[$node->language][0]['value'] = $data;
      node_save($node);
    }
  }

  if ($filter == TRUE) {
    return $contents;
  }
  else {
    print $contents;
    return NULL;
  }
}

/**
 * Util function to search for a given name in an array
 * @param $newname
 * @param $array
 * @return int|null|string
 */
function _ibm_apim_searchForId($newname, $array) {
  if ($array) {
    foreach ($array as $key => $val) {
      if ($val['name'] === $newname) {
        return $key;
      }
    }
  }
  return NULL;
}

/**
 * @param $haystack
 * @param $needle
 * @return bool
 */
function _ibm_apim_startsWith($haystack, $needle) {
  return $needle === "" || mb_strpos($haystack, $needle) === 0;
}

/**
 * @param $haystack
 * @param $needle
 * @return bool
 */
function _ibm_apim_endsWith($haystack, $needle) {
  return $needle === "" || mb_substr($haystack, -mb_strlen($needle)) === $needle;
}

/**
 * Function to introspect the app URL and return the ID
 * @param $appurl
 * @return array An array with id and version.
 */
function ibm_apim_get_id_from_appurl($appurl) {
  $ret = NULL;
  $parts = parse_url($appurl);
  if ($parts) {
    $planpath = $parts['path'];
    $dirs = explode('/', $planpath);
    $id = array_pop($dirs);
    $ret = $id;
  }
  return $ret;
}

/**
 * Implements hook_cron().
 * @param $customurl
 */
/**
 * @param null $customurl
 * @throws \Exception
 */
function ibm_apim_cron($customurl = NULL) {
  module_load_include('php', 'ibm_apim', 'jsonstreamingparser/Parser');
  module_load_include('php', 'ibm_apim', 'jsonstreamingparser/ParsingError');
  module_load_include('php', 'ibm_apim', 'jsonstreamingparser/Listener');
  module_load_include('php', 'ibm_apim', 'jsonstreamingparser/Listener/CollectionListener');

  variable_set('ibm_apim_bgsync_products', NULL);
  variable_set('ibm_apim_bgsync_apis', NULL);
  variable_set('ibm_apim_bgsync_apps', NULL);
  variable_set('ibm_apim_bgsync_subs', NULL);
  variable_set('ibm_apim_bgsync_devorgs', NULL);
  variable_set('ibm_apim_cron_complete', array());
  variable_set('ibm_apim_bgsync_error', 0);

  /**
   * method to process the stream from bg sync and update the portal as need be
   * @param array $item
   */
  function processItem($item) {
    $ibm_apim_cron_drush = variable_get('ibm_apim_cron_drush', NULL);

    if (isset($item) && isset($item['type']) && $ibm_apim_cron_drush != TRUE) {
      if (!isset($item['statusCode']) || $item['statusCode'] == 200 || $item['statusCode'] == 5000) {
        $etags = variable_get('ibm_apim_cron_etags', array());
        $complete = variable_get('ibm_apim_cron_complete', array());
        switch ($item['type']) {
          case 'config':
            try {
              ibm_apim_update_config($item['payload']);
              if (isset($item['etag'])) {
                $etags['config'] = $item['etag'];
              }
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync Config update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
          case 'catalog':
            try {
              ibm_apim_update_catalog($item['payload']);
              if (isset($item['etag'])) {
                $etags['catalog'] = $item['etag'];
              }
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync Catalog update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
          case 'product':
            try {
              $products = $item['payload'];
              if (isset($item['etag'])) {
                $etags['product'] = $item['etag'];
              }
              if (isset($item['complete'])) {
                $complete['product'] = $item['complete'];
              }
              $current_products = variable_get('ibm_apim_bgsync_products', NULL);
              if (!is_array($current_products)) {
                $current_products = array();
              }
              foreach ($products as $product) {
                if (isset($product['state']) && (strtolower($product['state']) == 'published' || strtolower($product['state']) == 'deprecated')) {
                  $current_products[] = $product['document']['info']['name'] . ':' . $product['document']['info']['version'];
                  product_createOrUpdateProduct($product, 'bgsync');
                }
              }
              variable_set('ibm_apim_bgsync_products', $current_products);
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync products update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
          case 'api':
            try {
              $apis = $item['payload'];
              if (isset($item['etag'])) {
                $etags['api'] = $item['etag'];
              }
              if (isset($item['complete'])) {
                $complete['api'] = $item['complete'];
              }
              $current_apis = variable_get('ibm_apim_bgsync_apis', NULL);
              if (!is_array($current_apis)) {
                $current_apis = array();
              }
              foreach ($apis as $api) {
                $current_apis[] = $api['document']['info']['x-ibm-name'] . ':' . $api['document']['info']['version'];
                api_createOrUpdateAPI($api, 'bgsync');
              }
              variable_set('ibm_apim_bgsync_apis', $current_apis);
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync apis update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
          case 'application':
            try {
              $apps = $item['payload'];
              if (isset($item['etag'])) {
                $etags['app'] = $item['etag'];
              }
              if (isset($item['complete'])) {
                $complete['app'] = $item['complete'];
              }
              $current_apps = variable_get('ibm_apim_bgsync_apps', NULL);
              if (!is_array($current_apps)) {
                $current_apps = array();
              }
              foreach ($apps as $app) {
                // only handle apps with an owning developer organization
                // avoids internal test apps etc.
                if (isset($app['developer-organization']) && (!isset($app['test-app']) || $app['test-app'] == FALSE)) {
                  $current_apps[] = $app['id'];
                  $app['etag'] = $item['etag'];
                  application_createOrUpdateApplication($app, 'bgsync');
                }
              }
              variable_set('ibm_apim_bgsync_apps', $current_apps);
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync applications update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
          case 'subscription':
            try {
              $subs = $item['payload'];
              if (isset($item['etag'])) {
                $etags['sub'] = $item['etag'];
              }
              if (isset($item['complete'])) {
                $complete['sub'] = $item['complete'];
              }
              $current_subs = variable_get('ibm_apim_bgsync_subs', NULL);
              if (!is_array($current_subs)) {
                $current_subs = array();
              }
              // build array of all subscriptions keyed on the app id
              // not actually updating the db at this stage until we've got all subs from apim
              foreach ($subs as $sub) {
                if (isset($sub['application']['id'])) {
                  if (!isset($current_subs[$sub['application']['id']]) || !is_array($current_subs[$sub['application']['id']])) {
                    $current_subs[$sub['application']['id']] = array();
                  }
                  if (!isset($sub['active'])) {
                    $sub['active'] = TRUE;
                  }
                  $parts = explode(':', $sub['plan-registration']['id']);
                  $current_subs[$sub['application']['id']][] = array(
                    'id' => $sub['id'],
                    'product' => $parts[0] . ':' . $parts[1],
                    'plan' => $parts[2],
                    'active' => $sub['active']
                  );
                }
              }
              variable_set('ibm_apim_bgsync_subs', $current_subs);
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync subscriptions update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
          case 'devorg':
            try {
              $devorgs = $item['payload'];
              if (isset($item['etag'])) {
                $etags['org'] = $item['etag'];
              }
              if (isset($item['complete'])) {
                $complete['org'] = $item['complete'];
              }
              $current_devorgs = variable_get('ibm_apim_bgsync_devorgs', NULL);
              if (!is_array($current_devorgs)) {
                $current_devorgs = array();
              }
              foreach ($devorgs as $devorg) {
                $current_devorgs[] = $devorg['id'];
                devorg_createOrUpdateDevorg($devorg, 'bgsync');
              }
              variable_set('ibm_apim_bgsync_devorgs', $current_devorgs);
            } catch (Exception $e) {
              watchdog('ibm_apim_cron', 'Background sync devorgs update failed with: %data', array(
                '%data' => $e->getMessage()
              ), WATCHDOG_NOTICE);
              variable_set('ibm_apim_bgsync_error', 1);
            }
            break;
        }
        variable_set('ibm_apim_cron_complete', $complete);
        variable_set('ibm_apim_cron_etags', $etags);
      }
      elseif ($item['statusCode'] == 304) {
        switch ($item['type']) {
          case 'product':
            variable_set('ibm_apim_bgsync_products', 'unchanged');
            break;
          case 'api':
            variable_set('ibm_apim_bgsync_apis', 'unchanged');
            break;
          case 'application':
            variable_set('ibm_apim_bgsync_apps', 'unchanged');
            break;
          case 'devorg':
            variable_set('ibm_apim_bgsync_devorgs', 'unchanged');
            break;
          case 'subscription':
            variable_set('ibm_apim_bgsync_subs', 'unchanged');
            break;
        }
        watchdog('ibm_apim_cron', 'Background sync %rc unchanged.', array(
          '%rc' => $item['type']
        ), WATCHDOG_NOTICE);
      }
      else {
        if (isset($item['type']) && ($item['type'] == 'config' || $item['type'] == 'catalog')) {
          // TODO
          // alert admin that failed to get config - maybe only if failed to get it and dont already have it?

        }
        watchdog('ibm_apim_cron', 'Background sync returned %rc. Item: %data', array(
          '%rc' => $item['statusCode'],
          '%data' => var_export($item)
        ), WATCHDOG_NOTICE);
      }
    }
    else {
      // missing type
      watchdog('ibm_apim_cron', 'Background sync object missing type field. Item: %data', array(
        '%data' => var_export($item)
      ), WATCHDOG_NOTICE);
    }
  }

  global $user;
  // in case moderation is on we need cron to run as admin
  // save the current user so we can switch back at the end
  $original_user = $user;
  drupal_save_session(FALSE);
  $user = user_load(1);

  $ibm_apim_site_url = variable_get('ibm_apim_site_url', NULL);
  if (isset($customurl) && !is_array($customurl)) {
    $url = $customurl;
  }
  elseif (isset($ibm_apim_site_url)) {
    $url = $ibm_apim_site_url;
  }
  if (isset($url) && !empty($url)) {
    // if no leading protocol then assume https
    if (mb_strpos($url, 'https://') !== 0 && mb_strpos($url, 'http://') !== 0) {
      $url = 'https://' . $url;
    }

    // handle self signed certs
    $secure = '';
    if (variable_get('ibm_apim_insecure')) {
      $secure .= '-i';
    }
    if (variable_get('ibm_apim_provided_certificate')) {
      $secure .= ' --' . escapeshellarg(strtolower(variable_get('ibm_apim_provided_certificate')) . 'mode');
    }
    // handle etags
    $etagstring = '';
    $etags = variable_get('ibm_apim_cron_etags', NULL);
    $disableetags = variable_get('ibm_apim_disable_etags', FALSE);
    if (isset($etags) && $disableetags != TRUE) {
      if (isset($etags['config'])) {
        $etagstring .= '-a ' . escapeshellarg($etags['config']) . ' ';
      }
      if (isset($etags['catalog'])) {
        $etagstring .= '-b ' . escapeshellarg($etags['catalog']) . ' ';
      }
      if (isset($etags['product'])) {
        $etagstring .= '-c ' . escapeshellarg($etags['product']) . ' ';
      }
      if (isset($etags['api'])) {
        $etagstring .= '-d ' . escapeshellarg($etags['api']) . ' ';
      }
      if (isset($etags['app'])) {
        $etagstring .= '-e ' . escapeshellarg($etags['app']) . ' ';
      }
      if (isset($etags['sub'])) {
        $etagstring .= '-f ' . escapeshellarg($etags['sub']) . ' ';
      }
      if (isset($etags['org'])) {
        $etagstring .= '-g ' . escapeshellarg($etags['org']) . ' ';
      }
    }

    $drush = '';
    $ibm_apim_cron_drush = variable_get('ibm_apim_cron_drush', NULL);
    if ($ibm_apim_cron_drush == TRUE) {
      $drush = ' -x ';
    }

    exec('bash -c "ADMIN_USER=$USER /home/admin/bin/clear_webhooks ' . escapeshellarg($url) . ' > >(ADMIN_USER=$USER ~admin/bin/background_sync_logger >> /var/log/devportal/background_sync.log) 2>&1"', $output, $rc);
    if (isset($rc) && $rc != 0) {
      watchdog('ibm_apim_cron', 'clear_webhooks %rc. Output: %data', array(
        '%rc' => $rc,
        '%data' => var_export($output)
      ), WATCHDOG_NOTICE);
    }

    $apim_host = variable_get('ibm_apim_host');
    $bgsync_return_code = 0;
    $stream = popen('bash -c "/usr/local/bin/node /home/admin/bgsync/background_sync.js -o ' . escapeshellarg($apim_host) . ' -p ' . escapeshellarg($url) . ' ' . $secure . ' ' . $drush . ' ' . $etagstring . ' 2> >(ADMIN_USER=$USER ~admin/bin/background_sync_logger >> /var/log/devportal/background_sync.log)"', 'r');
    $listener = new \Drupal\ibm_apim\CollectionListener('processItem', TRUE);
    try {
      if ($ibm_apim_cron_drush == FALSE) {
        $parser = new \JsonStreamingParser\Parser($stream, $listener);
        $parser->parse();
      }
      else {
        while (!feof($stream)) {
          sleep(5);
          fgets($stream);
        }
      }
      $bgsync_return_code = pclose($stream);
    } catch (Exception $e) {
      $bgsync_return_code = pclose($stream);
      throw $e;
    }
    $complete = variable_get('ibm_apim_cron_complete', array());
    $errored = variable_get('ibm_apim_bgsync_error', 1);

    if ($errored) {
      watchdog('ibm_apim_cron', 'An error occurred during bgsync. Check previous log messages for details.', array(), WATCHDOG_ERROR);
    }
    else {
      if ($ibm_apim_cron_drush != TRUE) {
        // remove any products in our db that were not returned by apim
        $current_products = variable_get('ibm_apim_bgsync_products');
        if (is_array($current_products) && (!array_key_exists('product', $complete) || $complete['product'] == TRUE)) {
          $createPopularBlocks = variable_get('ibm_apim_created_pop_blocks', 0);
          $index = 0;
          $blocknids = array();
          $productcount = count($current_products);
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'product');
          $results = $query->execute();
          if (isset($results['node'])) {
            $nids = array();
            foreach ($results['node'] as $item) {
              $nids[] = $item->nid;
            }
            $productnodes = node_load_multiple($nids);
            foreach ($productnodes as $productnode) {
              if (isset($productnode) && isset($productnode->nid)) {
                // build up list of popular blocks to add to front page
                if ($createPopularBlocks != 1) {
                  if ($index < 4) {
                    if (isset($productnode->product_visibility_public[$productnode->language][0]['value']) && $productnode->product_visibility_public[$productnode->language][0]['value'] == 1 && $productnode->product_state[$productnode->language][0]['value'] == 'published' && isset($productnode->status) && $productnode->status == 1) {
                      // only add published public products to front page as part of cron
                      $blocknids[] = $productnode->nid;
                      $index++;
                    }
                  }
                }
                $found = FALSE;
                foreach ($current_products as $product_ref) {
                  if ($productnode->product_ref[$productnode->language][0]['value'] == $product_ref) {
                    $found = TRUE;
                  }
                }
                if ($found != TRUE) {
                  product_deleteProductNode($productnode->nid, 'bgsync');
                }
              }
            }
            if ($createPopularBlocks != 1 && isset($blocknids) && is_array($blocknids)) {
              foreach ($blocknids as $key => $blocknid) {
                _ibm_apim_create_popular_block($blocknid, count($blocknids), $key);
              }
            }
          }
          // only create blocks the first time we return content so set variable to prevent it next time round
          if ($productcount > 0) {
            variable_set('ibm_apim_created_pop_blocks', 1);
          }
        }

        // remove any apis in our db that were not returned by apim
        $current_apis = variable_get('ibm_apim_bgsync_apis');
        if (is_array($current_apis) && (!array_key_exists('api', $complete) || $complete['api'] == TRUE)) {

          // We have to avoid node_load_multiple here as APIs are big and there could be thousands of them

          // Find all nodes where the 'api_ref' field is not one of the api names in the current_apis list
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'api');

          if (sizeof($current_apis) > 0) {
            $query->fieldCondition('api_ref', 'value', $current_apis, 'NOT IN');
          }

          $results = $query->execute();
          $nids = array();

          if (isset($results['node'])) {
            $nids = array();
            foreach ($results['node'] as $item) {
              $nids[] = $item->nid;
            }

            foreach ($nids as $nid) {
              api_deleteAPINode($nid, 'bgsync');
            }
          }
        }

        // remove any devorgs in our db that were not returned by apim
        $current_devorgs = variable_get('ibm_apim_bgsync_devorgs');
        if (is_array($current_devorgs) && (!array_key_exists('org', $complete) || $complete['org'] == TRUE)) {
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'devorg');
          $results = $query->execute();
          if (isset($results['node'])) {
            $nids = array();
            foreach ($results['node'] as $item) {
              $nids[] = $item->nid;
            }
            $orgnodes = node_load_multiple($nids);
            foreach ($orgnodes as $orgnode) {
              if (isset($orgnode) && isset($orgnode->nid)) {
                $found = FALSE;
                foreach ($current_devorgs as $consumer) {
                  if ($orgnode->devorg_id[$orgnode->language][0]['value'] == $consumer) {
                    $found = TRUE;
                  }
                }
                if ($found != TRUE) {
                  node_delete($orgnode->nid);
                  watchdog('ibm_apim_cron', 'delete devorg nid=@prod', array('@prod' => $orgnode->nid), WATCHDOG_NOTICE);
                }
              }
            }
          }
        }

        // remove any apps in our db that were not returned by apim
        $current_apps = variable_get('ibm_apim_bgsync_apps');
        if (is_array($current_apps) && !empty($current_apps) && (!array_key_exists('app', $complete) || $complete['app'] == TRUE)) {
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')->entityCondition('bundle', 'application');
          $results = $query->execute();
          if (isset($results['node'])) {
            $nids = array();
            foreach ($results['node'] as $item) {
              $nids[] = $item->nid;
            }
            $appnodes = node_load_multiple($nids);
            foreach ($appnodes as $appnode) {
              if (isset($appnode) && isset($appnode->nid)) {
                $found = FALSE;
                foreach ($current_apps as $app) {
                  if ($appnode->application_apiid[$appnode->language][0]['value'] == $app) {
                    $found = TRUE;
                  }
                }
                if ($found != TRUE) {
                  node_delete($appnode->nid);
                  watchdog('ibm_apim_cron', 'delete application nid=@prod', array('@prod' => $appnode->nid), WATCHDOG_NOTICE);
                }
              }
            }
          }
        }

        // update application subscriptions
        $current_subs = variable_get('ibm_apim_bgsync_subs');
        if (is_array($current_subs) && !empty($current_subs) && (!array_key_exists('sub', $complete) || $complete['sub'] == TRUE)) {
          // Any applications that exist in the database that were not mentioned in the list of apps=>subscriptions
          // must have no subscriptions at all. Insert empty arrays to record this
          $query = new EntityFieldQuery();
          $query->entityCondition('entity_type', 'node')
            ->entityCondition('bundle', 'application')
            ->fieldCondition('application_apiid', 'value', array_keys($current_subs), 'NOT IN');
          $results = $query->execute();

          if (isset($results['node'])) {
            foreach ($results['node'] as $resultNode) {
              $nid = $resultNode->nid;
              $node = node_load($nid);
              $current_subs[$node->application_apiid[$node->language][0]['value']] = [];
            }
          }

          // now update the db with the subscriptions for each app
          foreach ($current_subs as $appid => $appsub) {
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
              ->entityCondition('bundle', 'application')
              ->fieldCondition('application_apiid', 'value', $appid);
            $results = $query->execute();

            if (isset($results['node'])) {
              $first = array_shift($results['node']);
              $nid = $first->nid;
              $node = node_load($nid);
              if (isset($node)) {
                if (isset($node->application_subscriptions[$node->language][0]) && is_array($node->application_subscriptions[$node->language][0])) {
                  $node->application_subscriptions[$node->language][0]['value'] = serialize($appsub);
                }
                else {
                  $node->application_subscriptions[$node->language][] = array(
                    'value' => serialize($appsub),
                    'format' => 'plain_text'
                  );
                }
                node_save($node);
              }
            }
          }
        }
      }
      else {
        // We used the drush version of bgsync but we still have to update the session data
        _ibm_apim_check_and_get_config();
      }

      if (isset($current_products) && is_array($current_products)) {
        $prodinsert = count($current_products);
      }
      elseif (isset($current_products) && $current_products == 'unchanged') {
        $prodinsert = t('unchanged');
      }
      else {
        $prodinsert = 'N/A';
      }
      if (isset($current_apis) && is_array($current_apis)) {
        $apiinsert = count($current_apis);
      }
      elseif (isset($current_apis) && $current_apis == 'unchanged') {
        $apiinsert = t('unchanged');
      }
      else {
        $apiinsert = 'N/A';
      }
      if (isset($current_apps) && is_array($current_apps)) {
        $appinsert = count($current_apps);
      }
      elseif (isset($current_apps) && $current_apps == 'unchanged') {
        $appinsert = t('unchanged');
      }
      else {
        $appinsert = 'N/A';
      }
      if (isset($current_devorgs) && is_array($current_devorgs)) {
        $orginsert = count($current_devorgs);
      }
      elseif (isset($current_devorgs) && $current_devorgs == 'unchanged') {
        $orginsert = t('unchanged');
      }
      else {
        $orginsert = 'N/A';
      }
      if ((isset($current_products) && is_array($current_products)) || (isset($current_apis) && is_array($current_apis)) || (isset($current_apps) && is_array($current_apps)) || (isset($current_devorgs) && is_array($current_devorgs))) {
        if (module_exists('views')) {
          views_invalidate_cache();
        }
      }
      variable_set('ibm_apim_bgsync_error', 0);
      watchdog('ibm_apim_cron', 'Background sync ran successfully. Returned @products products, @apis APIs, @apps Apps, @orgs Developer Organizations', array(
        '@products' => $prodinsert,
        '@apis' => $apiinsert,
        '@apps' => $appinsert,
        '@orgs' => $orginsert
      ), WATCHDOG_NOTICE);
    }

    if ($bgsync_return_code !== 0) {
      variable_set('ibm_apim_bgsync_error', 1);
      watchdog('ibm_apim_cron', 'Background sync did not complete correctly. Return code was @returncode', array('@returncode' => $bgsync_return_code), WATCHDOG_ERROR);

      if ($ibm_apim_cron_drush === 1 && $bgsync_return_code === 11) {
        watchdog('ibm_apim_cron', 'Manually running the background sync cron job when drush mode is enabled is not supported. Change the cron schedule if you want to run the cron job more frequently. Check the IBM API Connect Knowledge Center for information about background sync.', array(), WATCHDOG_ERROR);
      }
    }
    else {
      variable_set('ibm_apim_bgsync_error', 0);
      watchdog('ibm_apim_cron', 'Background sync ran successfully. Returned @products products, @apis APIs, @apps Apps, @orgs Developer Organizations', array(
        '@products' => $prodinsert,
        '@apis' => $apiinsert,
        '@apps' => $appinsert,
        '@orgs' => $orginsert
      ), WATCHDOG_NOTICE);
    }

  }
  else {
    variable_set('ibm_apim_bgsync_error', 1);
    watchdog('ibm_apim_cron', 'Skipping Background sync - ibm_apim_site_url not set.', array(), WATCHDOG_NOTICE);
  }
  // switch back to original user
  $user = $original_user;
  drupal_save_session(TRUE);
}

/**
 * Returns the adv portal version number
 * @return string
 */
function ibm_apim_version() {
  $path = drupal_get_path('module', 'ibm_apim') . '/ibm_apim.info';
  $info = drupal_parse_info_file($path);
  $data = t('IBM API Connect Developer Portal version %ver', array('%ver' => $info['version']));
  return $data;
}

/**
 * Base64 encode (URL safe)
 * @param $input
 * @return string
 */
function ibm_apim_base64_url_encode($input) {
  return strtr(base64_encode($input), '+/=', '-_,');
}

/**
 * Base64 decode (URL safe)
 * @param $input
 * @return string
 */
function ibm_apim_base64_url_decode($input) {
  return base64_decode(strtr($input, '-_,', '+/='));
}

/**
 * Return markdown string if module enabled
 * @param $string
 * @return mixed
 */
function ibm_apim_markdown_field($string) {
  /*
   * Note: In future we should probably refactor this using a whitelist, something like
   * the following based on what ghmarkdown produces and a few extras
   *
    $allowed_tags = array(
      // From HtmlTrait.php
      'a', 'abbr', 'acronym', 'b', 'basefont', 'bdo', 'big', 'br',
      'button', 'blink', 'cite', 'code', 'del', 'dfn', 'em', 'font', 'i', 'img', 'ins',
      'input', 'kbd', 'label', 'listing', 'map', 'mark', 'nobr', 'object', 'q', 'rp',
      'rt', 'ruby', 's', 'samp', 'select', 'small', 'spacer', 'span', 'strong', 'sub',
      'sup', 'tt', 'var', 'u', 'wbr', 'time', 'br', 'hr', 'img', 'input', 'nobr',
      // From CodeTrait.php
      'pre',
      // From HeadlineTrait.php
      'h1','h2','h3','h4','h5','h6','h7',
      // From ListTrait.php
      'ul','ol','li',
      // From QuoteTrait.php
      'blockquote',
      // From RuleTrait.php
      'hr',
      // From EmphStrongTrait.php
      'strong','em',
      // From default allowed_tags
      'dl', 'dt', 'dd',
      // Extras Chris said to add
      'div','table', 'tbody', 'tfoot', 'thead', 'tr', 'td', 'th','p'
      );
  */
  $blacklist = array(
    'applet',
    'area',
    'base',
    'basefont',
    'body',
    'button',
    'embed',
    'form',
    'frame',
    'frameset',
    'head',
    'html',
    'iframe',
    'input',
    'isindex',
    'label',
    'link',
    'map',
    'meta',
    'noframes',
    'noscript',
    'object',
    'optgroup',
    'option',
    'param',
    'script',
    'select',
    'style',
    'textarea',
    'title',
  );
  if (!isset($string) || empty($string)) {
    return NULL;
  }
  elseif (module_exists('ghmarkdown')) {
    $mdoutput = _filter_ghmarkdown($string, NULL);
    foreach ($blacklist as $tag) {
      $mdoutput = preg_replace("/<\\/?" . $tag . "(.|\\s)*?>/", '', $mdoutput);
    }
    $mdoutput = str_replace(chr(0), '', $mdoutput);
    $mdoutput = preg_replace('%&\\s*\\{[^}]*(\\}\\s*;?|$)%', '', $mdoutput);
    $mdoutput = str_replace('&', '&amp;', $mdoutput);
    $mdoutput = preg_replace('/&amp;#([0-9]+;)/', '&#\\1', $mdoutput);
    $mdoutput = preg_replace('/&amp;#[Xx]0*((?:[0-9A-Fa-f]{2})+;)/', '&#x\\1', $mdoutput);
    $mdoutput = preg_replace('/&amp;([A-Za-z][A-Za-z0-9]*;)/', '&\\1', $mdoutput);
    return ($mdoutput);
  }
  else {
    return '<p>' . $string . '</p>';
  }
}

/**
 * Takes a boolean value and returns a translatable Yes|No
 * @param $value
 * @return null|string
 */
function ibm_apim_translatable_boolean($value = NULL) {
  if ($value == TRUE) {
    return t('Yes');
  }
  else {
    return t('No');
  }
}

/**
 * Return a string representation of swagger schema object
 * @param $object
 * @return null|string
 */
function ibm_apim_return_schema($object) {
  if (!isset($object) || empty($object)) {
    return "";
  }
  elseif (isset($object['type']) && !empty($object['type'])) {
    return $object['type'];
  }
  elseif (!isset($object['schema']) || empty($object['schema'])) {
    return "";
  }
  elseif (isset($object['schema']['type']) && $object['schema']['type'] == "array" && isset($object['schema']['items']) && isset($object['schema']['items']['$ref'])) {
    return _ibm_apim_ref_to_objectname($object['schema']['items']['$ref']) . " []";
  }
  elseif (isset($object['schema']['type']) && !empty($object['schema']['type'])) {
    return $object['schema']['type'];
  }
  elseif (isset($object['schema']['$ref']) && !empty($object['schema']['$ref'])) {
    return _ibm_apim_ref_to_objectname($object['schema']['$ref']);
  }
  else {
    return "";
  }
}

/**
 * remove some variables from inline schemas for presentation
 * @param $object
 * @return mixed
 */
function ibm_apim_return_inline_schema($object) {
  $result = $object;
  if (isset($result['in'])) {
    unset($result['in']);
  }
  if (isset($result['name'])) {
    unset($result['name']);
  }
  if (isset($result['required'])) {
    unset($result['required']);
  }
  if (isset($result['description'])) {
    unset($result['description']);
  }
  if (isset($result['expanded'])) {
    unset($result['expanded']);
  }
  if (isset($result['type'])) {
    unset($result['type']);
  }
  if (isset($result['format'])) {
    unset($result['format']);
  }
  if (isset($result['x-ibm-languages'])) {
    unset($result['x-ibm-languages']);
  }
  return $result;
}

/**
 * @param $ref
 * @return null|string
 */
function _ibm_apim_ref_to_objectname($ref = NULL) {
  if (gettype($ref) === 'string') {
    $defindex = mb_strpos($ref, "definitions/");
    $respindex = mb_strpos($ref, "responses/");
    if ($defindex >= 0) {
      return mb_substr($ref, $defindex + 12);
    }
    elseif ($respindex >= 0) {
      return mb_substr($ref, $defindex + 10);
    }
    else {
      return $ref;
    }
  }
  else {
    return NULL;
  }
}

/**
 * Utility method to truncate a string at a specified length and append an ellipsis
 * @param $string
 * @param int $length
 * @param string $append
 * @return array|string
 */
function ibm_apim_truncate_string($string, $length = 191, $append = "…") {
  $string = trim($string);
  if (mb_strlen($string) > $length) {
    $string = mb_substr($string, 0, ($length - mb_strlen($append)));
    $string = trim($string) . $append;
  }
  return $string;
}

/**
 * @param null $nid
 * @param int $total
 * @param int $count
 * @throws \Exception
 */
function _ibm_apim_create_popular_block($nid = NULL, $total = 4, $count = 0) {
  if (isset($nid)) {

    //First delete it so that we don't error if it already exists
    _ibm_apim_delete_popular_block($nid);

    $bean = bean_create(array('type' => 'popularproduct'));
    $bean->label = $nid;
    $bean->title = '';
    $bean->delta = 'bean-' . $nid;
    $bean->type = 'popularproduct_block';
    $bean->view_mode = 'default';
    $bean->data = array('productnid' => $nid);
    $bean->save();

    // get the did of the popular_apis mini panel
    $query = db_select('panels_mini', 'p');
    $query->condition('p.name', 'popular_apis');
    $query->fields('p', array('did'));
    $result = $query->execute();
    $did = $result->fetchField();

    // get the current layout
    $query = db_select('panels_display', 'p');
    $query->condition('p.did', $did);
    $query->fields('p', array('layout'));
    $result = $query->execute();
    $layout = $result->fetchField();

    // update the layout if necessary depending on how many blocks we have
    if ($total == 4) {
      switch ($count) {
        case 0:
          $panel = 'four_second';
          break;
        case 1:
          $panel = 'four_third';
          break;
        case 2:
          $panel = 'four_first';
          break;
        case 3:
          $panel = 'four_fourth';
          break;
      }
      if ($layout != 'four_4x25') {
        db_update('panels_display')->fields(array(
          'layout' => 'four_4x25',
          'panel_settings' => 'a:1:{s:14:"style_settings";a:5:{s:7:"default";N;s:10:"four_first";N;s:11:"four_second";N;s:10:"four_third";N;s:11:"four_fourth";N;}}'
        ))->condition('did', $did)->execute();
      }
    }
    elseif ($total == 3) {
      switch ($count) {
        case 0:
          $panel = 'three_33_second';
          break;
        case 1:
          $panel = 'three_33_first';
          break;
        case 2:
          $panel = 'three_33_third';
          break;
      }
      if ($layout != 'three_3x33') {
        db_update('panels_display')->fields(array(
          'layout' => 'three_3x33',
          'panel_settings' => 'a:1:{s:14:"style_settings";a:6:{s:7:"default";N;s:12:"three_33_top";N;s:14:"three_33_first";N;s:15:"three_33_second";N;s:14:"three_33_third";N;s:15:"three_33_bottom";N;}}'
        ))->condition('did', $did)->execute();
      }
    }
    else if ($total == 2) {
      switch ($count) {
        case 0:
          $panel = 'two_50_first';
          break;
        case 1:
          $panel = 'two_50_second';
          break;
      }
      if ($layout != 'two_50') {
        db_update('panels_display')->fields(array(
          'layout' => 'two_50',
          'panel_settings' => 'a:1:{s:14:"style_settings";a:5:{s:7:"default";N;s:10:"two_50_top";N;s:12:"two_50_first";N;s:13:"two_50_second";N;s:13:"two_50_bottom";N;}}'
        ))->condition('did', $did)->execute();
      }
    }
    elseif ($total == 1) {
      $panel = 'one_main';
      if ($layout != 'one') {
        db_update('panels_display')->fields(array(
          'layout' => 'one',
          'panel_settings' => 'a:1:{s:14:"style_settings";a:2:{s:7:"default";N;s:8:"one_main";N;}}'
        ))->condition('did', $did)->execute();
      }
    }

    if (isset($panel) && isset($did)) {
      db_insert('panels_pane')->fields(array(
        'did' => $did,
        'panel' => $panel,
        'type' => 'block',
        'subtype' => 'bean-bean-' . $nid,
        'shown' => 1,
        'access' => 'a:0:{}',
        'configuration' => 'a:3:{s:14:"override_title";i:0;s:19:"override_title_text";s:0:"";s:22:"override_title_heading";s:2:"h2";}',
        'cache' => 'a:0:{}',
        'style' => 'a:1:{s:8:"settings";N;}',
        'css' => 'a:0:{}',
        'extras' => 'a:0:{}',
        'locks' => 'a:0:{}',
        'uuid' => '416c0b9d-4556-' . $nid
      ))->execute();
    }
  }
}

/**
 * Delete a popular API block for a given node
 * @param null $nid
 */
function _ibm_apim_delete_popular_block($nid = NULL) {
  if (isset($nid)) {
    $beans = bean_get_all_beans();
    if (isset($beans)) {
      foreach ($beans as $bean) {
        if (isset($bean->data) && (isset($bean->data['productnid']) && $bean->data['productnid'] == $nid) || (isset($bean->data['apinid']) && $bean->data['apinid'] == $nid)) {
          bean_delete($bean);
          db_delete('panels_pane')->condition('type', 'block')->condition('subtype', 'bean-bean-' . $nid)->execute();
        }
      }
    }
  }
}

/**
 * Method to see if a user has an explicit permission rather than just by virtue of being an admin
 *
 * @param $string
 * @param null $account
 * @return bool
 */
function ibm_apim_explicit_user_access($string, $account = NULL) {
  global $user;

  if (!isset($account)) {
    $account = $user;
  }

  // To reduce the number of SQL queries, we cache the user's permissions
  // in a static variable.
  // Use the advanced drupal_static() pattern, since this is called very often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['perm'] = &drupal_static(__FUNCTION__);
  }
  $perm = &$drupal_static_fast['perm'];
  if (!isset($perm[$account->uid])) {
    $role_permissions = user_role_permissions($account->roles);

    $perms = array();
    foreach ($role_permissions as $one_role) {
      $perms += $one_role;
    }
    $perm[$account->uid] = $perms;
  }

  return isset($perm[$account->uid][$string]);
}

/**
 * @param $config
 * @throws \Exception
 */
function ibm_apim_update_config($config) {
  if (isset($config)) {
    // clear caches if config different to previous requests
    $current_config = variable_get('ibm_apim_portal_config');
    variable_set('ibm_apim_portal_config', serialize($config));
    _ibm_apim_check_and_get_config();
    if (!isset($current_config) || $current_config != serialize($config)) {
      drupal_flush_all_caches();
    }
  }
}

/**
 * @param $catalog
 */
function ibm_apim_update_catalog($catalog) {
  if (isset($catalog)) {
    variable_set('ibm_apim_catalog_config', serialize($catalog));
  }
}

/**
 * Custom validator to display generic error messages when fail to login
 * @param $form
 * @param $form_state
 */
function ibm_apim_custom_final_validate($form, &$form_state) {
  if (empty($form_state['uid'])) {
    // Always register an IP-based failed login event.
    flood_register_event('failed_login_attempt_ip', variable_get('user_failed_login_ip_window', 3600));
    // Register a per-user failed login event.
    if (isset($form_state['flood_control_user_identifier'])) {
      flood_register_event('failed_login_attempt_user', variable_get('user_failed_login_user_window', 21600), $form_state['flood_control_user_identifier']);
    }
    $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
    if ($ibm_apim_readonly_idp == TRUE) {
      $message = t('The username or password is incorrect. <br/><b>Note:</b> Multiple incorrect attempts can lock your account.');
    }
    else {
      $message = t('The username or password is incorrect. <a href="@password">Have you forgotten your password?</a> <br/><b>Note:</b> Multiple incorrect attempts can lock your account.', array('@password' => url('user/password')));
    }
    if (isset($form_state['flood_control_triggered'])) {
      if ($form_state['flood_control_triggered'] == 'user') {
        form_set_error('name', $message);
      }
      else {
        // We did not find a uid, so the limit is IP-based.
        form_set_error('name', $message);
      }
    }
    else {
      form_set_error('name', $message);
      watchdog('user', 'Login attempt failed for %user.', array('%user' => $form_state['values']['name']));
    }
  }
  elseif (isset($form_state['flood_control_user_identifier'])) {
    // Clear past failures for this user so as not to block a user who might
    // log in and out more than once in an hour.
    flood_clear_event('failed_login_attempt_user', $form_state['flood_control_user_identifier']);
  }
}

/**
 * Using this not user_external_login_register so we can create the initial user with extra info
 *
 * @param $name
 * @param array $edit
 * @param bool $login
 * @param array $legal_values
 * @throws \Exception
 */
function ibm_apim_external_login_register($name, $edit = array(), $login = FALSE, $legal_values = array()) {
  $account = user_external_load($name);
  if (!$account) {
    // also check there isn't a local user by this name
    // the above external check will only check the authmap
    $account = user_load_by_name($name);
    if (!$account) {
      // Register this new user.
      $edit['name'] = $name;
      $edit['init'] = $name;
      $edit['access'] = REQUEST_TIME;

      $account = user_save(drupal_anonymous_user(), $edit);

      // If the user_save failed first time try enabling/disabling the dummy_module
      if (!$account) {
        module_enable(['dummy_module']);
        module_disable(['dummy_module']);
        $account = user_save(drupal_anonymous_user(), $edit);

        // Terminate if an error occurred during user_save().
        if (!$account) {
          drupal_set_message(t("Temporary issue saving user account. Please try operation again."), 'error');
          watchdog('ibm_apim_external_login_register', 'Error saving user account. userid: %name.  Please contact your site administrator, reference: CS0262676.', array('%name' => serialize($name)), WATCHDOG_NOTICE);
          menu_rebuild();
          return;
        }
      }
      if (module_exists('social_login')) {
        // invoke register hook
        // this is needed for things like writable ldap to trigger creation of user
        module_invoke_all('user_presave', $edit, $account, 'register');
        module_invoke_all('user_insert', $edit, $account, 'register');
      }
      else {
        // redact password back out of the portal db if not using social login
        // needs to be there for the hook call above so that it can be sent to LDAP
        $account->pass = '';
        user_save($account);
      }
    }
  }
  if (module_exists('legal') && isset($legal_values['version']) && isset($legal_values['revision'])) {
    legal_save_accept($legal_values['version'], $legal_values['revision'], $legal_values['language'], $legal_values['tc_id'], $account->uid);
    watchdog('legal', '%name accepted T&C version %tc_id.', array(
      '%name' => $account->name,
      '%tc_id' => $legal_values['tc_id']
    ));

    // Update the user table timestamp noting user has logged in.
    db_update('users')->fields(array('login' => time()))->condition('uid', $account->uid)->execute();
  }

  if ($login) {
    // Log user in.
    $form_state['uid'] = $account->uid;
    user_login_submit(array(), $form_state);
  }
}

/**
 * User invited by a dev org owner but hasn't got an account yet so needs to be prompted to create one
 * @param $token
 * @return object
 */
function ibm_apim_activate_create_account_form($token = NULL) {
  global $user;
  global $_GET;
  if (isset($_GET['activationToken'])) {
    $token = $_GET['activationToken'];
  }
  if (!isset($token)) {
    drupal_set_message(t('Missing token. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_activate_create_account_form', 'Missing token.', array(), WATCHDOG_NOTICE);
    drupal_goto();
  }
  $activationObj = json_decode(base64_decode($token));
  $userid = ibm_apim_decrypt_data($activationObj->{'username'});
  if (!empty($userid)) {
    // If already logged on, go to the user page instead.
    if ($user->uid) {
      drupal_goto('user/' . $user->uid);
    }

    $form = array();
    // Ensure some defaults; if already set they will not be overridden.
    $form_state = form_state_defaults();

    drupal_add_js(drupal_get_path('module', 'ibm_apim') . '/js/usercreate.js', array(
      'weight' => 3
    ));

    // set some min values to get the addressfield to stop blocking other fields displaying
    if (isset($form_state['values'])) {
      $form_state['input'] = $form_state['values'];
    }
    else {
      $form_state['input'] = array();
      $form_state['values'] = array();
    }
    $form_state['build_info'] = array();
    $form_state['build_info']['form_id'] = "";

    $form['#user'] = drupal_anonymous_user();
    $form['#user_category'] = 'register';

    $form['#attached']['library'][] = array('system', 'jquery.cookie');
    $form['#attributes']['class'][] = 'user-info-from-cookie';

    // if hybridauth available and enabled for user register form then show it here too
    if (module_exists('hybridauth') && module_exists('social_login') && !user_is_logged_in() && user_access('use hybridauth') && in_array('user_register_form', array_filter(variable_get('hybridauth_forms', array(
        'user_login',
        'user_login_block',
        'user_register_form'
      ))))
    ) {
      $form['hybridauth'] = array(
        '#type' => 'hybridauth_widget',
      );
    }

    $form['intro'] = array(
      '#weight' => '-20',
      '#markup' => '<p>' . t("You must fill in the form below to complete the activation of your account: @userid.", array(
          '@userid' => $userid
        )) . '</p>'
    );
    // for readonly registries with display name set add a prompt to use those credentials
    $displayname = variable_get('ibm_apim_idp_displayname');
    $ibm_apim_readonly_idp = variable_get('ibm_apim_readonly_idp', FALSE);
    if ($ibm_apim_readonly_idp == TRUE && isset($displayname) && !empty($displayname)) {
      $form['intro']['#markup'] .= '<p>' . t('Use your @displayname credentials to activate your account.', array(
          '@displayname' => $displayname
        )) . '</p>';
    }

    // Start with the default user account fields.
    user_account_form($form, $form_state);
    // remove username field if not set to show and disable mail since we already know it
    $showusername = variable_get('ibm_apim_username_show', 0);
    if ($showusername == 0) {
      unset($form['account']['name']);
    }
    $form['account']['mail']['#default_value'] = $userid;
    $form['account']['mail']['#disabled'] = TRUE;

    // Attach field widgets, and hide the ones where the 'user_register_form'
    // setting is not on. Plus hide the dev org field since we already know that.
    $langcode = entity_language('user', $form['#user']);
    field_attach_form('user', $form['#user'], $form, $form_state, $langcode);
    foreach (field_info_instances('user', 'user') as $field_name => $instance) {
      if (empty($instance['settings']['user_register_form']) || $field_name == "field_developer_organization") {
        $form[$field_name]['#access'] = FALSE;
      }
    }

    if (module_exists('security_questions')) {
      // Hide the questions form when the user is being registered by an admin.
      if (!user_access('administer users')) {
        // Merge in security_questions user form.
        module_load_include('inc', 'security_questions', 'security_questions.pages');
        $form['questions'] = array('#tree' => TRUE);
        $i = 0;

        if (isset($account)) {
          $form['account'] = array('#type' => 'value', '#value' => $account);
          // Fields for changing existing answers.
          $answers = security_questions_get_answer_list($account->uid);
          foreach ($answers as $answer) {
            $form['questions'][$i] = security_questions_selector_element('questions[' . $i . ']', $account, $answer);
            $i++;
          }
        }

        // Fields for selecting new answers.
        $required = variable_get('security_questions_number_required', 3);
        while ($i < $required) {
          $form['questions'][$i] = security_questions_selector_element('questions[' . $i . ']', $account);
          $i++;
        }

        $form['#validate'][] = 'security_questions_user_register_form_validate';
        // Can't add security_questions submit handler here, because the user account doesn't
        // exist yet. Instead, it will get the info during hook_user_insert().
      }
    }

    if (module_exists('legal')) {
      global $language;
      $conditions = legal_get_conditions($language->language);
      // no conditions set yet
      if (!empty($conditions['conditions'])) {
        $legal_form = legal_display_fields($conditions);
        if (isset($legal_form)) {
          $form = array_merge($form, $legal_form);
          $form['tc_id'] = array(
            '#type' => 'value',
            '#value' => $conditions['tc_id'],
          );

          $form['version'] = array(
            '#type' => 'value',
            '#value' => $conditions['version'],
          );

          $form['revision'] = array(
            '#type' => 'value',
            '#value' => $conditions['revision'],
          );

          $form['language'] = array(
            '#type' => 'value',
            '#value' => $conditions['language'],
          );
        }
      }
    }

    $form['token'] = array('#type' => 'hidden', '#value' => $token);
    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Activate')
    );

    $form['#validate'][] = 'user_register_validate';
    if (module_exists('password_policy')) {

      $account = $form['#user'];
      $policy = _password_policy_load_active_policy(array(DRUPAL_AUTHENTICATED_RID), $account);

      $translate = array();
      if (!empty($policy['constraints'])) {
        // Some policy constraints are active.
        password_policy_add_policy_js($policy, $account, $form);
        foreach ($policy['constraints'] as $key => $value) {
          if ($value) {
            $translate['constraint_' . $key] = _password_policy_constraint_error($key, $value);
          }
        }
      }

      // Printing out the restrictions.
      if (variable_get('password_policy_show_restrictions', 1) && isset($translate) && (isset($form['pass']) || isset($form['account']['pass']))) {
        $restriction_html = '<div id="account-pass-restrictions">' . theme('item_list', array(
            'items' => array_values($translate),
            'title' => t('Password Requirements')
          )) . '</div>';
        if (isset($form['account']) && is_array($form['account'])) {
          $form['account']['pass']['#prefix'] = $restriction_html;
        }
        else {
          $form['pass-pass1']['#prefix'] = $restriction_html;
        }
      }
      $form['#validate'][] = 'password_policy_password_validate';
    }
    $form['#submit'] = array('ibm_apim_activate_create_account_form_submit_handler');

    if (module_exists('ldap_user')) {
      // needed for writable LDAP
      array_unshift($form['#validate'], 'ldap_user_grab_password_validate');
      $form['#validate'][] = 'ldap_user_form_register_form_validate';
      $form['#submit'][] = 'ldap_user_form_register_form_submit2';
    }
    return $form;
  }
  else {
    drupal_set_message(t('Failed to decrypt userid. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Invalid Token: Token did not contain a valid userid. token: %token', array(
      '%token' => serialize($activationObj)
    ), WATCHDOG_NOTICE);
    drupal_goto();
  }
}

/**
 * Submit handler to handle the create account form
 * does not actually create the account in drupal though
 * that will happen on first login
 * @param $form
 * @param $form_state
 */
function ibm_apim_activate_create_account_form_submit_handler($form, &$form_state) {
  global $user;
  $actToken = $form_state['values']['token'];
  // decode the base64 encoded JSON in the incoming URL
  $activationObj = json_decode(base64_decode($actToken));

  // set global variables with the temp auth credentials from the incoming URL payload
  global $tempUser;
  global $tempPwd;
  $tempUser = $activationObj->{'authentication'}->{'username'};
  $tempPwd = $activationObj->{'authentication'}->{'password'};
  $org = check_plain($activationObj->{'providerContext'}->{'orgID'});
  $env = check_plain($activationObj->{'providerContext'}->{'environmentID'});
  $userid = ibm_apim_decrypt_data($activationObj->{'username'});
  if (!empty($userid)) {
    watchdog('ibm_apim_activate_create_account_form_submit_handler', 'account: %token', array(
      '%token' => serialize($userid)
    ), WATCHDOG_NOTICE);
    $orig_values = $form_state['values'];

    $pass = $form_state['values']['pass'];
    // create user object to send to apic
    $data = ibm_apim_convert_to_apic_address($form_state['values']);
    if (isset($form_state['values']['field_company']['und'][0]['value'])) {
      $companyname = $form_state['values']['field_company']['und'][0]['value'];
    }
    if (isset($form_state['values']['field_phone']['und'][0]['value'])) {
      $phone = $form_state['values']['field_phone']['und'][0]['value'];
    }
    if (isset($form_state['values']['field_address']['und'][0])) {
      $address = $form_state['values']['field_address']['und'][0];
    }
    // activate from invitation cannot handle organization (and doesnt need it)
    if (isset($data['organization'])) {
      unset($data['organization']);
    }

    // verify the temp userid and password are valid
    $url = $activationObj->{'url'};
    if (!isset($url)) {
      drupal_set_message(t('Token did not contain a valid URL. Contact the system administrator for assistance.'), 'error');
      watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Invalid Token: Token did not contain a valid URL. token: %token', array(
        '%token' => serialize($activationObj)
      ), WATCHDOG_NOTICE);
      drupal_goto();
    }
    $apimserver = _ibm_apim_parse_apim_host();
    if ($apimserver['port'] == '443') {
      $apimurl = $apimserver['scheme'] . "://" . $apimserver['host'] . "/";
    } else {
      $apimurl = $apimserver['scheme'] . "://" . $apimserver['host'] . ":" . $apimserver['port'] . "/";
    }
    if(substr($url,0,strlen($apimurl)) != $apimurl) {
      $tokenValidationDisabled = variable_get('ibm_apim_insecure_token_validation', FALSE);
      if ($tokenValidationDisabled == FALSE) {
        drupal_set_message(t('URL provided in token does not match APIM server. Contact the system administrator for assistance.'), 'error');
        watchdog('auth_apic_activate_id_callback', 'Invalid Token: Token contains a invalid URL. token: %token', [
          '%token' => serialize($activationObj)
        ], WATCHDOG_NOTICE);
        drupal_goto();
      } else {
        watchdog('auth_apic_activate_id_callback', 'Invalid Token: Token contains a invalid URL. This is likely a misconfiguration. Since validation of tokens has been disabled, the token will be allowed to pass, however validation may fail. token: %token', [
          '%token' => serialize($activationObj)
        ], WATCHDOG_NOTICE);
      }
    }
    $headers = array(
      'Content-Type: application/json',
      'Accept: application/json',
      "X-IBM-APIManagement-Context: " . $org . '.' . $env,
      'Authorization: Basic ' . base64_encode($tempUser . ':' . $tempPwd)
    );
    global $language;
    $lang_name = _ibm_apim_convert_lang_name($language->language);
    if (isset($lang_name)) {
      $headers[] = 'Accept-Language: ' . $lang_name;
    }

    // override username since we already know that
    $emailasuser = variable_get('ibm_apim_email_as_username', 1);
    if ($emailasuser == 1) {
      $data['username'] = $userid;
    }
    else {
      $data['username'] = $form_state['values']['name'];
    }

    $debug_trace = variable_get('ibm_apim_debug_trace', FALSE);
    if ($debug_trace == TRUE) {
      watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Posting headers: %headers', array('%headers' => serialize($headers)), WATCHDOG_NOTICE);
      // Don't log body for security reasons.
      // watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Posting Body: %data', array('%data' => serialize($data)), WATCHDOG_NOTICE);
    }

    $result = _ibm_apim_json_http_request($url, 'POST', $headers, json_encode($data));

    if ($debug_trace == TRUE) {
      watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Got back: %result', array('%result' => serialize($result)), WATCHDOG_NOTICE);
    }

    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      drupal_set_message(t('Your account was created successfully.'));
      // we save a cookie here so that we can use this alongside the logout cookie to display a suitable message.
      module_load_include('pages.inc', 'user');
      user_cookie_save(array('ibmapiminvited' => 1));

      $fields = array(
        'pass' => $pass,
        'email' => $userid,
        'mail' => $userid,
        'status' => 1
      );
      $legal_values = array();
      if (module_exists('legal') && isset($form_state['values']['version']) && isset($form_state['values']['revision'])) {
        $legal_values['version'] = $form_state['values']['version'];
        $legal_values['revision'] = $form_state['values']['revision'];
        $legal_values['language'] = $form_state['values']['language'];
        $legal_values['tc_id'] = $form_state['values']['tc_id'];
      }
      $keys = array_keys($orig_values);
      foreach ($keys as $key) {
        if (_ibm_apim_startsWith($key, 'field_')) {
          $fields[$key] = $orig_values[$key];
        }
      }
      ibm_apim_external_login_register($data['username'], $fields, TRUE, $legal_values);
      global $user;
      $edit = array_intersect_key((array) $user, $orig_values);

      if (isset($result->data['id'])) {
        $edit['field_uid'] = array('und' => array(0 => array('value' => $result->data['id'])));
      }
      $user = user_save($user, $edit);

      if (module_exists('security_questions')) {
        security_questions_user_answers_save($user, $form_state['values']['questions']);
      }

      // forcibly log the user out since drupal will automatically log them in
      // and nothing will actually work until they have activated the account in the APIm backend
      $social_login = variable_get('ibm_apim_social_login', 0);
      if ($social_login == 0) {
        module_load_include('pages.inc', 'user');
        user_logout();
        drupal_goto('user/login');
      }
    }
    else {
      watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Error registering user %username. response: %response', array(
        '%username' => $userid,
        '%response' => serialize($result)
      ), WATCHDOG_NOTICE);
      drupal_set_message(t('There was an error creating your account: %data', array('%data' => serialize($result->data))), 'error');
    }
  }
  else {
    drupal_set_message(t('Failed to decrypt userid. Contact the system administrator for assistance.'), 'error');
    watchdog('ibm_apim_activate_create_account_form_submit_handler', 'Invalid Token: Token did not contain a valid userid. token: %token', array(
      '%token' => serialize($activationObj)
    ), WATCHDOG_NOTICE);
    drupal_goto();
  }
}

/**
 * Utility function to convert drupal locale names to standard ones APIM expects
 * @param $lang_name
 * @return null|string
 */
function _ibm_apim_convert_lang_name($lang_name) {
  if (isset($lang_name)) {
    if (strtolower($lang_name) == 'zh_hans' || strtolower($lang_name) == 'zh-hans') {
      $lang_name = 'zh-cn';
    }
    elseif (strtolower($lang_name) == 'zh_hant' || strtolower($lang_name) == 'zh-hant') {
      $lang_name = 'zh-tw';
    }
    $lang_name = str_replace('_', '-', $lang_name);
    return $lang_name;
  }
  else {
    return NULL;
  }
}

/**
 * Utility function to convert standard locale names APIM expects to drupal ones
 * @param $lang_name
 * @return null|string
 */
function _ibm_apim_convert_lang_name_to_drupal($lang_name) {
  if (isset($lang_name)) {
    if (strtolower($lang_name) == 'zh-cn' || strtolower($lang_name) == 'zh_cn') {
      $lang_name = 'zh_hans';
    }
    elseif (strtolower($lang_name) == 'zh_tw' || strtolower($lang_name) == 'zh-tw') {
      $lang_name = 'zh_hant';
    }
    $lang_name = str_replace('-', '_', $lang_name);
    return $lang_name;
  }
  else {
    return NULL;
  }
}

/**
 * Decrypt data using APIC encryption (AES-256-CBC)
 * @param $data
 * @return bool|string
 */
function ibm_apim_decrypt_data($data) {
  $ibm_apim_site_url = variable_get('ibm_apim_site_url', NULL);
  if (isset($ibm_apim_site_url) && !empty($ibm_apim_site_url)) {
    // if no leading protocol then assume https
    if (mb_strpos($ibm_apim_site_url, 'https://') !== 0 && mb_strpos($ibm_apim_site_url, 'http://') !== 0) {
      $ibm_apim_site_url = 'https://' . $ibm_apim_site_url;
    }

    // validate the encrypted username is base64 encoded
    if ((strcmp(substr($data, 0, 17), '!BASE64_SIV_ENC!_') != 0) || !preg_match('%^[a-zA-Z0-9/+]*={0,2}$%', substr($data, 17))){
      watchdog('ibm_apim_decrypt_data', 'Invalid activation token', array(), WATCHDOG_NOTICE);
      return FALSE;
    }

    exec('bash -c "/usr/local/bin/node /home/admin/bgsync/decrypt_token.js -p ' . escapeshellarg($ibm_apim_site_url) . ' -e ' . escapeshellarg($data) . ' 2> >(ADMIN_USER=$USER ~admin/bin/background_sync_logger >> /var/log/devportal/decrypt.log)"', $output, $rc);
    if (isset($rc) && $rc != 0) {
      watchdog('ibm_apim_decrypt_data', 'Decryption returned %rc. Output: %data', array(
        '%rc' => $rc,
        '%data' => var_export($output)
      ), WATCHDOG_NOTICE);
      return FALSE;
    }
    else {
      $decrypted = $output[0];
      return $decrypted;
    }
  }
  else {
    return FALSE;
  }
}

/**
 * Render arbitrary JSON content for vendor extensions
 * @param $data
 * @return string
 */
function ibm_apim_render_extension($data) {
  $return = '';
  if (is_object($data) || is_array($data)) {
    $return .= '<ul>';
    foreach ($data as $key => $value) {
      $return .= '<li>' . $key . ': ';
      if (is_object($value) || is_array($value)) {
        $return .= ibm_apim_render_extension($value);
      }
      else if (is_bool($value)) {
        $return .= boolval($value) ? 'true' : 'false';
      }
      else {
        $return .= $value;
      }
      $return .= '</li>';
    }
    $return .= '</ul>';
  }
  else if (is_bool($data)) {
    $return .= boolval($data) ? 'true' : 'false';
  }
  else {
    $return .= $data;
  }
  return $return;
}

/**
 * Take a list of node ids and filter it to be only the ones current user should have access to
 * @param $nids
 * @return array
 */
function ibm_apim_filter_acl($nids) {
  $allowed = array();
  foreach ($nids as $nid) {
    $node = node_load($nid);
    if ($node->type == 'product') {
      if (module_exists('product')) {
        if (product_check_product_access($node)) {
          $allowed[] = $nid;
        }
      }
      else {
        $allowed[] = $nid;
      }
    }
    elseif ($node->type == 'api') {
      if (module_exists('api')) {
        if (api_check_api_access($node)) {
          $allowed[] = $nid;
        }
      }
      else {
        $allowed[] = $nid;
      }
    }
    elseif ($node->type == 'application') {
      if (module_exists('application')) {
        if (user_is_logged_in() && isset($myorg['id']) && isset($node->application_orgid[$node->language][0]['value']) && $node->application_orgid[$node->language][0]['value'] == $myorg['id']) {
          $allowed[] = $nid;
        }
      }
      else {
        $allowed[] = $nid;
      }
    }
    elseif ($node->type == 'devorg') {
      if (module_exists('devorg')) {
        if (user_is_logged_in() && isset($myorg['id']) && isset($node->devorg_id[$node->language][0]['value']) && $node->devorg_id[$node->language][0]['value'] == $myorg['id']) {
          $allowed[] = $nid;
        }
      }
      else {
        $allowed[] = $nid;
      }
    }
    else {
      $allowed[] = $nid;
    }
  }
  return $allowed;
}

/**
 * Method for modules like TFA to check password
 * If admin or using social login then use drupal core method
 * Else using APIM authentication then use our method.
 *
 * @param $current_pass
 * @param $account
 * @return bool
 */
function ibm_apim_check_password($current_pass, $account) {
  $ibm_apim_social_login = variable_get('ibm_apim_social_login', 0);
  if ($ibm_apim_social_login == 1 || $account->uid == 1) {
    // Check password. (from user.module user_validate_current_pass()).
    require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
    $result = user_check_password($current_pass, $account);
    return $result;
  }
  else {
    if (module_exists('auth_apic')) {
      return auth_apic_authenticate($account->name, $current_pass);
    }
    else {
      return FALSE;
    }
  }
}

/**
 * Form validation handler for the current password on the user_account_form().
 *
 * @see user_account_form()
 */
function ibm_apim_validate_current_pass(&$form, &$form_state) {
  $account = $form['#user'];
  foreach ($form_state['values']['current_pass_required_values'] as $key => $name) {
    // This validation only works for required textfields (like mail) or
    // form values like password_confirm that have their own validation
    // that prevent them from being empty if they are changed.
    if ((strlen(trim($form_state['values'][$key])) > 0) && ($form_state['values'][$key] != $account->$key)) {
      $current_pass_failed = strlen(trim($form_state['values']['current_pass'])) == 0 || !ibm_apim_check_password($form_state['values']['current_pass'], $account);
      if ($current_pass_failed) {
        form_set_error('current_pass', t("Your current password is missing or incorrect; it's required to change the %name.", array('%name' => $name)));
        form_set_error($key);
      }
      // We only need to check the password once.
      break;
    }
  }
}

/**
 * return the translated string from an array (representing the api / product document)
 * if not found then it falls back on english
 *
 * @param array $array the array to modify
 * @param array $path the path to the value
 * @param string $attribute the attribute to return from $path
 *
 * @return mixed previous value
 */
function ibm_apim_get_translated_string(&$array, $path = array(), $attribute = 'name') {
  global $language;
  $langcode = $language->language;
  $langcode = _ibm_apim_convert_lang_name($langcode);
  $ref = &$array;
  if (isset($path) && !empty($path)) {
    foreach ($path as $key) {
      if (!is_array($ref)) {
        $ref = array();
      }
      $ref = &$ref[$key];
    }
  }
  $prev = $ref;
  $primary = locale_get_primary_language($langcode);
  if (isset($prev['x-ibm-languages'][$attribute][$langcode])) {
    return $prev['x-ibm-languages'][$attribute][$langcode];
  }
  else if (isset($prev['x-ibm-languages'][$attribute][$primary])) {
    return $prev['x-ibm-languages'][$attribute][$primary];
  }
  else if (isset($prev[$attribute])) {
    return $prev[$attribute];
  }
  else {
    return 'Attribute ' . $attribute . ' not found';
  }
}

/**
 * Returns a list of all the modules in the main shared modules directory (non-site specific)
 * @return array
 */
function ibm_apim_get_bundled_modules() {
  $modules_dir = DRUPAL_ROOT . '/sites/all/modules';
  $dirs = array_filter(glob($modules_dir . '/*', GLOB_ONLYDIR), 'is_dir');
  $modules_list = array();
  foreach ($dirs as $dir) {
    $parts = pathinfo($dir);
    $modules_list[] = $parts['basename'];
  }
  return $modules_list;
}
