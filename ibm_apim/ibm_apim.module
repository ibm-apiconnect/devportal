<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2021
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * @file
 * Provides APIC integration.
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Markup;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Url;
use Drupal\ibm_apim\Exception\ModuleInstallationBlocked;
use Drupal\user\Entity\User;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\StringTranslation\TranslatableMarkup;

/**
 * Implementation of hook_init().
 *
 * @throws \Exception
 */
function ibm_apim_init() {
  // not during install
  if (isset($_SERVER['REMOTE_ADDR']) && $_SERVER['REMOTE_ADDR'] !== '127.0.0.1' && \Drupal::state()->get('install_task') === 'done') {
    // The time stamp should be today's date at 23:59:59 hours in seconds
    // so it is easy to compare with the timestamp in the sessions and users tables
    $date = new DateTime();
    $timestamp = $date->setTime(23, 59, 59)->getTimestamp();

    $ibm_apim_last_access = \Drupal::state()->get('ibm_apim.last_access', 0);
    if ($ibm_apim_last_access !== $timestamp) {
      \Drupal::state()->set('ibm_apim.last_access', $timestamp);
    }
  }
}

/**
 * We need our module to run last for the user register form so we can remove any other fields
 * other modules might have added - such as the forum notifications.
 *
 * @param array $implementations
 * @param string $hook
 */
function ibm_apim_module_implements_alter(&$implementations, $hook) {
  if (($hook === 'form_alter' || $hook === 'menu_links_discovered_alter') && isset($implementations['ibm_apim'])) {
    $group = $implementations['ibm_apim'];
    unset($implementations['ibm_apim']);
    $implementations['ibm_apim'] = $group;
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 * @param $variables
 */
function ibm_apim_preprocess_menu(&$variables) {
  if (isset($variables['menu_name']) && $variables['menu_name'] === 'account') {
    $currentUser = \Drupal::currentUser();
    $user = User::load($currentUser->id());
    $route_provider = \Drupal::service('router.route_provider');
    $blogRouteExists = count($route_provider->getRoutesByNames(['view.blog.blog_user_all'])) === 1;
    // remove the my blog link if anon or dont have perms to create blog posts (check blog view exists too)
    if ($blogRouteExists !== TRUE || (array_key_exists('blog.myblog_link', $variables['items']) && ($currentUser->isAnonymous() || ($user !== NULL && !$user->hasPermission('create blog_post content'))))) {
      unset($variables['items']['blog.myblog_link']);
    }
  }
}

/**
 * Add a Support breadcrumb link to AsyncAPI concept pages
 *
 * @param $variables
 */
function ibm_apim_preprocess_page_title(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  if (isset($current_path)) {
    $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    if (isset($result) && ($result === '/asyncapi' || $result === '/asyncapi-kafka' || $result === '/asyncapi-mq')) {
      $variables['title'] = Markup::create('<span class=\'title-breadcrumb\'><a href=\'' . Url::fromUri('internal:/support')
          ->toString() . '\'>' . t('Support') . '</a> /</span>' . $variables['title']->__toString());
    }
  }
}

/**
 *  Implements hook_menu_links_discovered_alter().
 *
 * @param array $links
 */
function ibm_apim_menu_links_discovered_alter(&$links) {
  // remove option to create new user
  if (isset($links['user.admin_create'])) {
    unset($links['user.admin_create']);
  }
  // remove duplicate block content link
  if (isset($links['entity.block_content.collection'], $links['block.admin_display_view.block_content.page_1'])) {
    unset($links['entity.block_content.collection']);
  }
  // some config_translation menu entries seem to be missing titles!
  foreach ($links as $key => $link) {
    if (!isset($link['title']) || empty($link['title'])) {
      $links[$key]['title'] = t('Translate');
    }
  }
}

/**
 * Implements hook_user_insert
 *
 * When new users are created force first_time_login to 1
 * This will get changed to 0 by the login redirect
 *
 * @param \Drupal\user\Entity\User $account
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function ibm_apim_user_insert(User $account) {
  if ($account !== NULL && (int) $account->id() !== 1) {
    $account->set('first_time_login', 1);
    $account->save();
    // trigger avatar generation
    $moduleHandler = \Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('avatars')) {
      $avatarManager = \Drupal::service('avatars.avatar_manager');
      $avatarManager->syncAvatar($account);
    }
  }
}

/**
 * Add twig template for My Organization page
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function ibm_apim_theme($existing, $type, $theme, $path) {
  return [
    'ibm_apim_myorg' => [
      'variables' => [
        'node' => [],
        'tabs' => [],
      ],
    ],
    'ibm_apim_search_icon_block' => [
      'variables' => [],
    ],
    'ibm_apim_concepts_block' => [
      'variables' => [
        'concepts' => [],
        'eventsFound' => FALSE,
      ],
    ],
    'ibm_apim_get_started' => [
      'variables' => [
        'userHasAppManage' => FALSE,
        'show_register_app' => FALSE,
      ],
    ],
    'ibm_apim_noperms' => [
      'variables' => [
        'images_path' => \Drupal::service('extension.list.module')->getPath('ibm_apim'),
      ],
    ],
    'ibm_apim_support' => [
      'variables' => [
        'forum' => TRUE,
        'contact' => TRUE,
        'social' => TRUE,
      ],
    ],
    'ibm_apim_analytics' => [
      'variables' => [
        'consumerorgId' => NULL,
        'catalogId' => NULL,
        'catalogName' => NULL,
        'porgId' => NULL,
        'consumerorgTitle' => NULL,
        'filter' => NULL,
        'filterValue' => NULL,
        'events_found' => NULL,
        'node' => [],
        'tabs' => [],
      ],
    ],
    'ibm_apim_activity' => [
      'variables' => [
        'consumerorgTitle' => NULL,
        'node' => [],
        'tabs' => [],
        'events' => [],
        'analytics_access' => FALSE,
      ],
    ],
    'ibm_apim_status_messages_block' => [
      'variables' => [
        'header' => NULL,
        'messages' => NULL,
      ],
    ],
    'ibm_apim_wizard_title_block' => [
      'variables' => [
        'header' => NULL,
      ],
    ],
    'form_subscription_wizard_choose_application' => [
      'variables' => [],
    ],
    'form_subscription_wizard_confirm_subscribe' => [
      'variables' => [],
    ],
    'form_subscription_wizard_subscribe_result' => [
      'variables' => [],
    ],
  ];
}

/**
 * Need to use our custom content type templates for FAQ
 *
 * @param array $variables
 * @param string $hook
 * @param array $info
 */
function ibm_apim_preprocess(&$variables, $hook, &$info) {
  if ($hook === 'node') {
    $contentTypeToShow = $variables['node']->bundle();
    if ($contentTypeToShow === 'faq') {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      //Load the view mode names.
      $allViewModes = \Drupal::service('entity_display.repository')->getViewModes('node');
      //View mode for this request.
      $viewModeToUse = $variables['view_mode'];
      //Is the view mode defined for nodes?
      if (array_key_exists($viewModeToUse, $allViewModes)) {
        //Is there a template file for the view modes in the module?
        if ($viewModeToUse === 'full') {
          $templateFileName = 'node--' . $contentTypeToShow;
        }
        else {
          $templateFileName = 'node--' . $contentTypeToShow . '--' . $viewModeToUse;
        }
        $themeName = \Drupal::theme()->getActiveTheme()->getName();
        $themePath = \Drupal::theme()->getActiveTheme()->getPath();
        if (file_exists($themePath . '/templates/node/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($themeName);
          $info['path'] = \Drupal::service('extension.list.theme')->getPath($themeName) . '/templates/node';
          $info['template'] = $templateFileName;
        }
        elseif (file_exists($themePath . '/templates/' . $templateFileName . '.html.twig')) {
          $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($themeName);
          $info['path'] = \Drupal::service('extension.list.theme')->getPath($themeName) . '/templates';
          $info['template'] = $templateFileName;
        }
        else {
          $templateFilePath = \Drupal::service('extension.list.module')->getPath('ibm_apim') . '/templates/' . $templateFileName . '.html.twig';
          if (file_exists($templateFilePath)) {
            $info['theme path'] = \Drupal::service('extension.list.module')->getPath('ibm_apim');
            $info['path'] = \Drupal::service('extension.list.module')->getPath('ibm_apim') . '/templates';
            $info['template'] = $templateFileName;
          }
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }

  if ($hook === 'views_exposed_form') {
    $parts = explode('-', $variables['form']['#attributes']['data-drupal-selector']);
    if (count($parts) >= 4 && ($parts[3] === 'applications' || $parts[3] === 'apis' || $parts[3] === 'products' || $parts[3] === 'faqs' || ($parts[3] === 'search' && $parts[4] === 'content'))) {
      ibm_apim_entry_trace(__FUNCTION__, NULL);
      $templateFileName = 'views-exposed-form--' . $parts[3];
      if (isset($parts[4]) && !empty($parts[4]) && $parts[4] !== 'page') {
        $templateFileName = $templateFileName . '-' . $parts[4];
      }
      // by default use viewname without the 's' to get the module name
      $moduleName = rtrim($parts[3], 's');
      // faq content type comes from this module
      if ($parts[3] === 'faqs' || ($parts[3] === 'search' && $parts[4] === 'content')) {
        $moduleName = 'ibm_apim';
      }
      elseif ($parts[3] === 'applications') {
        $moduleName = 'apic_app';
      }
      elseif ($parts[3] === 'apis') {
        $moduleName = 'apic_api';
      }
      $themeName = \Drupal::theme()->getActiveTheme()->getName();
      $themePath = \Drupal::theme()->getActiveTheme()->getPath();
      if (file_exists($themePath . '/templates/views/' . $templateFileName . '.html.twig')) {
        $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($themeName);
        $info['path'] = \Drupal::service('extension.list.theme')->getPath($themeName) . '/templates/views';
        $info['template'] = $templateFileName;
      }
      elseif (file_exists($themePath . '/templates/' . $templateFileName . '.html.twig')) {
        $info['theme path'] = \Drupal::service('extension.list.theme')->getPath($themeName);
        $info['path'] = \Drupal::service('extension.list.theme')->getPath($themeName) . '/templates';
        $info['template'] = $templateFileName;
      }
      else {
        $templateFilePath = \Drupal::service('extension.list.module')->getPath($moduleName) . '/templates/' . $templateFileName . '.html.twig';
        if (file_exists($templateFilePath)) {
          $info['theme path'] = \Drupal::service('extension.list.module')->getPath($moduleName);
          $info['path'] = \Drupal::service('extension.list.module')->getPath($moduleName) . '/templates';
          $info['template'] = $templateFileName;
        }
      }
      ibm_apim_exit_trace(__FUNCTION__, NULL);
    }
  }

  if ($hook === 'ibm_apim_myorg' || $hook === 'ibm_apim_activity' || $hook === 'ibm_apim_analytics' || $hook === 'consumerorg_billing') {
    // set analytics variables if it is enabled
    $variables['analytics_access'] = FALSE;
    $analyticsAccessCheck = \Drupal::service('ibm_apim.analytics_access_checker')->access();
    if (isset($analyticsAccessCheck)) {
      $variables['analytics_access'] = $analyticsAccessCheck->isAllowed();
    }
    // set billing variables if it is enabled
    $variables['billing_access'] = FALSE;
    $billingAccessCheck = \Drupal::service('ibm_apim.billing_access_checker')->access();
    if (isset($billingAccessCheck)) {
      $variables['billing_access'] = $billingAccessCheck->isAllowed();
    }
  }

}

/**
 * Use our template for the status report instead
 *
 * @param array $theme_registry
 */
function ibm_apim_theme_registry_alter(&$theme_registry) {
  $theme_registry['status_report_general_info']['path'] = \Drupal::service('extension.list.module')->getPath('ibm_apim') . '/templates';
}

/**
 * @param $variables
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function template_preprocess_status_report_general_info(&$variables) {
  $fileName = 	\Drupal::service('extension.list.profile')->getPath('apim_profile') . '/apic_version.yaml';
  if (file_exists($fileName)) {
    $yaml = yaml_parse_file(	\Drupal::service('extension.list.profile')->getPath('apim_profile') . '/apic_version.yaml');
    $variables['apic'] = ['value' => $yaml['version'], 'description' => $yaml['build']];
  }
  else {
    $variables['apic'] = ['value' => 'undefined', 'description' => t('Could not detect APIC version')];
  }

  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('apic_api')) {
    $fileName = \Drupal::service('extension.list.module')->getPath('apic_api') . '/explorer/app/version.json';
    if (file_exists($fileName)) {
      $contents = file_get_contents(\Drupal::service('extension.list.module')->getPath('apic_api') . '/explorer/app/version.json');
      $json = json_decode($contents, TRUE);
      $variables['explorer'] = [
        'value' => $json['version']['version'],
        'description' => $json['version']['buildDate'],
      ];
    }
  }
  else {
    $variables['explorer'] = ['value' => 'undefined', 'description' => t('Could not detect Explorer version')];
  }

  $customModules = [];
  $customThemes = [];
  $sitePath = \Drupal::getContainer()->getParameter('site.path');
  $dir = new DirectoryIterator($sitePath . '/modules');
  foreach ($dir as $fileInfo) {
    if ($fileInfo->isDir() && !$fileInfo->isDot()) {
      $customModules[] = $fileInfo->getFilename();
    }
  }
  $dir = new DirectoryIterator($sitePath . '/themes');
  foreach ($dir as $fileInfo) {
    if ($fileInfo->isDir() && !$fileInfo->isDot()) {
      $customThemes[] = $fileInfo->getFilename();
    }
  }
  $variables['custom_modules'] = $customModules;
  $variables['custom_themes'] = $customThemes;

  $nodeFields = ['api' => [], 'product' => [], 'application' => [], 'consumerorg' => []];
  if ($moduleHandler->moduleExists('apic_app') && \Drupal::hasService('apic_app.application')) {
    $nodeFields['application'] = \Drupal::service('apic_app.application')->getCustomFields();
  }
  if ($moduleHandler->moduleExists('apic_api')) {
    $nodeFields['api'] = \Drupal\apic_api\Api::getCustomFields();
  }
  if ($moduleHandler->moduleExists('product')) {
    $nodeFields['product'] = \Drupal\product\Product::getCustomFields();
  }
  if ($moduleHandler->moduleExists('consumerorg') && \Drupal::hasService('ibm_apim.consumerorg')) {
    $cOrgService = \Drupal::service('ibm_apim.consumerorg');
    $nodeFields['consumerorg'] = $cOrgService->getCustomFields();
  }
  $userService = \Drupal::service('ibm_apim.apicuser');
  $userFields = $userService->getCustomUserFields();
  $variables['user_fields'] = $userFields;
  $variables['node_fields'] = $nodeFields;
}

/**
 * Preprocess variables for html templates.
 *
 * @param array $variables
 */
function ibm_apim_preprocess_html(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $currentPath = \Drupal::service('path.current')->getPath();
  $currentPathAlias = \Drupal::service('path_alias.manager')->getAliasByPath($currentPath);
  $variables['current_path'] = $currentPathAlias;
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('context-' . $currentPathAlias);
  // add user registry type to body
  $defaultRegistry = \Drupal::service('ibm_apim.user_registry')->getDefaultRegistry();
  if (isset($defaultRegistry)) {
    $variables['idpType'] = $defaultRegistry->getRegistryType();
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('user-registry-' . $defaultRegistry->getRegistryType());
  }
  $routeName = \Drupal::routeMatch()->getRouteName();
  if (isset($routeName)) {
    $variables['route_name'] = $routeName;
    $variables['attributes']['class'][] = Html::cleanCssIdentifier('route-' . $routeName);
  }

  // add variable with the user registry count - useful for the user management forms
  $urs = \Drupal::service('ibm_apim.user_registry')->getAll();
  $urCount = count($urs);
  $variables['user_registry_count'] = $urCount;
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('ur-count-' . $urCount);

  $passResetToken = \Drupal::request()->get('pass-reset-token');
  if (isset($passResetToken) && !empty($passResetToken)) {
    $variables['pass_reset_token'] = TRUE;
    $variables['attributes']['class'][] = 'pass-reset';
  }

  $account = \Drupal::currentUser();
  $roles = $account->getRoles();
  foreach ($roles as $role) {
    $variables['attributes']['class'][] = 'role-' . $role;
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Add core library to all pages
 *
 * @param array $attachments
 */
function ibm_apim_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'ibm_apim/core';
}

/**
 * remove security kit options that are handled by nginx
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function ibm_apim_form_seckit_settings_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['seckit_xss']['csp'])) {
    unset($form['seckit_xss']['csp']);
  }

  if (isset($form['seckit_xss']['x_xss'])) {
    unset($form['seckit_xss']['x_xss']);
    unset($form['seckit_xss']);
  }

  if (isset($form['seckit_clickjacking']['x_frame_options'])) {
    unset($form['seckit_clickjacking']['x_frame_options']);
  }
}

/**
 * Alter the Updater information array.
 *
 * An Updater is a class that knows how to update various parts of the Drupal
 * file system, for example to update modules that have newer releases, or to
 * install a new theme.
 *
 * @param array $updaters
 *   Associative array of updaters as defined through hook_updater_info().
 *   Alter this array directly.
 *
 * @see drupal_get_updaters()
 * @see hook_updater_info()
 */
function ibm_apim_updater_info_alter(&$updaters) {
  // switch to using our custom Updaters
  $updaters['module']['class'] = 'Drupal\ibm_apim\Updater\ApicModule';
  $updaters['theme']['class'] = 'Drupal\ibm_apim\Updater\ApicTheme';
}

/**
 * Implementation of hook_form_alter() to alter the Edit profile form
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function ibm_apim_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_forum_edit_form':
      if (!\Drupal::currentUser()->hasPermission('view forum revisions')) {
        if (isset($form['revision'])) {
          unset($form['revision']);
        }
        if (isset($form['revision_information'])) {
          unset($form['revision_information']);
        }
        if (isset($form['revision_log'])) {
          unset($form['revision_log']);
        }
      }
      break;
    case 'user_register_form' :
      // We have to hide the elements that password policy module adds so we can replace them with something more compact!
      if (\Drupal::moduleHandler()->moduleExists("password_policy")) {
        $form['ibm-apim-password-policy-status']['#weight'] = 7;
        // make sure the password policy appears right after the password field
        $entityFormStorage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
        $userFormDisplay = $entityFormStorage->load('user.user.register');
        if (isset($userFormDisplay)) {
          $pass = $userFormDisplay->getComponent('pass');
          if (array_key_exists('weight', $pass)) {
            $form['ibm-apim-password-policy-status']['#weight'] = ($pass['weight'] + 0.1);
          }
        }
        $form['account']['password_policy_status']['#access'] = FALSE;
      }
      break;
    case 'user_multiple_cancel_confirm' :
      $form['apic_intro'] = [
        '#markup' => '<br/><br/><p>' . t('Note: Cancelling another user\'s account in the portal will NOT delete their account from the IBM API Manager, the user\'s record in the Portal database will simply be recreated when they next login. 
        Users must delete their own accounts from their \'Edit Profile\' page for them to be completely deleted from the IBM API Manager. Administrators may delete users via the toolkit, refer to the IBM API Connect Knowledge Center.') . '</p>',
        '#weight' => 20,
      ];
      break;
    case 'user_form':
      $form['account']['password_policy_status']['#access'] = FALSE;
      break;
    case 'password_policy_general_form':
      // do not support password reset
      if (isset($form['password_reset'])) {
        unset($form['password_reset']);
      }
      break;
    case 'user_pass_reset' :
      // rename the Log in link
      $form['actions']['submit']['#value'] = t('Sign in');
      break;
    case 'system_modules' :
      // The 'Extend' module list page

      // hide the password policy history module
      if (isset($form['modules']['Security']['password_policy_history'])) {
        unset($form['modules']['Security']['password_policy_history']);
      }
      // hide the default search api db module
      if (isset($form['modules']['Search']['search_api_db_defaults'])) {
        unset($form['modules']['Search']['search_api_db_defaults']);
      }
      // hide some core modules
      if (isset($form['modules']['Core']['search'])) {
        unset($form['modules']['Core']['search']);
      }
      if (isset($form['modules']['Core']['syslog'])) {
        unset($form['modules']['Core']['syslog']);
      }
      // hide our test module
      if (isset($form['modules']['IBM API Developer Portal']['apictest'])) {
        unset($form['modules']['IBM API Developer Portal']['apictest']);
      }
      // hide the migration modules
      if (isset($form['modules']['Migration']['migrate_upgrade'])) {
        unset($form['modules']['Migration']['migrate_upgrade']);
      }
      if (isset($form['modules']['Migration']['migrate'])) {
        unset($form['modules']['Migration']['migrate']);
      }
      if (isset($form['modules']['Migration']['migrate_drupal'])) {
        unset($form['modules']['Migration']['migrate_drupal']);
      }
      if (isset($form['modules']['Migration']['migrate_drupal_ui'])) {
        unset($form['modules']['Migration']['migrate_drupal_ui']);
      }
      if (isset($form['modules']['Migration']['migrate_drupal_multilingual'])) {
        unset($form['modules']['Migration']['migrate_drupal_multilingual']);
      }
      if (isset($form['modules']['Migration']['migrate_plus'])) {
        unset($form['modules']['Migration']['migrate_plus']);
      }
      if (isset($form['modules']['Migration']['migrate_tools'])) {
        unset($form['modules']['Migration']['migrate_tools']);
      }
      if (isset($form['modules']['Migrate']['field_group_migrate'])) {
        unset($form['modules']['Migrate']['field_group_migrate']);
      }
      if (isset($form['modules']['Examples']['migrate_example_advanced'])) {
        unset($form['modules']['Examples']['migrate_example_advanced']);
      }
      if (isset($form['modules']['Examples']['migrate_example'])) {
        unset($form['modules']['Examples']['migrate_example']);
      }
      if (isset($form['modules']['Core (Experimental)']['migrate_drupal_multilingual'])) {
        unset($form['modules']['Core (Experimental)']['migrate_drupal_multilingual']);
      }
      // if billing isn't enabled hide the monetization modules
      $billingEnabled = \Drupal::service('ibm_apim.billing')->isEnabled();
      if ($billingEnabled !== TRUE) {
        if (isset($form['modules']['IBM API Developer Portal']['ibm_create_payment_method'])) {
          unset($form['modules']['IBM API Developer Portal']['ibm_create_payment_method']);
        }
        if (isset($form['modules']['IBM API Developer Portal']['ibm_stripe_payment_method'])) {
          unset($form['modules']['IBM API Developer Portal']['ibm_stripe_payment_method']);
        }
      }
      // blocklist some modules
      $moduleBlocklist = \Drupal::service('ibm_apim.site_config')->getBlockList();
      if (isset($moduleBlocklist) && !empty($moduleBlocklist)) {
        foreach ($form['modules'] as $modulePackage => $modules) {
          if (!is_array($modules)) {
            continue;
          }

          foreach ($modules as $moduleName => $module_info) {
            // Checks whether the module is blocklisted.
            if (!in_array($moduleName, $moduleBlocklist, FALSE)) {
              continue;
            }

            // Skips modules that are already enabled, even if it is blocklisted.
            if ($form['modules'][$modulePackage][$moduleName]['enable']['#default_value'] === TRUE) {
              continue;
            }

            // Alters the module form row, disabling the module installation.
            $form['modules'][$modulePackage][$moduleName]['enable']['#disabled'] = TRUE;
            $form['modules'][$modulePackage][$moduleName]['name']['#markup'] .= " (" . t('blocked') . ")";
            $form['modules'][$modulePackage][$moduleName]['description']['#markup'] .= ' ' . t('WARNING: The installation of this module is being blocked.');
          }
        }
      }
      $form['actions']['submit']['#value'] = t('Enable');


      foreach ($form['modules'] as $modulePackage => $modules) {
        if (!is_array($modules)) {
          continue;
        }
        foreach ($modules as $moduleName => $module_info) {
          if (is_array($module_info) && array_key_exists('description', $module_info) && is_array($module_info['description'])) {
            $outputstring = $module_info['description']['#markup'];
            if ($outputstring instanceof TranslatableMarkup && $outputstring->render() === "") {
              $form['modules'][$modulePackage][$moduleName]['description']['#markup'] .= $module_info['name']['#markup'];
            }
          }
        }
      }

      $existingModulesMsg = $form['modules']['#prefix'] ?? '';
      $form['modules']['#prefix'] = $existingModulesMsg . '<p>' . t('Below is a list of installed modules. Modules that are installed and enabled are shown with a selected check box. To enable a module, select the check box against the module name, and click Enable.') . '</p>';


      break;
    case 'system_modules_uninstall':
      // prevent uninstall of our modules
      $moduleList = [
        'ibm_apim',
        'apic_api',
        'apic_app',
        'auth_apic',
        'product',
        'consumerorg',
        'featuredcontent',
        'ghmarkdown',
        'socialblock',
        'auth_apic',
        'ibm_log_stdout',
        'eventstream',
      ];
      foreach ($moduleList as $module) {
        if (isset($form['modules'][$module])) {
          unset($form['modules'][$module]);
        }
      }
      break;
    case 'system_site_maintenance_mode':
			if (isset($form['maintenance_mode']['#description'])) {
        $form['maintenance_mode']['#description'] = t('<em>Important:</em> Maintenance mode is designed for short-term site maintenance; it is not meant for long-term usage. While a site is in maintenance mode, the database is not updated with new content from API Manager. As soon as the maintenance tasks are finished, you must take the site out of maintenance mode. Do not log out of the Developer Portal while the site is in maintenance mode, as you will not be able to log back in to the UI. In this case, maintenance mode can be turned off only by using the CLI; see: ') . ' <a href="https://www.ibm.com/docs/en/api-connect/10.0.1.x?topic=tasks-toggling-site-in-out-maintenance-mode" target="_new">' . t('Documentation') . '</a>' . t(' for details');
			}
      break;
    case 'system_theme_settings':
      // automatically redirect from global settings to the theme specific variant
      // avoids usability issues with filling in a form that wont actually take effect
      if (isset($form['config_key']['#value']) && $form['config_key']['#value'] === 'system.theme.global') {
        $defaultTheme = \Drupal::config('system.theme')->get('default');
        $redirectUrl = Url::fromRoute('system.theme_settings_theme', ['theme' => $defaultTheme])->toString();
        $response = new RedirectResponse($redirectUrl);
        $response->send();
      }
      break;
    case 'update_manager_update_form':
      // do not allow updates to modules and themes via the UI, only via fixpack
      $utils = \Drupal::service('ibm_apim.utils');
      $shippedContentList = array_merge($utils->get_bundled_modules(), $utils->get_bundled_themes());
      $ibmUpdateNeeded = [];
      if (isset($form['projects']['#options'])) {
        foreach ($form['projects']['#options'] as $projectName => $project) {
          if (in_array($projectName, $shippedContentList, FALSE)) {
            unset($form['projects']['#options'][$projectName]);
            $ibmUpdateNeeded[] = $projectName;
          }
        }
      }
      if (isset($form['disabled_projects']['#options'])) {
        foreach ($form['disabled_projects']['#options'] as $projectName => $project) {
          if (in_array($projectName, $shippedContentList, FALSE)) {
            unset($form['disabled_projects'][$projectName]);
            $ibmUpdateNeeded[] = $projectName;
          }
        }
      }
      if (isset($form['manual_updates'])) {
        $form['manual_updates']['#prefix'] .= '<p>' . t('To update the version of Drupal Core download the latest IBM API Developer Portal release or contact IBM Support.') . '</p>';
      }
      if (count($ibmUpdateNeeded) > 0) {
        $form['ibm_update'] = [
          '#markup' => '<h2>' . t('IBM APIC Developer Portal Modules') . '</h2><p>' . t('Updates found for the following modules provided by the IBM API Developer Portal: %modules.', ['%modules' => implode(",", $ibmUpdateNeeded)]) . '</p><p>' . t('To update modules provided by the IBM API Developer Portal download the latest release from IBM or contact IBM Support.') . '</p>',
          '#weight' => 150,
        ];
        // if no updatable modules left remove the table
        if (isset($form['projects']['#options']) && empty($form['projects']['#options'])) {
          unset($form['projects']);
          if (isset($form['actions'])) {
            unset($form['actions']);
          }
        }
        else {
          $form['projects']['#weight'] = 20;
          $form['table_prefix'] = [
            '#markup' => '<h2>' . t('Custom Modules') . '</h2>',
            '#weight' => 10,
          ];
        }
      }
      break;
    // remove link to delete our content type
    case 'node_type_edit_form' :
      if (isset($form['type']['#default_value']) && $form['type']['#default_value'] === 'faq') {
        if (isset($form['actions']['delete'])) {
          unset($form['actions']['delete']);
        }
        // remove option to preview faqs since it breaks the book module
        if (isset($form['actions']['preview'])) {
          $form['actions']['preview']['#access'] = FALSE;
        }
      }
      break;
    case 'block_content_basic_edit_form':
      $form['intro'] = [
        '#markup' => '<p>' . t('Use this form to edit the content of the block. If the block content is HTML then clicking on the \'Source\' button in the editor provides a direct way to edit the HTML markup. Use the \'Translate\' tab above to edit the content for other languages.') . '</p>',
        '#weight' => -50,
      ];
      break;
    case 'user_admin_settings':
      if (isset($form['password_timeout_settings']['password_reset_timeout'])) {
        $form['password_timeout_settings']['password_reset_timeout']['#title'] = t('Admin password reset timeout');
        $form['password_timeout_settings']['password_reset_timeout']['#description'] = t('Set the timeout in seconds for \'admin\' user one-time login links. The default is 86400 seconds (24 hours). The timeout for normal users is set in the IBM API Connect Cloud Manager.');
      }
      if (isset($form['admin_role']['user_admin_role'])) {
        $form['admin_role']['user_admin_role']['#description'] = t('This role will be automatically assigned new permissions whenever a module is enabled. Changing this setting will not affect existing permissions. (Default value is \'Superuser\' and is recommended to be left set to that.)');
      }
      // remove mention of admin approving accounts since not valid with apim owned URs
      if (isset($form['mail_notification_address'])) {
        $site_config = \Drupal::config('system.site');
        $form['mail_notification_address']['#description'] = t("The email address to be used as the 'from' address for all account notifications listed below. Leave empty to use the default system email address <em>(%site-email).</em>", ['%site-email' => $site_config->get('mail')]);
      }
      break;
    case 'update_settings':
      // since we disable the update emails also remove the settings for it
      if (isset($form['update_notify_emails'])) {
        unset($form['update_notify_emails']);
      }
      if (isset($form['update_notification_threshold'])) {
        unset($form['update_notification_threshold']);
      }
      break;
    case 'search_api_index_edit_form':
      // remove the ability to turn on instant indexing due to the perf impact of it
      if (isset($form['options']['index_directly'])) {
        unset($form['options']['index_directly']);
        if (!isset($form['options'])) {
          $form['options'] = [];
        }
        $form['options']['index_directly'] = [
          '#type' => 'hidden',
          '#value' => FALSE,
        ];
      }
      break;
    case 'config_export_form' :
      if ($form['submit'] !== NULL) {
        unset($form['submit']);
      }
      $form['intro'] = [
        '#markup' => '<p>' . t('This functionality is available as part of the IBM API Connect developer toolkit CLI.') . '</p>',
        '#weight' => 50,
      ];
      break;
    case 'config_import_form' :
      if ($form['submit'] !== NULL) {
        unset($form['submit']);
      }
      if ($form['import_tarball'] !== NULL) {
        unset($form['import_tarball']);
      }
      $form['intro'] = [
        '#markup' => '<p>' . t('This functionality is available as part of the IBM API Connect developer toolkit CLI.') . '</p>',
        '#weight' => 50,
      ];
      break;
    case 'ban_ip_form':
      $ipBanEnabled = (bool) \Drupal::state()->get('ibm_apim.ip_ban_enabled', TRUE);
      if (!$ipBanEnabled) {
        \Drupal::messenger()
          ->addWarning(t('IP based security is currently disabled for this portal service so IP address bans will not work.'));
      }
      break;
    case 'restrict_by_ip_general_settings':
    case 'restrict_by_ip_login_settings':
    case 'restrict_by_ip_role_settings':
      $ipBanEnabled = (bool) \Drupal::state()->get('ibm_apim.ip_ban_enabled', TRUE);
      if (!$ipBanEnabled) {
        \Drupal::messenger()
          ->addWarning(t('IP based security is currently disabled for this portal service so IP based restrictions will not work.'));
      }
      break;
    case 'contact_message_feedback_form': 
      if (\Drupal::currentUser()->isAuthenticated()) {
        $current_user = User::load(\Drupal::currentUser()->id());
        if (($firstname = $current_user->get('first_name')->value) && ($lastname = $current_user->get('last_name')->value)) {
          $name = "{$firstname}  {$lastname}";
        } else {
          $name = $current_user->getEmail();
        }
        $name = $name ? "{$current_user->getAccountName()} ({$name})" : $current_user->getAccountName();
        $form['name']['#value'] = $name;
        $form['name']['#plain_text'] = $name;
      }
      break;
  }

  // Look for any form provided by the contact module and remove preview button
  if (strpos($form_id, 'contact_message_') !== FALSE) {
    $form['actions']['preview']['#access'] = FALSE;
  }
}

/**
 * Remove the Global Theme Settings tab since it isn't any real use
 * and leads users to click on options that dont work
 * instead redirect to the actual theme settings using a hook_form_alter above
 *
 * @param array $local_tasks
 */
function ibm_apim_local_tasks_alter(&$local_tasks) {
  unset($local_tasks['system.theme_settings_global']);

  $local_tasks['system.modules_uninstall']['title'] = 'Disable';
}

/**
 * Implements hook_module_preinstall().
 *
 * @param string $module
 *
 * @throws \Drupal\ibm_apim\Exception\ModuleInstallationBlocked
 */
function ibm_apim_module_preinstall($module) {
  $moduleBlocklist = \Drupal::service('ibm_apim.site_config')->getBlockList();
  if (!$moduleBlocklist || !in_array($module, $moduleBlocklist, FALSE)) {
    return;
  }

  // Before Drupal invokes the hook hook_module_preinstall() the method
  // install() at Drupal\Core\Extension\ModuleInstaller performs some tasks
  // changing the configs and system files data from the module that is being
  // installed, so, before throw the exception it is necessary performs a
  // rollback to those changes.
  \Drupal::service('ibm_apim.module_installer')->rollbackPreinstall($module);

  throw new ModuleInstallationBlocked("Unable to install '$module' module. The installation of this module is blocked by Module Blocklist.");
}

/**
 * Modify node edit form
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @param string $form_id
 */
function ibm_apim_form_node_form_alter(array &$form, FormStateInterface &$form_state, $form_id) {
  $moduleHandler = \Drupal::service('module_handler');
  $node = $form_state->getFormObject()->getEntity();
  if (isset($node)) {
    $nodeBundle = $node->bundle();
    if ($moduleHandler->moduleExists('book')) {
      $allowed_types = \Drupal::config('book.settings')->get('allowed_types');
      // Only show the book part of edit node for nodes of content types defined to be allowed in books
      if (isset($allowed_types, $nodeBundle, $form['book']) && !in_array($nodeBundle, array_values($allowed_types), FALSE)) {
        unset($form['book']);
      }
    }
    // remove URL Alias option from APIs and Products
    if (isset($nodeBundle, $form['path_settings']) && in_array($nodeBundle, ['api', 'product'], FALSE)) {
      unset($form['path_settings']);
    }
  }
}

/**
 * Implements hook_entity_bundle_field_info_alter().
 *
 * @param array $fields
 * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
 * @param $bundle
 */
function ibm_apim_entity_bundle_field_info_alter(&$fields, EntityTypeInterface $entity_type, $bundle) {
  // add validator for our apic_pathalias field
  if (isset($fields['apic_pathalias']) && !empty($fields['apic_pathalias']) && $entity_type->id() === 'node') {
    $fields['apic_pathalias']->addConstraint('ApicPathAlias', []);
  }
}

/**
 * Implements hook_element_info_alter().
 *
 * @param array $types
 */
function ibm_apim_element_info_alter(array &$types) {
  // This is part of the code needed to suppress the password policy status table.
  if (isset($types['password_confirm'])) {
    $types['password_confirm']['#process'][] = 'ibm_apim_password_policy_check_constraints_password_confirm_process';
  }
}

/**
 * Custom callback to update the password confirm element.
 *
 * @param mixed $element
 *   Form element of the password confirm form field.
 *
 * @return mixed
 *   Updated form field element.
 */
function ibm_apim_password_policy_check_constraints_password_confirm_process($element) {

  // This is part of the code needed to suppress the password policy status table.
  $element['pass1']['#ajax'] = [
    'event' => 'neverfiredevent',
    'callback' => 'ibm_apim_password_policy_check_constraints',
    'method' => 'replace',
    'wrapper' => 'ibm-apim-password-policy-status',
    'disable-refocus' => TRUE,
  ];

  return $element;
}

function ibm_apim_password_policy_client_settings(array $form, FormStateInterface $form_state): array {
  $roles = $form_state->getValue('roles');
  if (empty($roles)) {
    // Get if from $form; form state is always empty the first time.
    if (isset($form['roles'])) {
      $roles = $form['roles']['#default_value'];
    }
    elseif (isset($form['account']['roles'])) {
      $roles = $form['account']['roles']['#default_value'];
    }
  }
  $roles = array_combine($roles, $roles);

  // Add user doesn't automatically register authenticated, so lets add it.
  if (empty($roles)) {
    $roles = ['authenticated' => 'authenticated'];
  }

  // Run validation.
  $applicable_policies = [];
  $ids = [];
  foreach ($roles as $role_key => $role_enabled) {
    if ($role_enabled) {
      $role_map = ['roles.' . $role_enabled => $role_enabled];
      $role_policies = \Drupal::entityTypeManager()->getStorage('password_policy')->loadByProperties($role_map);
      /** @var \Drupal\password_policy\Entity\PasswordPolicy $policy */
      foreach ($role_policies as $policy) {
        if (!in_array($policy->id(), $ids, FALSE)) {
          $applicable_policies[] = $policy;
          $ids[] = $policy->id();
        }
      }
    }
  }

  $policy_constraints = [];
  foreach ($applicable_policies as $policy_id => $policy) {
    $policy_constraints = array_merge($policy_constraints, $policy->getConstraints());
  }
  if (isset($form['user_id']['#value'])) {
    $uid = $form['user_id']['#value'];
  }
  foreach ($policy_constraints as $key => $constraint) {
    switch ($constraint['id']) {
      case 'character_types':
        $policy_constraints[$key]['message'] = t('Minimum password character types: @number', ['@number' => $constraint['character_types']]);
        break;
      case 'password_length':
        if (isset($constraint['character_operation']) && $constraint['character_operation'] === 'maximum') {
          $policy_constraints[$key]['message'] = t('Password character length of at most @number', ['@number' => $constraint['character_length']]);
        }
        else {
          $policy_constraints[$key]['message'] = t('Password character length of at least @number', ['@number' => $constraint['character_length']]);
        }
        break;
      case 'password_username':
        $policy_constraints[$key]['message'] = t('Password must not contain the user\'s username.');
        // need the actual username value to check
        if (\Drupal::currentUser()->isAuthenticated()) {
          $policy_constraints[$key]['username'] = \Drupal::currentUser()->getAccountName();
        }
        elseif (isset($form['account']['name'])) {
          $policy_constraints[$key]['username'] = $form['account']['name'];
        }
        elseif (isset($uid)) {
          $policy_constraints[$key]['username'] = User::load($uid)->getAccountName();
        }
        break;
      case 'password_strength_constraint':
        $policy_constraints[$key]['message'] = t('Password Strength minimum score of @number', ['@number' => $constraint['strength_score']]);
        break;
      case 'consecutive':
        $policy_constraints[$key]['message'] = t('Maximum consecutive identical characters: @number', ['@number' => $constraint['max_consecutive_characters']]);
        break;
    }
  }
  return $policy_constraints;
}

/**
 * AJAX callback for user form.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 *
 * @return array
 */
function ibm_apim_password_policy_check_constraints(array $form, FormStateInterface $form_state) {
  $dataRows = NULL;
  $response = [];

  // We want to work on the data from the password policy table.
  if (array_key_exists('password_policy_status', $form['account'])) {
    $dataRows = $form['account']['password_policy_status']['#rows'];
  }
  if ($dataRows === NULL || empty($dataRows)) {
    $dataRows = \Drupal::service('password_policy.validator')
      ->buildPasswordPolicyConstraintsTableRows(
        $form_state->getValue('pass', ''),
        $form_state->getFormObject()->getEntity(),
        _password_policy_get_edited_user_roles($form, $form_state));
  }
  $status = [];
  $failed = FALSE;
  $force_failed = FALSE;
  $pass = $form_state->getValue('pass');
  if (is_array($pass) && array_key_exists('pass1', $pass)) {
    $pass = $pass['pass1'];
  }
  if ($pass === '' || $pass === NULL) {
    $force_failed = TRUE;
  }
  // Go through each row, extract the status, check pass/fail and keep the message.
  foreach ($dataRows as $row) {
    // this check is to handle 2 different versions of the password policy module, we can remove the else case later.
    if (isset($row['data']['constraint'], $row['data']['status'])) {
      $data = $row['data'];
    }
    else {
      $data = $row;
    }
    if ($force_failed === TRUE || strpos($data['status'], 'Fail') !== FALSE) {
      $failed = TRUE;
      $status[] = '<span class="failed"><span class="icon glyphicon" aria-hidden="true"></span> ' . $data['constraint'] . '</span>';
      $status[] = '';
    }
    else {
      $status[] = '<span class="passed"><span class="icon glyphicon" aria-hidden="true"></span> ' . $data['constraint'] . '</span>';
      $status[] = '';
    }
  }

  // if no content at all then use info mode
  if ($force_failed === TRUE) {
    $response[] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => implode('</br>', $status),
      '#title_display' => 'above',
      '#prefix' => "<div id='ibm-apim-password-policy-status' class='alert alert-info'>",
      '#suffix' => '</div>',
    ];
  }
  elseif ($failed === FALSE) {
    // If there are no fails, just return the 'div' hook point with no content.
    $response = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => t('Your password meets the password policies required for this site'),
      '#prefix' => "<div id='ibm-apim-password-policy-status' class='alert alert-success'>",
      '#suffix' => '</div>',
    ];
  }
  // Otherwise, build up an array of elements.
  else {
    $response[] = [
      '#type' => 'html_tag',
      '#tag' => 'div',
      '#value' => implode('</br>', $status),
      '#title_display' => 'above',
      '#prefix' => "<div id='ibm-apim-password-policy-status' class='alert alert-danger'>",
      '#suffix' => '</div>',
    ];
  }

  return $response;
}

/**
 * Entry Trace logging function
 *
 * @param string $function
 * @param null|mixed $args
 */
function ibm_apim_entry_trace($function = 'undefined', $args = NULL) {
  $entryExitTrace = (boolean) \Drupal::config('ibm_apim.devel_settings')->get('entry_exit_trace');
  if ($entryExitTrace === TRUE) {
    \Drupal::logger('ibm_apim')->debug('%function ENTRY Trace input: %data.', [
      '%function' => $function,
      '%data' => serialize($args),
    ]);
  }
}

/**
 * Exit Trace logging function
 *
 * @param string $function
 * @param null|mixed $response
 */
function ibm_apim_exit_trace($function = 'undefined', $response = NULL) {
  $entryExitTrace = (boolean) \Drupal::config('ibm_apim.devel_settings')->get('entry_exit_trace');
  if ($entryExitTrace === TRUE) {
    \Drupal::logger('ibm_apim')->debug('%function EXIT Trace return: %data.', [
      '%function' => $function,
      '%data' => serialize($response),
    ]);
  }
}

/**
 * Implement hook_theme_suggestions_HOOK_alter to insert additional suggestions
 * for some UI elements that we want to theme that drupal doesn't have default
 * twig insertion points for
 *
 * @param array $suggestions
 * @param array $variables
 */
function ibm_apim_theme_suggestions_form_alter(array &$suggestions, array $variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  if (isset($variables['element']['#form_id']) && !empty($variables['element']['#form_id'])) {
    $suggestions[] = 'form_' . $variables['element']['#form_id'];
  }
  // change password form - different ids for auth_apic vs base drupal
  if ($variables['element']['#form_id'] === 'apic_change_pwd_form') {
    $suggestions[] = 'form_change_pwd_form';
  }

  // reset password form
  if ($variables['element']['#form_id'] === 'apic_resetpw' || $variables['element']['#form_id'] === 'user_pass') {
    $suggestions[] = 'form_user_pass_form';
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * @param array $variables
 */
function ibm_apim_preprocess_form_subscription_wizard_choose_application(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * @param array $variables
 */
function ibm_apim_preprocess_form_subscription_wizard_confirm_subscribe(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * @param array $variables
 */
function ibm_apim_preprocess_form_subscription_wizard_subscribe_result(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Implements hook_form_FORMID_alter for the file system settings admin form
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function ibm_apim_form_system_file_system_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  unset($form['translation_path']);
}

/**
 * Implements hook_form_FORMID_alter for the choose application
 * part of the subscription wizard.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function ibm_apim_form_subscription_wizard_choose_application_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $form['actions']['#prefix'] = '<div class="apic-wizard-navigation">';
  $form['actions']['#suffix'] = '</div>';

}

/**
 * Implements hook_form_FORMID_alter for the subscription confirmation
 * part of the subscription wizard.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string $form_id
 */
function ibm_apim_form_subscription_wizard_confirm_subscribe_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  //TODO : in theory changing the text here would be nice but doing so breaks the form submission
  //  $form['actions']['submit']['#value'] = t('Subscribe');
  $form['actions']['#prefix'] = '<div class="apic-wizard-navigation">';
  $form['actions']['#suffix'] = '</div>';

}


/**
 * Ensure forms have an aria-label for accessibility
 *
 * @param array $variables
 */
function ibm_apim_preprocess_form(&$variables) {
  // Accessibility - ensure the form has a label
  if (isset($variables['elements']['#form_id'])) {
    if ($variables['elements']['#form_id'] === 'views_exposed_form') {
      $variables['attributes']['aria-label'] = t('Filter results')->render();
    }
    elseif ($variables['elements']['#form_id'] === 'contact-message-feedback-form') {
      $variables['attributes']['aria-label'] = t('Provide feedback')->render();
    }
  }

  // add variable with the user registry count - useful for the user management forms
  $urs = \Drupal::service('ibm_apim.user_registry')->getAll();
  $urCount = count($urs);
  $variables['user_registry_count'] = $urCount;

  // set variable as to whether a user managed registry is present or not
  $userManagedRegistryPresent = FALSE;
  $userUnmanagedRegistryPresent = FALSE;
  if (isset($urs) && !empty($urs)) {
    foreach ($urs as $registryUrl => $registry) {
      if ($registry->isUserManaged()) {
        $userManagedRegistryPresent = TRUE;
      }
      else {
        $userUnmanagedRegistryPresent = TRUE;
      }
    }
  }
  $variables['user_managed_registry_present'] = $userManagedRegistryPresent;
  $variables['user_unmanaged_registry_present'] = $userUnmanagedRegistryPresent;
  $ibm_settings_config = \Drupal::service('config.factory')->get('ibm_apim.settings');
  $variables['hide_admin_registry'] = $ibm_settings_config->get('hide_admin_registry');

  // set a variable for self service onboarding too
  $variables['enable_signup_link'] = \Drupal::state()->get('ibm_apim.selfSignUpEnabled', 0);

  // if there is an invitation token in the session, allow the login link to be displayed regardless of onboarding enabled/disabled
  $sessionStore = \Drupal::service('tempstore.private')->get('auth_apic_storage');
  $jwt = $sessionStore->get('invitation_object');
  if ($jwt !== NULL) {
    $variables['enable_signup_link'] = TRUE;
  }

  $passResetToken = \Drupal::request()->get('pass-reset-token');
  if (isset($passResetToken) && !empty($passResetToken)) {
    $variables['pass_reset_token'] = TRUE;
  }

  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Dynamically add to the ibm_apim/analytics library since the name of the files change every build
 *
 * @param array $libraries
 * @param $extension
 */
function ibm_apim_library_info_alter(&$libraries, $extension) {
  if (array_key_exists('analytics', $libraries) && file_exists(\Drupal::service('extension.list.module')->getPath('ibm_apim') . '/analytics/asset-manifest.json')) {
    $string = file_get_contents(\Drupal::service('extension.list.module')->getPath('ibm_apim') . '/analytics/asset-manifest.json');
    $json = json_decode($string, TRUE);
    if (isset($json['main.js']) && file_get_contents(\Drupal::service('extension.list.module')->getPath('ibm_apim') . '/analytics/' . $json['main.js'])) {
      $libraries['analytics']['js']['analytics/' . $json['main.js']] = [
        'weight' => -1,
        'minified' => TRUE,
        'preprocess' => FALSE,
      ];
    }
    if (isset($json['main.css']) && file_get_contents(\Drupal::service('extension.list.module')->getPath('ibm_apim') . '/analytics/' . $json['main.css'])) {
      $libraries['analytics']['css']['component']['analytics/' . $json['main.css']] = [
        'weight' => -20,
      ];
    }
  }
}

/**
 * Implements hook_user_login
 *
 * @param AccountInterface $account
 */
function ibm_apim_user_login($account) {
  if (isset($account)) {
    ibm_apim_entry_trace(__FUNCTION__, $account->id());
  }
  else {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  // trigger avatar generation
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('avatars')) {
    $avatarManager = \Drupal::service('avatars.avatar_manager');
    $avatarManager->syncAvatar($account);
  }
  ibm_apim_exit_trace(__FUNCTION__, NULL);
}

/**
 * Implementation of hook_language_switch_links_alter().
 *
 * This is to stop weird query parameters in the lang selection block
 */
function ibm_apim_language_switch_links_alter(&$links, $type, $path) {
  $pathUrl = '';
  if ($path->getRouteName() === '<current>' || $path->getRouteName() === '<front>') {
    $routeObject = \Drupal::routeMatch()->getRouteObject();
    if ($routeObject !== NULL) {
      $pathUrl = $routeObject->getPath();
    }
  }

  $language_manager = \Drupal::service('language_manager');
  $languages = $language_manager->getLanguages();

  foreach ($links as &$link) {
    // check whether the q query parameter is superfluous, if it is just drop it.
    // NOTE, when it is just a lang code this is side effect of running url negotiation via the language switcher running with nginx.

    if (isset($link['query']['q'])) {
      $is_currentpath = $link['query']['q'] === ltrim($pathUrl, '/');
      $is_empty = $link['query']['q'] === '';
      $is_lang_prefix = preg_match('@^[a-zA-Z-]+' . $pathUrl . '@', $link['query']['q']);
      $is_langcode = array_key_exists($link['query']['q'], $languages);

      if ($is_currentpath || $is_empty || $is_lang_prefix || $is_langcode) {
        unset($link['query']['q']);
      }
    }
  }
  // needed to prevent weird side effects since by reference above
  unset($link);
}

function ibm_apim_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'user') {
    $fields['registry_url'] = BaseFieldDefinition::create('registry_url_field')
      ->setLabel(t('APIC User Registry URL'));

    return $fields;
  }
}

function ibm_apim_user_logout($account) {
  if ((int) $account->id() !== 1) {
    $user = User::load($account->id());
    if ($user !== NULL) {
      $registry_url = $user->get('registry_url')->value;
      if ($registry_url !== NULL) {
        \Drupal::service('ibm_apim.user_registry')->get($registry_url);
        $response = \Drupal::service('ibm_apim.mgmtserver')->postSignOut();

        if ($response->getCode() === 302) {
          $headers = $response->getHeaders();
          $headers = array_change_key_case($headers, CASE_LOWER);
          $redirect = new TrustedRedirectResponse($headers['location']);
          $redirect->send();
        }
      }
    }
  }
}

function ibm_apim_cron() {
  $now = \Drupal::time()->getRequestTime();
  if (_ibm_apim_shouldRun($now)) {
    \Drupal::service('ibm_apim.db_usersfielddata')->deleteExpiredPendingApprovalUsers();
    \Drupal::state()->set('ibm_apim.last_cron', $now);
  }
}

/**
 * Preprocess variables for table templates.
 */
function ibm_apim_preprocess_table(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  // accessibility fix for the pending module updates page
  if (array_key_exists('class',$variables['attributes']) && is_array($variables['attributes']['class']) && in_array('update', array_values($variables['attributes']['class']), TRUE)) {
    $variables['attributes']['role'] = 'presentation';
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * @param $now
 *
 * @return bool
 */
function _ibm_apim_shouldRun($now): bool {
  $scheduled = \Drupal::config('ibm_apim.settings')->get('daily_cron_time');
  if ($scheduled === NULL) {
    $scheduled = '05:00';
  }
  $timezone = new \DateTimeZone(\Drupal::config('system.date')->get('timezone')['default']);;

  $timestamp_last = \Drupal::state()->get('ibm_apim.last_cron') ?? 0;
  $last = \DateTime::createFromFormat('U', $timestamp_last)
    ->setTimezone($timezone);
  $next = clone $last;

  $next->setTime(...explode(':', $scheduled));
  // If the cron ran on the same calendar day it should have, add one day.
  if ($next->getTimestamp() <= $last->getTimestamp()) {
    $next->modify('+1 day');
  }
  return $next->getTimestamp() <= $now;
}

function ibm_apim_preprocess_input__radio(&$variables) {
  if (isset($variables['attributes']['aria-describedby'])) {
    unset($variables['attributes']['aria-describedby']);
  }
}

function ibm_apim_preprocess_input__checkbox(&$variables) {
  if (isset($variables['attributes']['aria-describedby'], $variables["element"]["#attributes"]["name"])) {
    unset($variables['attributes']['aria-describedby']);
  }
}

function ibm_apim_preprocess_form_element(&$variables) {
  if (isset($variables['label'], $variables['element']['#type'])) {
    $type = $variables['element']['#type'];
    $variables['label']['#element_type'] = $type;
  }
  if (isset($type, $variables['element']['#array_parents']) && $type == 'textarea' && in_array('widget',$variables['element']['#array_parents']) ) {
    $variables['label']['#is_widget'] = TRUE;
  }
}

function ibm_apim_preprocess_form_element_label(&$variables) {
  if (!empty($variables['element']['#is_widget']) || $variables['element']['#element_type'] === 'item') {
    unset($variables['element']['#attributes']['for']);
    unset($variables['attributes']['for']);
  }
}

function ibm_apim_preprocess_block(&$variables) {
  if (isset($variables['plugin_id'], $variables["attributes"]["role"]) && $variables['plugin_id'] == 'help_block') {
    unset($variables["attributes"]["role"]);
  }
}
