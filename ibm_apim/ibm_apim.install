<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2021
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/


use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\views\Views;
use Drupal\node\Entity\Node;

/**
 * @file
 * Install, update and uninstall functions for the ibm_apim module.
 */

/**
 * Implements hook_install().
 *
 * @see system_install()
 */
function ibm_apim_install() {

  // High module weight allows our form_alter calls to be run after every other module ensuring that we win
  module_set_weight('ibm_apim', 998);

  $module_dependencies = [
    'externalauth',
    'telephone',
  ];

  // Enable modules.
  $module_installer = \Drupal::service('module_installer');
  foreach ($module_dependencies as $module) {
    $module_installer->install([$module]);
  }

  // Customize the default user entity display form.
  $entityFormStorage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
  $userFormDisplay = $entityFormStorage->load('user.user.default');

  if (!$userFormDisplay) {
    $userFormDisplay = $entityFormStorage->create([
      'targetEntityType' => 'user',
      'bundle' => 'user',
      'mode' => 'default',
      'status' => TRUE,
    ]);
  }

  $userFormDisplay->setComponent('first_name', [
    'type' => 'string_textfield',
    'weight' => -50,
    'settings' => [],
  ])
    ->setComponent('last_name', [
      'type' => 'string_textfield',
      'weight' => -45,
      'settings' => [],
    ])
    ->setComponent('user_picture', [
      'type' => 'string_textfield',
      'weight' => -40,
      'settings' => [],
    ])
    ->setComponent('codesnippet', [
      'type' => 'options_select',
      'weight' => -30,
      'settings' => [],
    ])
    ->setComponent('timezone', [
      'weight' => -20,
      'settings' => [],
    ])
    ->setComponent('language', [
      'weight' => -10,
      'settings' => [],
    ])
    ->removeComponent('consumer_organization')
    ->removeComponent('contact')
    ->removeComponent('langcode')
    ->removeComponent('consumerorg_url')
    ->removeComponent('field_last_password_reset')
    ->save();

  // add a unique key across username and registry url
  $db_service = \Drupal::service('ibm_apim.db_usersfielddata');
  $db_service->addNameAndRegistryUniqueKey();
  $db_service->setAdminRegistryUrl();

  // no content blocks
  $path = __DIR__;
  require_once $path . '/ibm_apim.emptycontent.inc';
  ibm_apim_create_no_content_blocks();
  ibm_apim_create_blogs_no_content_blocks();

  // This config automatically gets added need to remove so we don't remove the view when forums are disabled.
  ibm_apim_removeConfigDependency("views.view.notifications", "user.role.authenticated");
}

/**
 * Changes from 8.x-1.2.3 to 8.x-1.2.4 :
 *  - make first_name and last_name not required fields
 */
function ibm_apim_update_8101() {

  \Drupal::service('config.factory')
    ->getEditable('field.field.user.user.first_name')
    ->set('required', FALSE)
    ->save();

  \Drupal::service('config.factory')
    ->getEditable('field.field.user.user.last_name')
    ->set('required', FALSE)
    ->save();

}

function ibm_apim_update_8102() {

  \Drupal::logger('ibm_apim_update')->notice('creating registry_url_field on user entity.');

  $storage_definition = BaseFieldDefinition::create('registry_url_field')
    ->setLabel(t('APIC User Registry URL'));

  \Drupal::entityDefinitionUpdateManager()->installFieldStorageDefinition('registry_url', 'user', 'user', $storage_definition);

  $db_service = \Drupal::service('ibm_apim.db_usersfielddata');
  $db_service->addNameAndRegistryUniqueKey();
  $db_service->setAdminRegistryUrl();

}

function ibm_apim_update_8103() {

  \Drupal::logger('ibm_apim_update')->notice('copying apic_user_registry_url to registry_url for users.');

  $db_service = \Drupal::service('ibm_apim.db_usersfielddata');
  $db_service->updateRegistryUrlFieldIfEmpty();

}

/**
 * Create new entity view mode if it doesn't already exist
 */
function ibm_apim_update_8104() {
  $entity_type = 'node';
  $view_mode = 'embedded';
  $view_id = $entity_type . '.' . $view_mode;
  $view_label = 'Embedded';
  if (\Drupal::entityTypeManager()->getStorage('entity_view_mode')->load($view_id) == NULL) {

    \Drupal::logger('ibm_apim_update')->notice('creating entity_view_mode embedded');
    $settings = [];
    $settings['id'] = $view_id;
    $settings['label'] = $view_label;
    $settings['targetEntityType'] = $entity_type;

    $viewmode = Drupal\Core\Entity\Entity\EntityViewMode::create($settings);
    $viewmode->save();
  }

}

/**
 * Set the encryption profile for payment method data
 */
function ibm_apim_update_8105() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('payment_method_encryption_profile', 'socialblock')
    ->save();
}

/**
 * Create no content blocks
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function ibm_apim_update_8201() {
  // no content blocks
  $path = __DIR__;
  require_once $path . '/ibm_apim.emptycontent.inc';
  ibm_apim_create_no_content_blocks();
}

/**
 * Enable API Validation by default
 */
function ibm_apim_update_8202() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('validate_apis', true)
    ->save();
}

/**
 * Create blogs no content block
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function ibm_apim_update_8203() {
  // no content blocks
  $path = __DIR__;
  require_once $path . '/ibm_apim.emptycontent.inc';
  ibm_apim_create_blogs_no_content_blocks();

  $view = Views::getView('blog');
  if ($view !== NULL) {
    $empty = $view->getDisplay()->getOption('empty');
    if (!isset($empty['entity_block'])) {
      $empty['entity_block'] = [
        'id' => 'entity_block',
        'table' => 'views',
        'field' => 'entity_block',
        'relationship' => 'none',
        'group_type' => 'group',
        'admin_label' => '',
        'empty' => TRUE,
        'tokenize' => TRUE,
        'target' => 'noblogsblock',
        'view_mode' => 'default',
        'bypass_access' => FALSE,
        'plugin_id' => 'entity',
      ];
      if (isset($empty['area_text_custom'])) {
        unset($empty['area_text_custom']);
      }
      $view->getDisplay()->setOption('empty', $empty);
      $view->save();
    }
  }
}

/**
 * Sets the router type option to hash by default
 */
function ibm_apim_update_8204() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('router_type', 'hash')
    ->save();
}

/**
 * Sets what time the daily cron should run
 */
function ibm_apim_update_8205() {
  \Drupal::service('config.factory')
    ->getEditable('ibm_apim.settings')
    ->set('daily_cron_time', '05:00')
    ->save();
}

/**
 * This config automatically gets added need to remove so we don't remove the view when forums are disabled.
*/
function ibm_apim_update_8206() {
  // This config automatically gets added need to remove so we don't remove the view when forums are disabled.
  ibm_apim_removeConfigDependency("views.view.notifications", "user.role.authenticated");
}

function ibm_apim_update_8501() {
  $query = \Drupal::entityQuery('node');
  $group = $query->orConditionGroup()
    ->condition('type', 'api')
    ->condition('type', 'application')
    ->condition('type', 'consumerorg')
    ->condition('type', 'product');
  $query->condition($group);
  $query->condition('uid', 1, '<>');
  $nids = $query->accessCheck(FALSE)->execute();
  foreach (array_chunk($nids, 50) as $chunk) {
    $nodes = Node::loadMultiple($chunk);
    if ($nodes !== NULL) {
      foreach ($nodes as $node) {
        $node->set('uid',1)->save();
      }
    }
  }
}

function ibm_apim_removeConfigDependency($config, $dep) {
  try {
    $key = 'dependencies.config';
    $view = \Drupal::configFactory()->getEditable($config);
    $fields = $view->get($key);

    $updatedFields = \array_filter($fields, static function ($element) use($dep) {
      return $element !== $dep;
    });

    $view->set($key, $updatedFields);
    $view->save();
  } catch (Throwable $e) {
    \Drupal::logger('ibm_apim')->notice('error: @error', ['@error' => $e->getMessage()]);
  }
}
