<?php
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2016, 2020
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * Addon module to handle removing theme and module files off the filesystem too
 * This makes it easier for remote admins to then upload replacement versions.
 */

/**
 * Implementation of hook_menu().
 */
function comprehensive_uninstaller_menu() {
  $form['admin/appearance/uninstall'] = array(
    'title' => 'Uninstall',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comprehensive_uninstaller_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer themes'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 100
  ); // Anything >50 will do
  $form['admin/appearance/uninstall/confirm'] = array(
    'title' => 'Uninstall',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comprehensive_uninstaller_confirm_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer themes')
  );
  return $form;
}

/**
 * Implementation of hook_help.
 *
 * @param $path
 * @param $arg
 * @return string
 */
function comprehensive_uninstaller_help($path, $arg) {
  if ($path == 'admin/appearance/uninstall') { // Only display help text on uninstall page.
    $output = '<p>' . t('The uninstall process removes all data related to a theme. To uninstall a theme, you must first disable it on the main <a href="@appearance">Appearance page</a>.', array('@appearance' => url('admin/appearance'))) . '</p>';
  }
  else {
    $output = '';
  }
  return $output;
}

/**
 * Implementation of hook_theme.
 */
function comprehensive_uninstaller_theme() {
  return array('comprehensive_uninstaller' => array('render element' => 'form'));
}

/**
 * Implements hook_form_alter().
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function comprehensive_uninstaller_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'system_modules_uninstall' && !isset($form['#confirmed'])) { //Hijack the system_modules_uninstall form
    include_once DRUPAL_ROOT . '/includes/install.inc';
    $all_modules = system_rebuild_module_data();
    module_load_include('inc', 'system', 'system.admin');
    $disabled_modules = array();
    $base_root = preg_replace('/^https?:\/\//i', '', $GLOBALS['base_root']);
    $base_path = preg_replace('/\/$/i', '', preg_replace('/^\//i', '', $GLOBALS['base_path']));
    $base_path = str_replace('/', '.', $base_path);
    if (isset($base_path) && !empty($base_path)) {
      $site_path = $base_path . '.' . $base_root;
    }
    else {
      $site_path = $base_root;
    }
    $site_path_pattern = str_replace('.', '\.', $site_path);
    $site_path_pattern = 'sites\/' . $site_path_pattern;
    foreach ($all_modules as $name => $module) {
      if (empty($module->status) && $module->schema_version >= SCHEMA_UNINSTALLED && preg_match("/$site_path_pattern/i", $module->uri)) {
        $disabled_modules[$name] = $module;
      }
    }
    $form['uninstall'] = array('#tree' => TRUE);
    $form['modules'] = array();
    if (!empty($disabled_modules)) {
      $profile = drupal_get_profile();
      uasort($disabled_modules, 'system_sort_modules_by_info_name');
      foreach ($disabled_modules as $disabled_module) {
        $module_name = $disabled_module->info['name'] ? $disabled_module->info['name'] : $disabled_module->name;
        $form['modules'][$disabled_module->name]['#module_name'] = $module_name;
        $form['modules'][$disabled_module->name]['name']['#markup'] = $module_name;
        $form['modules'][$disabled_module->name]['description']['#markup'] = $disabled_module->info['description'];
        $form['uninstall'][$disabled_module->name] = array(
          '#type' => 'checkbox',
          '#title' => t('Uninstall @module module', array('@module' => $module_name)),
          '#title_display' => 'invisible',
        );
        // All modules which depend on this one must be uninstalled first, before
        // we can allow this module to be uninstalled. (The installation profile
        // is excluded from this list.)
        foreach (array_keys($disabled_module->required_by) as $dependent) {
          if ($dependent != $profile && drupal_get_installed_schema_version($dependent) != SCHEMA_UNINSTALLED) {
            $dependent_name = isset($all_modules[$dependent]->info['name']) ? $all_modules[$dependent]->info['name'] : $dependent;
            $form['modules'][$disabled_module->name]['#required_by'][] = $dependent_name;
            $form['uninstall'][$disabled_module->name]['#disabled'] = TRUE;
          }
        }
      }
    } else {
      $form['actions'] = array();
    }
  }
  if ($form_id == 'system_modules_uninstall' && isset($form['#confirmed'])) { //If we're on the delete confirm page
    $form['#submit'] = array('_comprehensive_uninstaller_module_uninstall_helper');
  }
}

/**
 * @param $form
 * @param $form_state
 */
function _comprehensive_uninstaller_module_uninstall_helper($form, &$form_state) {
  // Make sure the install API is available.
  include_once DRUPAL_ROOT . '/includes/install.inc';
  // Call the uninstall routine for each selected module.
  $modules = array_keys($form_state['values']['uninstall']);
  drupal_uninstall_modules($modules);
  foreach ($modules as $module) {
    _comprehensive_uninstaller_delete_files('module', $module);
  }
  drupal_set_message(t('The selected modules have been uninstalled.'));
  $form_state['redirect'] = 'admin/modules/uninstall';
}

/**
 * Returns an array containing information of disabled themes.
 */
function _comprehensive_uninstaller_get_disabled_themes() {
  $all_themes = list_themes();
  $disabled_themes = array();
  $conf_path = preg_quote(conf_path(), '/');
  $pattern = '/^' . $conf_path . '/';
  foreach ($all_themes as $name => $theme) {
    if ($theme->status == 0 && preg_match($pattern, $theme->filename)) { // 0=disabled=FALSE, 1=enabled=TRUE
      $disabled_themes[$name] = $theme;
    }
  }
  $output = array('#tree' => TRUE);
  $theme_entries = array();
  if (!empty($disabled_themes)) {
    module_load_include('inc', 'system', 'system.admin');
    uasort($disabled_themes, 'system_sort_themes');
    foreach ($disabled_themes as $theme) {
      $theme_name = $theme->name;
      $theme_display_name = $theme->info['name'];
      $theme_entries[$theme_name] = array(
        'uninstall' => array(
          '#type' => 'checkbox',
          '#title' => t('Uninstall @theme theme', array(
            '@theme' => $theme_name
          )),
          '#title_display' => 'invisible'
        ),
        'name' => array('#markup' => '<strong>' . $theme_display_name . '</strong> (' . $theme_name . ')'),
        'base theme' => array(
          '#type' => 'hidden',
          '#value' => $theme->info['base theme'],
          '#markup' => $theme->info['base theme']
        ),
        'version' => array('#markup' => $theme->info['version']),
        'description' => array('#markup' => $theme->info['description'])
      );
    }
  }
  return array_merge($output, $theme_entries);
}

/**
 * Page Callback / Form Builder for the table form.
 *
 * @param $form
 * @param $form_state
 * @return mixed
 */
function comprehensive_uninstaller_form($form, &$form_state) {
  $all_modules = system_rebuild_module_data();
  $disabled_modules = array();
  foreach ($all_modules as $name => $module) {
    if (empty($module->status) && $module->schema_version > SCHEMA_UNINSTALLED) {
      $disabled_modules[$name] = $module;
    }
  }
  uasort($disabled_modules, 'system_sort_modules_by_info_name');
  $subform = _comprehensive_uninstaller_get_disabled_themes();
  $form['table'] = array(
    '#theme' => 'comprehensive_uninstaller',
    '#header' => array(
      t('Uninstall'),
      t('Name'),
      t('Base Theme'),
      t('Version'),
      t('Description')
    ),
    'rows' => $subform
  );
  if (count($subform) > 1) {
    $form['submit'] = array('#type' => 'submit', '#value' => t('Uninstall'));
  }
  return $form;
}

/**
 * Displays a table containing information of disabled themes which are safe to delete.
 *
 * @param $form
 * @param $form_state
 */
function comprehensive_uninstaller_form_submit($form, &$form_state) {
  $rows = $form_state['values']['rows'];
  $uninstall_values = _comprehensive_uninstaller_get_uninstall_values($rows);
  $themes_to_uninstall = array();

  foreach ($rows as $key => $value) {
    if ($value['uninstall'] == 1) {
      array_push($themes_to_uninstall, array('name' => $key, 'project' => $value['project']));
    }
  }

  if (empty($themes_to_uninstall)) {
    drupal_set_message(t('No themes selected.'), 'warning');
  }
  else {
    drupal_set_message(t('The following themes have been successfully uninstalled:'));
    foreach ($themes_to_uninstall as $theme_to_uninstall) {
      $rc = _comprehensive_uninstaller_delete_files('theme', $theme_to_uninstall['name']);
      if ($rc == TRUE) {
        drupal_set_message($theme_to_uninstall['name']);
      }
      else {
        drupal_set_message(t('An error occurred whilst deleting @theme', array('@theme' => $theme_to_uninstall['name'])), 'error');
      }
    }
  }
  drupal_flush_all_caches();
  drupal_goto('admin/appearance/uninstall');
}

/**
 * @param $array
 * @return array
 */
function _comprehensive_uninstaller_get_uninstall_values($array) {
  $uninstall_values = array();
  if (is_array($array)) {
    foreach ($array as $child_array) {
      array_push($uninstall_values, $child_array['uninstall']);
    }
  }
  return $uninstall_values;
}

/**
 * @param $type
 * @param $item
 * @return bool
 */
function _comprehensive_uninstaller_delete_files($type, $item) {
  $rc = TRUE;
  $item_path = drupal_get_path($type, $item);
  if (isset($item_path)) {
    _comprehensive_uninstaller_file_delete_recursive($item_path);
  }
  else {
    $rc = FALSE;
  }
  return $rc;
}

/**
 * @param $path
 */
function _comprehensive_uninstaller_file_delete_recursive($path) {
  if (isset($path)) {
    if (is_dir($path)) { // Path is directory
      $files = scandir($path);
      foreach ($files as $file) {
        if ($file != '.' && $file != '..') {
          _comprehensive_uninstaller_file_delete_recursive($path . '/' . $file); // Recursive call
        }
      }
      rmdir($path);
    }
    else {
      unlink($path); // Delete the file
    }
  }
}

/**
 * Theme callback for the form table.
 *
 * @param $variables
 * @return string
 * @throws \Exception
 */
function theme_comprehensive_uninstaller($variables) {
  $form = $variables['form'];
  $rows = $form['rows'];
  $header = $form['#header'];
  $content = array(
    'header' => $header,
    'rows' => array(),
    'empty' => t('No themes are available to uninstall.')
  );
  foreach (element_children($rows) as $row_index) {
    $row = array();
    foreach (element_children($rows[$row_index]) as $col_index) {
      if ($col_index == 'uninstall') {
        $row[] = array(
          'data' => drupal_render($rows[$row_index][$col_index]),
          'align' => 'center'
        );
      }
      else if ($col_index == 'project') {
        // hidden field but also print out label
        $row[] = drupal_render($rows[$row_index][$col_index]) . $rows[$row_index][$col_index]['#markup'];
      }
      else {
        $row[] = drupal_render($rows[$row_index][$col_index]);
      }
    }
    $content['rows'][] = $row;
  }
  return theme('table', $content);
}