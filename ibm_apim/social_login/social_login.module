<?php
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2015, 2021
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * Implementation of hook_menu_local_tasks_alter().
 * @param $data
 * @param $router_item
 * @param $root_path
 */
function social_login_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  // remove the link to Add User
  if ($root_path == 'admin/people') {
    $newactions = array();
    foreach ($data['actions']['output'] as $action) {
      if ($action['#link']['path'] != 'admin/people/create') {
        $newactions[] = $action;
      }
    }
    $data['actions']['output'] = $newactions;
  }
}

/**
 * Implement hook_requirements
 * @param $phase
 * @return array
 */
function social_login_requirements($phase) {
  $requirements = array();
  // Ensure translations don't break at install time
  $t = get_t();

  if ($phase == 'install') {
    if (module_exists('auth_apic')) {
      $requirements['social_login'] = array(
        'title' => $t('social_login'),
        'value' => $t('social_login is not compatible with auth_apic.'),
        'severity' => REQUIREMENT_ERROR,
      );
    }
  }
  return $requirements;
}

/**
 * Implementation of hook_menu().
 *
 * @return array
 */
function social_login_menu() {
  $items = array();
  $items['ibm_apim/activate/%'] = array(
    'title' => 'User ID Activation',
    'page callback' => 'social_login_activate_id_callback',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );
  $items['ibm_apim/oidc/generic'] = array(
    'title' => 'Generic Open ID Connect',
    'page callback' => 'social_login_oidc_generic_login',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'social_login.openid_connect.inc'
  );
  $items['ibm_apim/oidc/google'] = array(
    'title' => 'Google Open ID Connect',
    'page callback' => 'social_login_oidc_google_login',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'social_login.openid_connect.inc'
  );
  $items['ibm_apim/oidc/windows_aad'] = array(
    'title' => 'Windows AD Open ID Connect',
    'page callback' => 'social_login_oidc_windows_aad_login',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'social_login.openid_connect.inc'
  );

  return $items;
}

/**
 * Implementation hook_menu_alter()
 *
 * @param $items
 */
function social_login_menu_alter(&$items) {
  // disable the register new user tab if self service onboarding is disabled
  $selfservice = variable_get('ibm_apim_selfSignUpEnabled', 1);
  $drupalSignup = variable_get('user_register', 1);
  if ($selfservice == 0 || $drupalSignup == 0) {
    $items['user/register']['access callback'] = FALSE;
  }
}

/**
 * Implements hook_admin_menu_output_alter().
 * Hide the 'Add People' link
 *
 * @param $content
 */
function social_login_admin_menu_output_alter(&$content) {
  if (isset($content['menu']['admin/people']['admin/people/create'])) {
    unset($content['menu']['admin/people']['admin/people/create']);
  }
}

/**
 * Implementation of hook_admin_paths_alter
 *
 * @param $paths
 */
function social_login_admin_paths_alter(&$paths) {
  // Treat all user pages as not administrative.
  // This is to stop using the admin theme on some user/* pages
  $paths['user/*'] = FALSE;
}

/**
 * Implements hook_user_insert().
 *
 * @param $user_edit
 * @param $account
 * @param $category
 */
function social_login_user_insert(&$user_edit, $account, $category) {
  watchdog('social_login_user_insert', 'account: %token', array(
    '%token' => serialize($account->name)
  ), WATCHDOG_NOTICE);
  if ($account->uid != 1 && !isset($account->data['hybridauth']) && !isset($account->field_uid['und'][0]['value']) && !(isset($_COOKIE['Drupal_visitor_ibmapiminvited']) && $_COOKIE['Drupal_visitor_ibmapiminvited'] == 1)) {
    social_login_hybridauth_identity_added($account, NULL);
  }
  if ($account->uid != 1 && isset($account->field_uid['und'][0]['value'])) {
    $apim_session = &_ibm_apim_get_apim_session();
    $apim_session['memberid'] = $account->field_uid['und'][0]['value'];
  }
}

/**
 * Implements hook_user_login().
 *
 * @param $edit
 * @param $account
 */
function social_login_user_login(&$edit, $account) {
  watchdog('social_login_user_login', 'account: %token', array(
    '%token' => serialize($account->name)
  ), WATCHDOG_NOTICE);
  if ($account->uid != 1 && !isset($account->data['hybridauth']) && !isset($account->field_uid['und'][0]['value']) && !(isset($_COOKIE['Drupal_visitor_ibmapiminvited']) && $_COOKIE['Drupal_visitor_ibmapiminvited'] == 1)) {
    social_login_hybridauth_user_login($account, NULL);
  }
  if ($account->uid != 1 && isset($account->field_uid['und'][0]['value'])) {
    $apim_session = &_ibm_apim_get_apim_session();
    $apim_session['memberid'] = $account->field_uid['und'][0]['value'];
  }
  // if doing password reset then don't redirect
  if (arg(0) == 'user' && arg(1) == 'reset') {

  } elseif ($account->uid != 1) {
    $result = ibm_apim_call('/v1/portal/orgs');
    if (isset($result) && isset($result->data) && !isset($result->data['errors'])) {
      $orgs = $result->data;
      $devorgs_array = array();
      if (is_array($orgs)) {
        foreach ($orgs as $org) {
          $devorgs_array[] = array('value' => $org['name']);
        }
      }
      if (!isset($orgs) || count($orgs) < 1) {
        $selfservice = variable_get('ibm_apim_selfSignUpEnabled', 1);
        if ($selfservice == 1) {
          drupal_set_message(t('You need to create a developer organization to continue.'));
          drupal_goto('ibm_apim/org/create');
        }
        else {
          // self service onboarding disabled so force logout
          user_cookie_save(array('ibmapimnodevorg' => 1));
          user_logout();
          drupal_goto(variable_get('hybridauth_destination', '<front>'));
        }
      }
      else {
        $account = user_load($account->uid);
        $edit = array('field_developer_organization' => array('und' => $devorgs_array));
        if (isset($apim_session['memberid']) && (!isset($account->field_uid['und'][0]['value']) || empty($account->field_uid['und'][0]['value']))) {
          $edit['field_uid'] = array('und' => array(0 => array('value' => $apim_session['memberid'])));
        }
        user_save($account, $edit);
        drupal_goto(variable_get('hybridauth_destination', '<front>'));
      }
    }
    else {
      drupal_goto(variable_get('hybridauth_destination', '<front>'));
    }
  }
  else {
    drupal_goto(variable_get('hybridauth_destination', '<front>'));
  }
}

/**
 * Implementation of hook_hybridauth_identity_added
 *
 * @param $account
 * @param $data
 */
function social_login_hybridauth_identity_added($account, $data) {
  watchdog('social_login_hybridauth_identity_added', 'creating user: %user', array(
    '%user' => serialize($account->name)
  ), WATCHDOG_NOTICE);

  // Make sure we have the session variables set
  $host_pieces = _ibm_apim_parse_apim_host();
  $url = $host_pieces['url'] . '/v1/portal/users/register';

  if (isset($account->field_first_name['und'][0]['value'])) {
    $firstname = $account->field_first_name['und'][0]['value'];
  }
  elseif (isset($account->data['hybridauth']['firstName'])) {
    $firstname = $account->data['hybridauth']['firstName'];
  }
  else {
    $firstname = '';
  }
  if (isset($account->field_last_name['und'][0]['value'])) {
    $lastname = $account->field_last_name['und'][0]['value'];
  }
  elseif (isset($account->data['hybridauth']['lastName'])) {
    $lastname = $account->data['hybridauth']['lastName'];
  }
  else {
    $lastname = '';
  }
  // create orgname based on whatever fields happen to be set
  $orgname = '';
  if (isset($account->field_developer_organization['und'][0]['value']) &&
      !empty($account->field_developer_organization['und'][0]['value']) ){
    $orgname = $account->field_developer_organization['und'][0]['value'];
  }
  else {
    if (isset($firstname) && !empty($firstname)) {
      $orgname = $firstname;
    }
    if (isset($lastname) && !empty($lastname)) {
      if (!empty($orgname)) {
        $orgname .= ' ';
      }
      $orgname .= $lastname;
    }
  }
  if (empty($orgname)) {
    $orgname = $account->name;
  }
  $postData = array(
    "username" => $account->name,
    "email" => $account->mail,
    "firstName" => $firstname,
    "lastName" => $lastname
  );

  if (isset($account->field_uid['und'][0]['value']) && !empty($account->field_uid['und'][0]['value'])) {
    // if field_uid already set then user has already been registered and activated in apim so no need to do anything more
  }
  elseif (isset($_COOKIE['Drupal_visitor_ibmapimacttoken']) && !empty($_COOKIE['Drupal_visitor_ibmapimacttoken'])) {
    _social_login_complete_activation($account, $postData);
  }
  else {
    // not invited so need to create devorg
    $postData['organization'] = $orgname;
    $result = ibm_apim_post($url, json_encode($postData));
    if (isset($result) && $result->code >= 200 && $result->code < 300 && isset($result->data)) {
      $output = $result->data;

      // create new devorg with output from registering the user
      $consumer = array(
        'id' => $output['organization']['id'],
        'title' => $output['organization']['name'],
        'name' => $output['organization']['name'],
        'owner' => $output['name'],
        'members' => array(),
        'tags' => array()
      );
      devorg_createNewDevorgNode($consumer);

      // update uid
      user_save((object) array('uid' => $account->uid), array(
        'is_new' => 0,
        'field_uid' => array('und' => array(0 => array('value' => isset($output['id']) ? $output['id'] : ''))),
        'field_developer_organization' => array('und' => array(0 => array('value' => $output['organization']['name'])))
      ));
    }
  }
}

/**
 * Implementation of hook_hybridauth_user_login
 *
 * @param $user
 * @param $data
 */
function social_login_hybridauth_user_login($user, $data) {
  watchdog('social_login_hybridauth_user_login', 'logging in user: %user', array(
    '%user' => serialize($user->name)
  ), WATCHDOG_NOTICE);
  if ($user->uid != 1) {
    $apim_session = &_ibm_apim_get_apim_session();
    // if field_uid isn't set go and attempt to register the user again
    if (!isset($user->field_uid['und'][0]['value'])) {
      social_login_hybridauth_identity_added($user, array());
    }
    if (isset($_COOKIE['Drupal_visitor_ibmapimacttoken']) && !empty($_COOKIE['Drupal_visitor_ibmapimacttoken'])) {
      _social_login_complete_activation($user, NULL);
    }

    if (isset($user->field_uid['und'][0]['value'])) {
      $apim_session['memberid'] = $user->field_uid['und'][0]['value'];
      $devorg_nodes = devorg_list_devorg_nodes();
      $orgs = array();
      if (isset($devorg_nodes)) {
        foreach ($devorg_nodes as $devorg) {
          $roles = array();
          if (isset($devorg->devorg_members[$devorg->language][0]['value'])) {
            $members = unserialize($devorg->devorg_members[$devorg->language][0]['value']);
            foreach ($members as $member) {
              if (isset($member['email']) && isset($user->mail) && $member['email'] == $user->mail) {
                foreach ($member['roles'] as $role) {
                  $roles[] = array('name' => $role);
                }
              }
            }
          }
          if (!empty($roles)) {
            $orgs[] = array(
              'id' => $devorg->devorg_id[$devorg->language][0]['value'],
              'roles' => $roles,
              'name' => $devorg->devorg_name[$devorg->language][0]['value']
            );
          }
        }
      }
      $apim_session['userdata'] = array('orgs' => $orgs);
      // force selection of first devorg
      if (isset($orgs[0])) {
        _ibm_apim_set_current_developer_org($orgs[0]['id']);
      }
      _ibm_apim_refresh_user_data();
      // clear cache
      cache_clear_all();
    }
    else {
      _ibm_apim_refresh_user_data();
      if (isset($apim_session['memberid'])) {
        user_save($user, array(
          'field_uid' => array(
            'und' => array(
              0 => array('value' => $apim_session['memberid'])
            )
          )
        ));
      }
      cache_clear_all();
    }
  }
}

/**
 * Implementation of hook_form_alter()
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function social_login_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'openid_connect_login_form' :
      if (isset($form['openid_connect_client_generic_login']['#value'])) {
        $form['openid_connect_client_generic_login']['#value'] = '';
      }
      if (isset($form['openid_connect_client_google_login']['#value'])) {
        $form['openid_connect_client_google_login']['#value'] = '';
      }
      if (isset($form['openid_connect_client_windows_aad_login']['#value'])) {
        $form['openid_connect_client_windows_aad_login']['#value'] = '';
      }
      if (isset($form['openid_connect_client_isam_login']['#value'])) {
        $form['openid_connect_client_isam_login']['#value'] = '';
      }
      break;
    case 'hybridauth_admin_settings' :
      // hide all the not available providers
      foreach ($form['vtabs']['fset_providers']['hybridauth_providers']['#options'] as $key => $provider) {
        if ((isset($provider['available']) && $provider['available'] == t('No')) || (isset($provider['name']) && (strtoupper($provider['name']) == 'AOL' || strtoupper($provider['name']) == 'YAHOO' || strtoupper($provider['name']) == 'FOURSQUARE' || strtoupper($provider['name']) == 'OPENID'))) {
          unset($form['vtabs']['fset_providers']['hybridauth_providers']['#options'][$key]);
          if (isset($form['vtabs']['fset_providers']['hybridauth_providers']['hybridauth_provider_' . $key . '_weight'])) {
            unset($form['vtabs']['fset_providers']['hybridauth_providers']['hybridauth_provider_' . $key . '_weight']);
          }
        }
      }
      // don't allow the user to allow duplicate emails
      if (isset($form['vtabs']['fset_other']['hybridauth_duplicate_emails'])) {
        unset($form['vtabs']['fset_other']['hybridauth_duplicate_emails']['#options'][0]);
      }
      // ensure email is a required field
      $default = variable_get('hybridauth_required_fields', array(
        'email' => 'email',
        'firstName' => 'firstName',
        'lastName' => 'lastName'
      ));
      $default['email'] = 'email';

      $form['vtabs']['fset_fields']['hybridauth_required_fields'] = array(
        '#type' => 'checkboxes',
        '#title' => t('Required information'),
        '#options' => array(
          'email' => t('Email address'),
          'firstName' => t('First name'),
          'lastName' => t('Last name')
        ),
        '#description' => t("If authentication provider doesn't return it, visitor will need to fill additional form before registration."),
        '#default_value' => $default,
      );
      $form['vtabs']['fset_fields']['hybridauth_required_fields']['email']['#disabled'] = TRUE;
      $form['#validate'][] = 'social_login_admin_settings_validate';
      break;
    case 'password_policy_password_tab' :
      if (variable_get('no_autocomplete_profile_form', FALSE)) {
        if (isset($form['pass'])) {
          if (empty($form['pass']['#attributes'])) {
            $form['pass']['#attributes'] = array();
          }
          $form['pass']['#attributes']['autocomplete'] = 'off';
        }
        $form['#attributes']['autocomplete'] = 'off';
      }
      $form['#submit'][] = '_social_login_password_policy_password_tab_submit_handler';
      break;
    case 'user_register_form' :
    case 'ibm_apim_activate_create_account_form' :
      $hybridweight = variable_get('hybridauth_widget_weight', -100);
      $hybrid_enabled = FALSE;
      if (module_exists('hybridauth')) {
        $providers = hybridauth_get_enabled_providers();
        if (count($providers) > 0) {
          $hybrid_enabled = TRUE;
        }
      }
      $site_name = variable_get('site_name', 'API Portal');
      if ($hybridweight < -10 && $hybrid_enabled == TRUE) {
        if (preg_match('/^[aeiou]/i', $site_name)) {
          $string = t('Or create an @s account ...', array('@s' => $site_name));
        }
        else {
          $string = t('Or create a @s account ...', array('@s' => $site_name));
        }
        $form['intro'] = array(
          '#markup' => '<h3>' . $string . '</h3>',
          '#weight' => -11
        );
      }
      else {
        if (preg_match('/^[aeiou]/i', $site_name)) {
          $string = t('Create an @s account ...', array('@s' => $site_name));
        }
        else {
          $string = t('Create a @s account ...', array('@s' => $site_name));
        }
        $form['intro'] = array(
          '#markup' => '<h3>' . $string . '</h3>',
          '#weight' => -11
        );
        // if no providers enabled then hide the hybridauth widget
        if ($hybrid_enabled == FALSE && isset($form['hybridauth'])) {
          unset($form['hybridauth']);
        }
      }
      if (module_exists('openid_connect')) {
        if ($hybridweight < -10 && $hybrid_enabled == TRUE) {
          $intro_string = t('Or use Open ID Connect ...');
        }
        else {
          $intro_string = t('Use Open ID Connect ...');
        }
        // hidden submit form to ensure that hitting enter in the username/password fields submits the actual form and doesnt initiate openid
        $form['default_submit'] = array(
          '#markup' => '<input type="submit" class="hiddensubmit" name="op" value="' . t('Log in') . '" style="display: none;" tabindex="-1" />',
          '#weight' => -2000
        );
        $form['openid_intro'] = array(
          '#markup' => '<h3>' . $intro_string . '</h3>',
          '#weight' => $hybridweight + 1
        );
        $openid_connect_clients_enabled = variable_get('openid_connect_clients_enabled', array());
        if (array_key_exists('generic', $openid_connect_clients_enabled)) {
          $form['generic'] = array(
            '#markup' => '<a class="openid-connect generic" href="' . url('ibm_apim/oidc/generic') . '" title="' . t('Login using Generic Open ID Connect') . '"></a>',
            '#weight' => $hybridweight + 2
          );
        }
        if (array_key_exists('google', $openid_connect_clients_enabled)) {
          $form['google'] = array(
            '#markup' => '<a class="openid-connect google" href="' . url('ibm_apim/oidc/google') . '" title="' . t('Login using Google Open ID Connect') . '"></a>',
            '#weight' => $hybridweight + 3
          );
        }
        if (array_key_exists('windows_aad', $openid_connect_clients_enabled)) {
          $form['windows_aad'] = array(
            '#markup' => '<a class="openid-connect windows_aad" href="' . url('ibm_apim/oidc/windows_aad') . '" title="' . t('Login using Windows AAD Open ID Connect') . '"></a>',
            '#weight' => $hybridweight + 3
          );
        }
        if (array_key_exists('isam', $openid_connect_clients_enabled)) {
          $form['isam'] = array(
            '#markup' => '<a class="openid-connect isam" href="' . url('ibm_apim/oidc/isam') . '" title="' . t('Login using ISAM') . '"></a>',
            '#weight' => $hybridweight + 3
          );
        }
        $form['openid_outro'] = array(
          '#markup' => '<div class="clearBoth"></div>',
          '#weight' => $hybridweight + 4
        );
      }
      $path = drupal_get_path('module', 'social_login');
    if (!is_array($form['#attached'])) {
      $form['#attached'] = array();
    }
    if (!is_array($form['#attached']['css'])) {
      $form['#attached']['css'] = array();
    }
    $form['#attached']['css'][] = $path . '/css/social_login.css';
      if (isset($form['notifications_forum'])) {
        unset($form['notifications_forum']);
      }
      if (isset($form['metatags'])) {
        unset($form['metatags']);
      }
      if (isset($form['field_developer_organization'])) {
        unset($form['field_developer_organization']);
      }
      $form['#validate'][] = 'social_login_user_register_validate';
      break;
    case 'user_login_block' :
    case 'user_login' :
      // disable autocomplete in login form if enabled
      if (variable_get('no_autocomplete_login_form', FALSE)) {
        if (isset($form['name'])) {
          if (empty($form['name']['#attributes'])) {
            $form['name']['#attributes'] = array();
          }
          $form['name']['#attributes']['autocomplete'] = 'off';
        }
        if (isset($form['pass'])) {
          if (empty($form['pass']['#attributes'])) {
            $form['pass']['#attributes'] = array();
          }
          $form['pass']['#attributes']['autocomplete'] = 'off';
        }
      }
      $hybridweight = variable_get('hybridauth_widget_weight', -100);
      $hybrid_enabled = FALSE;
      if (module_exists('hybridauth')) {
        $providers = hybridauth_get_enabled_providers();
        if (count($providers) > 0) {
          $hybrid_enabled = TRUE;
        }
      }

      if ($hybridweight < -10 && $hybrid_enabled == TRUE) {
        $form['intro'] = array(
          '#markup' => '<h3>' . t('Or use your @s account ...', array('@s' => variable_get('site_name', 'API Portal'))) . '</h3>',
          '#weight' => -11
        );
      }
      else {
        $form['intro'] = array(
          '#markup' => '<h3>' . t('Use your @s account ...', array('@s' => variable_get('site_name', 'API Portal'))) . '</h3>',
          '#weight' => -11
        );
        // if no providers enabled then hide the hybridauth widget
        if ($hybrid_enabled == FALSE && isset($form['hybridauth'])) {
          unset($form['hybridauth']);
        }
      }
      if (module_exists('openid_connect')) {
        if ($hybridweight < -10 && $hybrid_enabled == TRUE) {
          $intro_string = t('Or use Open ID Connect ...');
        }
        else {
          $intro_string = t('Use Open ID Connect ...');
        }
        // hidden submit form to ensure that hitting enter in the username/password fields submits the actual form and doesnt initiate openid
        $form['default_submit'] = array(
          '#markup' => '<input type="submit" class="hiddensubmit" name="op" value="' . t('Log in') . '" style="display: none;" tabindex="-1" />',
          '#weight' => -2000
        );
        $form['openid_intro'] = array(
          '#markup' => '<h3>' . $intro_string . '</h3>',
          '#weight' => $hybridweight + 1
        );
        $openid_connect_clients_enabled = variable_get('openid_connect_clients_enabled', array());
        if (array_key_exists('generic', $openid_connect_clients_enabled)) {
          $form['generic'] = array(
            '#markup' => '<a class="openid-connect generic" href="' . url('ibm_apim/oidc/generic') . '" title="' . t('Login using Generic Open ID Connect') . '"></a>',
            '#weight' => $hybridweight + 2
          );
        }
        if (array_key_exists('google', $openid_connect_clients_enabled)) {
          $form['google'] = array(
            '#markup' => '<a class="openid-connect google" href="' . url('ibm_apim/oidc/google') . '" title="' . t('Login using Google Open ID Connect') . '"></a>',
            '#weight' => $hybridweight + 3
          );
        }
        if (array_key_exists('windows_aad', $openid_connect_clients_enabled)) {
          $form['windows_aad'] = array(
            '#markup' => '<a class="openid-connect windows_aad" href="' . url('ibm_apim/oidc/windows_aad') . '" title="' . t('Login using Windows AAD Open ID Connect') . '"></a>',
            '#weight' => $hybridweight + 3
          );
        }
        if (array_key_exists('isam', $openid_connect_clients_enabled)) {
          $form['isam'] = array(
            '#markup' => '<a class="openid-connect isam" href="' . url('ibm_apim/oidc/isam') . '" title="' . t('Login using ISAM') . '"></a>',
            '#weight' => $hybridweight + 3
          );
        }
        $form['openid_outro'] = array(
          '#markup' => '<div class="clearBoth"></div>',
          '#weight' => $hybridweight + 4
        );
      }
      $path = drupal_get_path('module', 'social_login');
      if (!is_array($form['#attached'])) {
        $form['#attached'] = array();
      }
      if (!is_array($form['#attached']['css'])) {
        $form['#attached']['css'] = array();
      }
      $form['#attached']['css'][] = $path . '/css/social_login.css';
      break;
    case 'user_profile_form' :
      global $user;
      $ibm_apim_username_show = variable_get('ibm_apim_username_show', FALSE);
      $ibm_apim_email_show = variable_get('ibm_apim_email_show', TRUE);
      $ibm_apim_username_reqd = variable_get('ibm_apim_username_reqd', FALSE);
      $ibm_apim_email_reqd = variable_get('ibm_apim_email_reqd', TRUE);
      // Developer Org field hidden on edit profile
      unset($form['field_developer_organization']);

      if ($form['#user']->uid == $user->uid) {
        // editing own profile

        if ($ibm_apim_username_show != TRUE) {
          if (isset($form['account']['name'])) {
            unset($form['account']['name']);
          }
          if (isset($form['account']['mail'])) {
            $form['account']['mail']['#disabled'] = TRUE;
            $form['account']['mail']['#required'] = FALSE;
          }
        }
        else {
          if ($ibm_apim_username_reqd == TRUE) {
            $form['account']['name']['#required'] = TRUE;
          }
          else {
            $form['account']['name']['#required'] = FALSE;
          }
        }
        if ($ibm_apim_email_show != TRUE) {
          if (isset($form['account']['mail'])) {
            unset($form['account']['mail']);
          }
          if (isset($form['account']['name'])) {
            $form['account']['name']['#disabled'] = TRUE;
            $form['account']['name']['#required'] = FALSE;
          }
        }
        else {
          if ($ibm_apim_email_reqd == TRUE) {
            $form['account']['mail']['#required'] = TRUE;
          }
          else {
            $form['account']['mail']['#required'] = FALSE;
          }
        }
        // force mail to be enabled and required
        $form['account']['mail']['#disabled'] = FALSE;
        $form['account']['mail']['#required'] = TRUE;

        // do not allow modifying username
        if (isset($form['account']['name'])) {
          $form['account']['name']['#disabled'] = TRUE;
          $form['account']['name']['#required'] = FALSE;
        }

        if (isset($user->uid) && $user->uid != 1) {
          if (isset($form['account']['pass'])) {
            unset($form['account']['current_pass']);
            unset($form['account']['pass']);
          }
        }

        $remoteid = "";
        if (isset($form['#user']->data['remote_id'])) {
          $remoteid = $form['#user']->data['remote_id'];
        }
        $form['account']['remote_id'] = array(
          '#type' => 'hidden',
          '#value' => $remoteid
        );
        // allow admin to edit their own email address
        if ($user->uid == 1) {
          $form['account']['mail']['#disabled'] = FALSE;
          $form['account']['mail']['#required'] = TRUE;
          if (isset($form['field_first_name'])) {
            $form['field_first_name']['#required'] = FALSE;
            $form['field_first_name']['und']['#required'] = 0;
            $form['field_first_name']['und'][0]['#required'] = FALSE;
            $form['field_first_name']['und'][0]['value']['#required'] = FALSE;
          }
          if (isset($form['field_last_name'])) {
            $form['field_last_name']['#required'] = FALSE;
            $form['field_last_name']['und']['#required'] = 0;
            $form['field_last_name']['und'][0]['#required'] = FALSE;
            $form['field_last_name']['und'][0]['value']['#required'] = FALSE;
          }
        }
      }
      else {
        // admin editing user account
        // disable all the fields to stop admins making changes that then would fail to sync to apic
        if (isset($form['account']['roles'])) {
          $form['account']['roles']['#disabled'] = TRUE;
          $form['account']['roles']['#required'] = FALSE;
        }
        if (isset($form['account']['name'])) {
          $form['account']['name']['#disabled'] = TRUE;
          $form['account']['name']['#required'] = FALSE;
        }
        if (isset($form['account']['pass'])) {
          $form['account']['pass']['#disabled'] = TRUE;
          $form['account']['pass']['#required'] = FALSE;
        }
        if (isset($form['account']['mail'])) {
          $form['account']['mail']['#disabled'] = TRUE;
          $form['account']['mail']['#required'] = FALSE;
        }
        if (isset($form['field_first_name'])) {
          $form['field_first_name']['#disabled'] = TRUE;
          $form['field_first_name']['#required'] = FALSE;
          $form['field_first_name']['und']['#required'] = 0;
          $form['field_first_name']['und'][0]['#required'] = FALSE;
          $form['field_first_name']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_last_name'])) {
          $form['field_last_name']['#disabled'] = TRUE;
          $form['field_last_name']['#required'] = FALSE;
          $form['field_last_name']['und']['#required'] = 0;
          $form['field_last_name']['und'][0]['#required'] = FALSE;
          $form['field_last_name']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_phone'])) {
          $form['field_phone']['#disabled'] = TRUE;
          $form['field_phone']['#required'] = FALSE;
          $form['field_phone']['und']['#required'] = 0;
          $form['field_phone']['und'][0]['#required'] = FALSE;
          $form['field_phone']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_company'])) {
          $form['field_company']['#disabled'] = TRUE;
          $form['field_company']['#required'] = FALSE;
          $form['field_company']['und']['#required'] = 0;
          $form['field_company']['und'][0]['#required'] = FALSE;
          $form['field_company']['und'][0]['value']['#required'] = FALSE;
        }
        if (isset($form['field_address'])) {
          $form['field_address']['#disabled'] = TRUE;
          $form['field_address']['und']['#required'] = 0;
          $form['field_address']['und'][0]['#required'] = FALSE;
        }
      }

      // if email field is disabled then remove the current password field
      if ($form['account']['mail']['#disabled'] == TRUE) {
        unset($form['account']['current_pass']);
      }

      $form['account']['#weight'] = -10;
      $currentmax = field_info_max_weight('user', 'user', 'form');
      if (isset($form['overlay-control'])) {
        $form['overlay-control']['#weight'] = -3;
      }
      if (isset($form['picture'])) {
        $form['picture']['#weight'] = -2;
      }
      if (isset($form['contact'])) {
        $form['contact']['#weight'] = -1;
      }
      if (isset($form['signature_settings'])) {
        $form['signature_settings']['#weight'] = $currentmax + 10;
      }
      if (isset($form['field_uid'])) {
        unset($form['field_uid']);
      }

      $form['#validate'] = array_diff($form['#validate'], array(
        'user_account_form_validate',
        'user_validate_current_pass'
      ));
      $form['#validate'][] = 'ibm_apim_validate_current_pass';
      $form['#submit'] = array('_social_login_user_profile_form_submit_handler');
      break;
  }
}

/**
 * Form validation handler for the hybridauth admin settings form.
 *
 * @param $form
 * @param $form_state
 */
function social_login_admin_settings_validate($form, &$form_state) {
  $values = &$form_state['values'];

  // Ensure email is a required field
  $values['hybridauth_required_fields']['email'] = 'email';
}

/**
 * Use a custom submit handler for the password_policy_password_tab form,
 * so we can display a message about the admin guide.
 *
 * @param form
 * @param form_state
 */
function _social_login_password_policy_password_tab_submit_handler($form, &$form_state) {
  global $user;

  // add extra message about admin guide if the admin user was created in the last 24 hours
  // no nice way to detect if this is the very first login, so simply checking first 24 hours should cover it
  if ($user->uid == 1 && module_exists('book')) {
    if (isset($user->created) && $user->created > (time() - 86400)) {
      drupal_set_message(t('Welcome to your new Portal site. If you would like help customizing and configuring this site then the Admin Guide can be accessed from the Help menu above.'));
    }
  }
}

/**
 * Use a custom submit handler for the user profile form,
 * so we can update APIC too.
 *
 * @param $form
 * @param $form_state
 */
function _social_login_user_profile_form_submit_handler($form, &$form_state) {
  $account = $form_state['user'];
  $category = $form['#user_category'];

  // Remove unneeded values.
  form_state_values_clean($form_state);

  // Before updating the account entity, keep an unchanged copy for use with
  // user_save() later. This is necessary for modules implementing the user
  // hooks to be able to react on changes by comparing the values of $account
  // and $edit.
  $account_unchanged = clone $account;

  entity_form_submit_build_entity('user', $account, $form, $form_state);

  // Populate $edit with the properties of $account, which have been edited on
  // this form by taking over all values, which appear in the form values too.
  $edit = array_intersect_key((array) $account, $form_state['values']);

  if (is_array($edit['signature'])) {
    $edit['signature_format'] = $edit['signature']['format'];
    $edit['signature'] = $edit['signature']['value'];
  }

  if (!isset($edit['data'])) {
    $edit['data'] = array();
  }

  user_save($account_unchanged, $edit, $category);
  $form_state['values']['uid'] = $account->uid;

  // update APIC with profile changes unless admin
  global $user;
  if ($user->uid != 1) {
    _social_login_update_apic_profile($form_state['values']);
  }

  if ($category == 'account' && !empty($edit['pass'])) {
    // Remove the password reset tag since a new password was saved.
    unset($_SESSION['pass_reset_' . $account->uid]);
  }
  // Clear the page cache because pages can contain usernames and/or profile information:
  cache_clear_all();

  drupal_set_message(t('The changes have been saved.'));
}

/**
 * Update APIC with profile changes
 *
 * @param $values
 */
function _social_login_update_apic_profile($values) {
  if (isset($values)) {
    $data = ibm_apim_convert_to_apic_address($values);
    unset($data['username']);
    unset($data['organization']);
    unset($data['password']);

    $postData = array(
      'firstName' => $data['firstName'],
      'lastName' => $data['lastName']
    );
    if (isset($data['mail'])) {
      $postData['mail'] = $data['mail'];
    }
    $url = '/v1/portal/me';
    $result = ibm_apim_put($url, json_encode($postData));
    if (!(isset($result) && $result->code >= 200 && $result->code < 300)) {
      drupal_set_message(t('Update of profile in IBM APIC failed.'));
    }
  }
}

/**
 * Callback to handle user id activation
 * This is to handle a specific URL that APIm will send out as its
 * activation link.
 * The URL will include base64 encoded JSON with the username
 * and some temporary credentials allocated by the server to enable us to update apic
 *
 * @param null $path
 * @return bool
 */
function social_login_activate_id_callback($path = NULL) {
  global $_GET;
  if (isset($_GET['activationToken'])) {
    $actToken = $_GET['activationToken'];
  }

  // ACTIVATE USER LINK
  if (isset($actToken)) {
    // verify the token first
    // decode the base64 encoded JSON in the incoming URL
    $activationObj = json_decode(base64_decode($actToken));
    // set global variables with the temp auth credentials from the incoming URL payload
    global $tempUser;
    global $tempPwd;
    if (!(isset($activationObj->{'username'}) && isset($activationObj->{'authentication'}) && isset($activationObj->{'authentication'}->{'username'}) && isset($activationObj->{'authentication'}->{'password'}) && isset($activationObj->{'providerContext'}) && isset($activationObj->{'providerContext'}->{'orgID'}) && isset($activationObj->{'providerContext'}->{'environmentID'}))) {
      // essential info missing from token
      drupal_set_message(t('Invalid Token: missing required fields. Contact the system administrator for assistance.'), 'error');
      watchdog('social_login_activate_id_callback', 'Invalid Token: missing required fields. token: %token', array(
        '%token' => serialize($activationObj)
      ), WATCHDOG_NOTICE);
      drupal_goto();
    }
    $tempUser = $activationObj->{'authentication'}->{'username'};
    $tempPwd = $activationObj->{'authentication'}->{'password'};
    $userid = ibm_apim_decrypt_data($activationObj->{'username'});
    if (isset($userid)) {
      // verify the temp userid and password are valid
      $url = $activationObj->{'url'};
      if (!isset($url) || !isset($tempUser) || !isset($tempPwd) || !isset($userid)) {
        drupal_set_message(t('Token did not contain a valid URL. Contact the system administrator for assistance.'), 'error');
        watchdog('social_login_activate_id_callback', 'Invalid Token: Token did not contain a valid URL. token: %token', array(
          '%token' => serialize($activationObj)
        ), WATCHDOG_NOTICE);
        drupal_goto();
      }

      // try loading by username
      $existinguser = user_load_by_name($userid);
      if (isset($existinguser) && isset($existinguser->uid)) {
        // user already exists
        drupal_set_message(t('User already exists. Please use existing credentials to sign in.'), 'error');
        drupal_goto('user/login');
      }
      else {
        // then try loading by mail
        $existinguser = user_load_by_mail($userid);
        if (isset($existinguser) && isset($existinguser->uid)) {
          // user already exists
          drupal_set_message(t('User already exists. Please use existing credentials to sign in.'), 'error');
          drupal_goto('user/login');
        } else {
          // seems a valid token so save it as a cookie for retrieval after have signed up
          module_load_include('pages.inc', 'user');
          user_cookie_save(array('ibmapimacttoken' => $actToken));
          return drupal_get_form('ibm_apim_activate_create_account_form', $actToken);
        }
      }
    }
    else {
      drupal_set_message(t('Failed to decrypt userid. Contact the system administrator for assistance.'), 'error');
      watchdog('social_login_activate_id_callback', 'Invalid Token: Token did not contain a valid userid. token: %token', array(
        '%token' => serialize($activationObj)
      ), WATCHDOG_NOTICE);
      drupal_goto();
    }
  }
  else {
    drupal_set_message(t('Invalid URL. Contact the system administrator for assistance.'), 'error');
    watchdog('social_login_activate_id_callback', 'Missing Token', array(), WATCHDOG_NOTICE);
    drupal_goto();
  }
  return TRUE;
}

/**
 * finalise activation of a user
 * @param $account
 * @param null $postData
 * @throws \Exception
 */
function _social_login_complete_activation($account, $postData = NULL) {
  watchdog('_social_login_complete_activation', 'Activating user: %user', array(
    '%user' => serialize($account->name)
  ), WATCHDOG_NOTICE);
  global $cookie_domain;
  $actToken = $_COOKIE['Drupal_visitor_ibmapimacttoken'];
  unset($_COOKIE['Drupal_visitor_ibmapimacttoken']);
  setrawcookie('Drupal_visitor_ibmapimacttoken', '', REQUEST_TIME - 3600, base_path(), $cookie_domain, TRUE); // empty value and old timestamp

  if (!isset($postData)) {
    if (isset($account->field_first_name['und'][0]['value'])) {
      $firstname = $account->field_first_name['und'][0]['value'];
    }
    elseif (isset($account->data['hybridauth']['firstName'])) {
      $firstname = $account->data['hybridauth']['firstName'];
    }
    else {
      $firstname = '';
    }
    if (isset($account->field_last_name['und'][0]['value'])) {
      $lastname = $account->field_last_name['und'][0]['value'];
    }
    elseif (isset($account->data['hybridauth']['lastName'])) {
      $lastname = $account->data['hybridauth']['lastName'];
    }
    else {
      $lastname = '';
    }
    $postData = array(
      "username" => $account->name,
      "email" => $account->mail,
      "firstName" => $firstname,
      "lastName" => $lastname
    );
  }
  if (isset($postData['organization'])) {
    unset($postData['organization']);
  }

  if (isset($actToken)) {

    // decode the base64 encoded JSON in the incoming URL
    $activationObj = json_decode(base64_decode($actToken));
    // set global variables with the temp auth credentials from the incoming URL payload
    global $tempUser;
    global $tempPwd;
    if (!(isset($activationObj->{'username'}) && isset($activationObj->{'authentication'}) && isset($activationObj->{'authentication'}->{'username'}) && isset($activationObj->{'authentication'}->{'password'}) && isset($activationObj->{'providerContext'}) && isset($activationObj->{'providerContext'}->{'orgID'}) && isset($activationObj->{'providerContext'}->{'environmentID'}))) {
      // essential info missing from token
      drupal_set_message(t('Invalid Token: missing required fields. Contact the system administrator for assistance.'), 'error');
      watchdog('social_login_hybridauth_identity_added', 'Invalid Token: missing required fields. token: %token', array(
        '%token' => serialize($activationObj)
      ), WATCHDOG_NOTICE);
      drupal_goto();
    }
    $tempUser = $activationObj->{'authentication'}->{'username'};
    $tempPwd = $activationObj->{'authentication'}->{'password'};
    $org = $activationObj->{'providerContext'}->{'orgID'};
    $env = $activationObj->{'providerContext'}->{'environmentID'};

    // verify the temp userid and password are valid
    $url = $activationObj->{'url'};
    $headers = array(
      'Content-Type: application/json',
      'Accept: application/json',
      "X-IBM-APIManagement-Context: " . $org . '.' . $env,
      'Authorization: Basic ' . base64_encode($tempUser . ':' . $tempPwd)
    );
    global $language;
    $lang_name = _ibm_apim_convert_lang_name($language->language);
    if (isset($lang_name)) {
      $headers[] = 'Accept-Language: ' . $lang_name;
    }
    $clientid = variable_get('ibm_apim_client_id');
    $headers[] = 'X-IBM-Client-Id: ' . $clientid;
    if (isset($account->name) && $account->uid != 1) {
      $headers[] = 'X-IBM-APIManagement-Principal: ' . $account->name;
      $headers[] = 'X-IBM-APIManagement-Principal-Base64: ' . base64_encode($account->name);
    }

    $result = _ibm_apim_json_http_request($url, 'POST', $headers, json_encode($postData));

    if (isset($result) && $result->code >= 200 && $result->code < 300) {
      $output = $result->data;
      // update status via SQL to avoid triggering drupal activation email
      db_update('users')
        ->fields(array('status' => 1))
        ->condition('uid', $account->uid)
        ->execute();

      // check for what orgs the user is in and create nodes for any that might have just been created by apim
      _ibm_apim_refresh_user_data();
      $orgs = _ibm_apim_load_developer_orgs();
      $devorgs_array = array();
      if (isset($orgs)) {
        foreach ($orgs as $org) {
          if (isset($org['id'])) {
            $devorgs_array[] = array('value' => $org['name']);
            $query = new EntityFieldQuery();
            $query->entityCondition('entity_type', 'node')
              ->entityCondition('bundle', 'devorg')
              ->fieldCondition('devorg_id', 'value', $org['id']);
            $results = $query->execute();

            if (!isset($results['node']) || empty($results['node'])) {
              // create new devorg with output from registering the user
              $consumer = array(
                'id' => $org['id'],
                'title' => $org['name'],
                'name' => $org['name'],
                'owner' => $output['name'],
                'members' => array(),
                'tags' => array()
              );
              devorg_createNewDevorgNode($consumer);
            }
          }
        }
      }

      // update uid
      user_save((object) array('uid' => $account->uid), array(
        'is_new' => 0,
        'field_uid' => array('und' => array(0 => array('value' => isset($output['id']) ? $output['id'] : ''))),
        'field_developer_organization' => array('und' => $devorgs_array)
      ));
      drupal_set_message(t('Account successfully activated.'));
    }
    else {
      watchdog('social_login_hybridauth_identity_added', 'Error activating user %username. response: %response', array(
        '%username' => $account->name,
        '%response' => serialize($result)
      ), WATCHDOG_NOTICE);
      drupal_set_message(t('There was an error activating your account: %data', array('%data' => serialize($result->data))), 'error');
    }
  }
}

/**
 * Custom validation callback for user registration
 * @param $form
 * @param $form_state
 */
function social_login_user_register_validate($form, &$form_state) {
  $orgname = '';
  if (isset($form_state['values']['field_first_name']['und'][0]['value']) && !empty($form_state['values']['field_first_name']['und'][0]['value'])) {
    $orgname = $form_state['values']['field_first_name']['und'][0]['value'];
  }
  if (isset($form_state['values']['field_last_name']['und'][0]['value']) && !empty($form_state['values']['field_last_name']['und'][0]['value'])) {
    if (!empty($orgname)) {
      $orgname .= ' ';
    }
    $orgname .= $form_state['values']['field_last_name']['und'][0]['value'];
  }
  if (empty($orgname)) {
    $orgname = $form_state['values']['name'];
  }
  $form_state['values']['field_developer_organization'] = array('und' => array(0 => array('value' => $orgname)));
}

