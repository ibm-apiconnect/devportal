<?php
/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2016, 2020
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

/**
 * IBM API Connect Integration
 *
 * Adds the Developer Organization node content type to Drupal for representing developer organizations from IBM APIC
 */

/* Define a single permission to be granted */
define('DEVORG_GRANT', 1);

/**
 * Implements hook_node_access_records().
 *
 * For devorg nodes, create a realm named after the orgid for that node,
 * and require a permission of DEVORG_GRANT to view that node
 *
 * @param $node
 * @return array
 *
 * Note: hook is called when rebuilding permissions
 */
function devorg_node_access_records($node) {
  $type = is_string($node) ? $node : $node->type;
  $grants = array();
  if ($type == 'devorg') {
    $org = $node->devorg_id[$node->language][0]['value'];
    $grants[] = array(
      'realm' => 'devorg_'.$org,
      'gid' => DEVORG_GRANT,
      'grant_view' => 1,
      'grant_update' => 0,
      'grant_delete' => 0,
      'priority' => 0,
    );
  }
  return $grants;
}

/**
 * Implements hook_node_grants().
 *
 * For the view operation, allow DEVORG_GRANT permission to the
 * devorg realm named after the orgid of the user
 *
 * @param $account
 * @param $op
 * @return array
 *
 * Note: hook is not called at all when admin logged in
 * Note: hook is called on every login, logout and page load
 */
function devorg_node_grants($account, $op) {
  $grants = array();
  if ($op == 'view' && user_is_logged_in()) {
    $org = ibm_apim_get_current_developer_org();
    if (isset($org['id'])) {
      $grants['devorg_'.$org['id']] = array(DEVORG_GRANT);
    }
  }
  return $grants;
}

/**
 * Implements hook_node_info().
 *
 * @return array
 */
function devorg_node_info() {
  return array(
    'devorg' => array(
      'name' => t('Developer Organization'),
      'base' => 'devorg',
      'description' => t('A Developer Organization in IBM API Connect')
    )
  );
}

/**
 * Implements hook_help().
 *
 * @param $path
 * @param $arg
 * @return string
 */
function devorg_help($path, $arg) {
  switch ($path) {
    case 'admin/help#devorg' :
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("The Developer Organization module provides a new custom node type for use with IBM API Connect.") . '</p>';
      $output .= '<h3>' . t('Uses') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Select a devorg') . '</dt>';
      $output .= '<dd>' . t("This module is to allow the tracking of developer organization membership in the Developer Portal.") . '</dd>';
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function devorg_theme($existing, $type, $theme, $path) {
  return array(
    'devorg_node_form' => array(
      'render element' => 'form',
      'template' => 'devorg-node-form',

      // this will set to module/theme path by default:
      'path' => drupal_get_path('module', 'ibm_apim') . '/templates'
    )
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * @param $form
 * @param $form_state
 */
function devorg_form_devorg_node_form_alter(&$form, &$form_state) {
  // this function hides all our custom fields from the edit node form as they are all set explicitly
  $form['devorg_name']['#access'] = 0;
  $form['devorg_id']['#access'] = 0;
  $form['devorg_owner']['#access'] = 0;
  $form['devorg_tags']['#access'] = 0;
  $form['devorg_members']['#access'] = 0;
  $form['devorg_apimhostname']['#access'] = 0;
  $form['devorg_providerid']['#access'] = 0;
  $form['devorg_environmentid']['#access'] = 0;
  $form['title']['#access'] = 0;
}

/**
 * Implements hook_form().
 *
 * @param $node
 * @param $form_state
 * @return array
 */
function devorg_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_view().
 *
 * @param $node
 * @param $view_mode
 * @return mixed
 */
function devorg_view($node, $view_mode) {
  return $node;
}

/**
 * Implements hook_node_view().
 *
 * @param $node
 * @param $view_mode
 */
function devorg_node_view($node, $view_mode) {
}


/**
 * Implements hook_node_access().
 * This is checking if the specified devorg is accessible to the current user, if not it blocks access.
 *
 * @param $node
 * @param $op
 * @param $account
 * @return int
 */
function devorg_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;
  if ($type == 'devorg' && $op == 'view') {
    return NODE_ACCESS_DENY;
  }
  else {
    return NODE_ACCESS_IGNORE;
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * @param $variables
 */
function devorg_preprocess_node(&$variables) {
  if ($variables['node']->type == 'devorg' && $variables['view_mode'] == 'teaser') {
    $variables['theme_hook_suggestions'][] = 'node__devorg__teaser';
  }
  if ($variables['node']->type == 'devorg' && $variables['view_mode'] == 'search_result') {
    $variables['theme_hook_suggestions'][] = 'node__devorg__search_result';
  }
  if ($variables['node']->type == 'devorg') {

  }
}

/**
 * Implements hook_preprocess_search_result
 *
 * @param $variables
 */
function devorg_preprocess_search_result(&$variables) {
  $node = $variables['result']['node'];
  if ($node->nid && $node->type == 'devorg') { // if the result is an devorg node we can load the teaser
    $variables['teaser'] = node_view($node, 'teaser');
  }
}

/**
 * Implements hook_token_info().
 *
 * @return array
 */
function devorg_token_info() {
  $type = array(
    'name' => t('Developer organization tokens'),
    'description' => t('Developer organization tokens'),
    'needs-data' => 'devorg',
  );
  $devorg['devorg_id'] = array(
    'name' => t("Developer organization ID"),
    'description' => t("The ID of the developer organization."),
  );
  $devorg['devorg_nid'] = array(
    'name' => t("Developer organization node ID"),
    'description' => t('The node ID of the developer organization.'),
  );
  $devorg['devorg_name'] = array(
    'name' => t("Developer organization name"),
    'description' => t('The name of the developer organization.'),
  );
  $devorg['devorg_owner_email'] = array(
    'name' => t("Developer organization owner email address"),
    'description' => t('The developer organization owner email address.'),
  );
  $devorg['devorg_member_emails'] = array(
    'name' => t("Developer organization member email addresses"),
    'description' => t('The email addresses of the members of the developer organization. (comma separated)'),
  );

  return array(
    'types' => array('devorg' => $type),
    'tokens' => array('devorg' => $devorg),
  );
}

/**
 * Implements hook_tokens().
 *
 * @param $type
 * @param null $object
 * @param array $options
 * @return array
 */
function devorg_tokens($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'devorg' || $type == 'all') {
    $tokens = array(
      'devorg_id' => $object['devorg_id'],
      'devorg_nid' => $object['devorg_nid'],
      'devorg_name' => $object['devorg_name'],
      'devorg_owner_email' => $object['devorg_owner_email'],
      'devorg_member_emails' => $object['devorg_member_emails'],
    );
    return $tokens;
  }
}

/**
 * returns a list of all our custom fields
 * @return array
 */
function _devorg_get_ibm_fields() {
  $ibmfields = array(
    'devorg_id',
    'devorg_name',
    'devorg_members',
    'devorg_apimhostname',
    'devorg_providerid',
    'devorg_environmentid',
    'devorg_owner',
    'devorg_tags',
    'title_field'
  );
  return $ibmfields;
}

/**
 * Get the instance info for all our fields
 * @return array
 */
function _devorg_get_custom_fields() {
  $all_fields = field_info_instances("node", "devorg");
  $keys = array_keys($all_fields);
  $ibmfields = _devorg_get_ibm_fields();

  $diff = array_diff($keys, $ibmfields);
  return $diff;
}

/**
 * Creates or updates an existing node. Returns true if a new node was
 * created or false if an existing one was updated.
 * @param $devorg
 * @param $event
 * @return bool
 */
function devorg_createOrUpdateDevorg($devorg, $event = 'internal') {
  $createdOrUpdated = FALSE;
  $ref = $devorg['id'];
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'devorg')
    ->fieldCondition('devorg_id', 'value', $ref);
  $results = $query->execute();

  if (isset($results['node'])) {
    $first = array_shift($results['node']);
    $nid = $first->nid;
    $node = node_load($nid);
    devorg_updateExistingDevorgNode($node, $devorg, $event);
    $createdOrUpdated = FALSE;
  }
  else {
    // no existing node for this devorg so create one
    devorg_createNewDevorgNode($devorg, $event);
    $createdOrUpdated = TRUE;
  }

  return $createdOrUpdated;
}

/**
 * Create a new devorg node
 * @param $consumer
 * @param $event
 * @throws \Exception
 */
function devorg_createNewDevorgNode($consumer, $event = 'internal') {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  if (isset($consumer) && isset($consumer['id'])) {
    // find if there is an existing node for this API (maybe at old version)
    // using x-ibm-name from swagger doc
    // if so then clone it and base new node on that.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'devorg')
      ->fieldCondition('devorg_id', 'value', $consumer['id'])
      ->propertyOrderBy('nid', 'ASC');
    $results = $query->execute();
    if (isset($results) && isset($results['node'])) {
      $first = array_shift($results['node']);
      $nid = $first->nid;
      $node = node_load($nid);
      if (isset($node)) {
        devorg_updateExistingDevorgNode($node, $consumer, $event);
      }
    }
    else {
      $node = new stdClass();
      $node->type = "devorg";
      node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().

      $node->title = ibm_apim_truncate_string($consumer['title']);
      $node->language = LANGUAGE_NONE;
      $node->uid = 1;
      $node->status = 1;
      $node->promote = 0;

      $node->devorg_apimhostname[$node->language][] = array(
        'value' => $hostvariable,
        'format' => 'plain_text'
      );
      $node->devorg_providerid[$node->language][] = array(
        'value' => $apim_session['org'],
        'format' => 'plain_text'
      );
      $node->devorg_environmentid[$node->language][] = array(
        'value' => $apim_session['env'],
        'format' => 'plain_text'
      );
      $node->devorg_name[$node->language][] = array(
        'value' => $consumer['name'],
        'format' => 'plain_text'
      );
      $node->devorg_owner[$node->language][] = array(
        'value' => $consumer['owner'],
        'format' => 'plain_text'
      );
      if (!isset($consumer['tags'])) {
        $consumer['tags'] = array();
      }
      $node->devorg_tags[$node->language] = array();
      if (isset($consumer['tags'])) {
        foreach ($consumer['tags'] as $tag) {
          $node->devorg_tags[$node->language][] = array(
            'value' => $tag,
            'format' => 'plain_text'
          );
        }
      }
      $node->devorg_tags[$node->language][] = array(
        'value' => serialize($consumer['tags']),
        'format' => 'plain_text'
      );
      $node->devorg_id[$node->language][] = array(
        'value' => $consumer['id'],
        'format' => 'plain_text'
      );
      if (!isset($consumer['members'])) {
        $consumer['members'] = array();
      }
      $node->devorg_members[$node->language][] = array(
        'value' => serialize($consumer['members']),
        'format' => 'plain_text'
      );
      $node = node_submit($node); // Prepare node for saving
      node_save($node);

      if (isset($node)) {
        // Calling all modules implementing 'hook_ibm_apim_devorg_create':
        module_invoke_all('ibm_apim_devorg_create', $node, $consumer);

        $devorg_owner_email = $node->devorg_owner[$node->language][0]['value'];
        if (!valid_email_address($devorg_owner_email)) {
           $account = user_load_by_name($devorg_owner_email);
           if ($account) {
              $devorg_owner_email = $account->mail;
           } 
           else {
              // get the owner email from the members list
              if (isset($node->devorg_members[$node->language][0]['value'])) {
                $members = unserialize($node->devorg_members[$node->language][0]['value']);
                foreach ($members as $member) {
                  if (in_array("owner", $member['roles']) && isset($member['email'])){
                     $devorg_owner_email = $member['email'];
                  }
                }
              }
           }
        }

        // invoke rules
        if (module_exists('rules')) {
          $rules_payload = array(
            'devorg_id' => $node->devorg_id[$node->language][0]['value'],
            'devorg_nid' => $node->nid,
            'devorg_name' => $node->title,
            'devorg_owner_email' => $devorg_owner_email
          );

          $member_emails = array();
          if (isset($node->devorg_members[$node->language][0]['value'])) {
            $members = unserialize($node->devorg_members[$node->language][0]['value']);
            foreach ($members as $member) {
              if (isset($member['email'])) {
                $member_emails[] = $member['email'];
              }
              else {
                $member_emails[] = $member['username'];
              }
            }
          }
          $rules_payload['devorg_member_emails'] = implode(',', $member_emails);

          // Make sure we do not provide NULL values, as Rules module doesn't like them.
          // @see http://drupal.org/node/1497534
          foreach ($rules_payload as $key => $value) {
            if (is_null($value)) {
              $rules_payload[$key] = '';
            }
          }
          rules_invoke_event('devorg_create',
            $rules_payload['devorg_id'],
            $rules_payload['devorg_nid'],
            $rules_payload['devorg_name'],
            $rules_payload['devorg_owner_email'],
            $rules_payload['devorg_member_emails']
          );
        }
      }
    }
  }
}

/**
 * Update existing devorg node
 * @param $node
 * @param $consumer
 * @param $event
 * @throws \Exception
 */
function devorg_updateExistingDevorgNode($node, $consumer, $event = 'internal') {
  $hostvariable = variable_get('ibm_apim_host');
  $apim_session = &_ibm_apim_get_apim_session();
  $node->title = ibm_apim_truncate_string($consumer['title']);
  $node->promote = 0;
  $node->devorg_apimhostname[$node->language][0]['value'] = $hostvariable;
  $node->devorg_providerid[$node->language][0]['value'] = $apim_session['org'];
  $node->devorg_environmentid[$node->language][0]['value'] = $apim_session['env'];
  $node->devorg_id[$node->language][0]['value'] = $consumer['id'];
  $node->devorg_name[$node->language][0]['value'] = $consumer['name'];
  $node->devorg_owner[$node->language][0]['value'] = $consumer['owner'];
  if (!isset($consumer['tags'])) {
    $consumer['tags'] = array();
  }
  $node->devorg_tags[$node->language] = array();
  if (isset($consumer['tags'])) {
    foreach ($consumer['tags'] as $tag) {
      $node->devorg_tags[$node->language][] = array(
        'value' => $tag,
        'format' => 'plain_text'
      );
    }
  }
  if (!isset($consumer['members'])) {
    $consumer['members'] = array();
  }
  $node->devorg_members[$node->language][0]['value'] = serialize($consumer['members']);
  node_save($node);
  if (isset($node)) {
    // Calling all modules implementing 'hook_ibm_apim_devorg_update':
    module_invoke_all('ibm_apim_devorg_update', $node, $consumer);
  }
}

/**
 * Wrapper script to update an existing devorg
 * @param $consumer
 */
function devorg_updateDevorgNode($consumer) {
  if (isset($consumer)) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'devorg')
      ->fieldCondition('devorg_id', 'value', $consumer['id']);
    $results = $query->execute();

    if (isset($results['node'])) {
      $first = array_shift($results['node']);
      $nid = $first->nid;
      $node = node_load($nid);
      devorg_updateExistingDevorgNode($node, $consumer, 'update');
    }
  }
}

/**
 * Returns a list of NIDs for devorg nodes the current user is authorized to see
 * @return array
 */
function devorg_list_devorgs() {
  $returnnids = array();
  if (user_is_logged_in()) {
    global $user;
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'devorg')
      ->addTag('node_access');
    $results = $query->execute();
    if (isset($results['node'])) {
      $nids = array();
      foreach ($results['node'] as $item) {
        $nids[] = $item->nid;
      }
      $nodes = node_load_multiple($nids);
      if (isset($nodes)) {
        foreach ($nodes as $node) {
          // check if owner
          if (isset($node->devorg_owner[$node->language][0]['value']) && isset($user->mail) && $node->devorg_owner[$node->language][0]['value'] == $user->mail) {
            $returnnids[] = $node->nid;
          }
          elseif (isset($node->devorg_members[$node->language][0]['value'])) {
            // check if a member
            $members = unserialize($node->devorg_members[$node->language][0]['value']);
            foreach ($members as $member) {
              if (isset($member['email']) && isset($user->mail) && $member['email'] == $user->mail) {
                $returnnids[] = $node->nid;
              }
            }
          }
        }
      }
    }
  }
  return array_unique($returnnids, SORT_NUMERIC);
}

/**
 * Get expanded list of devorg nodes the current user is authorized to see
 * @return mixed
 */
function devorg_list_devorg_nodes() {
  $nids = devorg_list_devorgs();
  $nodes = node_load_multiple($nids);
  return $nodes;
}
