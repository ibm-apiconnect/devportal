<?php

/********************************************************* {COPYRIGHT-TOP} ***
 * Licensed Materials - Property of IBM
 * 5725-L30, 5725-Z22
 *
 * (C) Copyright IBM Corporation 2018, 2021
 *
 * All Rights Reserved.
 * US Government Users Restricted Rights - Use, duplication or disclosure
 * restricted by GSA ADP Schedule Contract with IBM Corp.
 ********************************************************** {COPYRIGHT-END} **/

use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;

/**
 * Alter attachments (typically assets) to a page before it is rendered.
 *
 * Use this hook when you want to remove or alter attachments on the page, or
 * add attachments to the page that depend on another module's attachments (this
 * hook runs after hook_page_attachments().
 *
 * @param array &$attachments
 *   An empty renderable array representing the page attachments.
 *
 * @see hook_page_attachments_alter()
 */
function connect_theme_page_attachments_alter(array &$attachments) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $theme = 'connect_theme';

  // Attach module dependant libraries.
  // These libraries are declared in your themeName.libraries.yml and we only
  // load if the module is installed.
  $module_libraries = [
    'addtoany',
    'ds',
    'social_media_links',
    'superfish',
  ];
  $theme_libraries = \Drupal::service('library.discovery')->getLibrariesByExtension($theme);
  foreach ($module_libraries as $module_library) {
    if (array_key_exists($module_library, $theme_libraries) && \Drupal::moduleHandler()
        ->moduleExists($module_library) === TRUE
    ) {
      $attachments['#attached']['library'][] = "$theme/$module_library";
    }
  }
  foreach ($attachments['#attached']['html_head'] as $key => $attachment) {
    if ($attachment[1] === 'system_meta_generator') {
      unset($attachments['#attached']['html_head'][$key]);
    }
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Preprocess variables for html templates.
 */
function connect_theme_preprocess_html(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }


  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}


/**
 * Preprocess variables for page templates.
 */
/* -- Delete this line if you want to use this function
function connect_theme_preprocess_page(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}
// */

/**
 * Preprocess variables for field templates.
 */
function connect_theme_preprocess_field(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }
  $element = $variables['element'];

  if ($element['#field_type'] === 'comment') {
    $variables['attributes']['aria-label'] = t('Comments');
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Add aria-labelledby to selects and the cshs field
 *
 * @param $variables
 */
function connect_theme_preprocess_form_element(&$variables) {
  if (isset($variables['element']['#type'], $variables['element']['#id'])) {
    $type = $variables['element']['#type'];
    $variables['label']['#element_type'] = $type;
    if (($type === 'cshs' || $type === 'select') && !isset($variables['attributes']['aria-labelledby'])) {
      $variables['label']['#attributes']['id'] = $variables['element']['#id'] . '-label';
      // special case for CSHS fields
      if ($variables['element']['#id'] === 'edit-term-node-tid-depth') {
        $variables['label']['#attributes']['id'] = 'edit-term-node-tid-depth--level-0-label';
        $variables['label']['#attributes']['for'] = 'edit-term-node-tid-depth--level-0';
      }
    }
  }
}

/**
 * Set the ID on label fields so that aria-labelledby can pick it up
 *
 * @param $variables
 */
function connect_theme_preprocess_form_element_label(&$variables) {
  if (isset($variables['element']['#attributes']['for'])) {
    $for = $variables['element']['#attributes']['for'];
  } elseif (isset($variables['attributes']['for'])) {
    $for = $variables['attributes']['for'];
  }
  if (isset($for) && !isset($variables['attributes']['id'])) {
    $variables['attributes']['id'] = $for . '-label';
    // special case for CSHS fields
    if ($for === 'edit-term-node-tid-depth') {
      $variables['attributes']['id'] = 'edit-term-node-tid-depth--level-0-label';
      $for = 'edit-term-node-tid-depth--level-0';
    }
  }
  if (isset($for)) {
    $variables['element']['#attributes']['for'] = $for;
  }
  if ($variables['element']['#element_type'] === 'item') {
    unset($variables['element']['#attributes']['for']);
    unset($variables['attributes']['for']);
  }
}

/**
 * @param $variables
 */
function connect_theme_preprocess_select(&$variables) {
  // dont include CSHS fields here because they're special and the select is generated from JS
  if (isset($variables['element']['#id']) && !isset($variables['attributes']['aria-labelledby']) && $variables['element']['#id'] !== 'edit-term-node-tid-depth') {
    $variables['attributes']['aria-labelledby'] = $variables['element']['#id'] . '-label';
  }
}

/**
 * Preprocess variables for node templates.
 */
function connect_theme_preprocess_node(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  if ($variables['node']->getType() === 'page') {
    $variables['attributes']['aria-labelledby'] = 'page-node-title';
    $variables['title_attributes']['id'] = 'page-node-title';
  }
  else {
    $variables['attributes']['aria-labelledby'] = 'node-' . $variables['node']->id() . '-title';
    $variables['title_attributes']['id'] = 'node-' . $variables['node']->id() . '-title';
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Preprocess variables for user templates.
 */
function connect_theme_preprocess_user(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $variables['attributes']['aria-label'] = 'user-' . $variables['user']->id();

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Preprocess variables for comment templates.
 */
/* -- Delete this line if you want to use this function
function connect_theme_preprocess_comment(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}
// */

/**
 * Preprocess variables for block templates.
 */
function connect_theme_preprocess_block(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  if ($variables['plugin_id'] === 'system_menu_block:account') {
    $variables['#cache']['max-age'] = 0;
  }
  if ($variables['plugin_id'] === 'contact_block') {
    $variables['attributes']['aria-label'] = t('Contact form');
  }
  if ($variables['plugin_id'] === 'system_menu_block:main') {
    $variables['attributes']['class'][] = $variables['derivative_plugin_id'] . "-menu";
    $variables['#attached']['library'][] = 'connect_theme/overflowhandler';
  }
  if ($variables['base_plugin_id'] === 'system_menu_block') {
    $variables['attributes']['class'][] = "block-" . $variables['derivative_plugin_id'];
  }

  $variables['base_path'] = base_path();

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Preprocess variables for block templates.
 */
function connect_theme_preprocess_menu(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $variables['base_path'] = base_path();
  $variables['directory'] = \Drupal::service('extension.list.theme')->getPath('connect_theme');
  $current_user = \Drupal::currentUser();
  if (!$current_user->isAnonymous()) {
    $entity = User::load($current_user->id());
    if ($entity !== NULL && $entity->user_picture->isEmpty() === FALSE) {
      $image = $entity->user_picture;
      $uri = $image->entity->getFileUri();
      $variables['user_picture'] =  \Drupal::service('file_url_generator')->generateAbsoluteString($uri);
    }
    else {
      $variables['user_picture'] = '';
    }
  }
  else {
    $variables['user_picture'] = '';
  }

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Preprocess variables for status messages
 */
function connect_theme_preprocess_status_messages(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  $variables['directory'] = \Drupal::service('extension.list.theme')->getPath('connect_theme');

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Preprocess hooks are needed for our forms so that the children elements
 * are rendered properly by the twig processing code.
 */

function connect_theme_preprocess_form_user_login(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function connect_theme_preprocess_form_user_invited_register(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function connect_theme_preprocess_form_user_register(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function connect_theme_preprocess_form_apic_change_pwd(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

function connect_theme_preprocess_form_user_reset_pwd(&$variables) {
  if (function_exists('ibm_apim_entry_trace')) {
    ibm_apim_entry_trace(__FUNCTION__, NULL);
  }

  template_preprocess_form($variables);

  if (function_exists('ibm_apim_exit_trace')) {
    ibm_apim_exit_trace(__FUNCTION__, NULL);
  }
}

/**
 * Implements hook_preprocess_page_title().
 */
function connect_theme_preprocess_page_title(&$variables) {
  $node = \Drupal::request()->attributes->get('node');
  if ($node instanceof NodeInterface && $node->bundle() === 'forum') {
    $variables['title'] = t('Forums');
  }
}

/**
 * Implements hook_preprocess_radios().
 */
function connect_theme_preprocess_radios(&$variables) {
    if (!isset($variables['attributes']['role'])) {
      $variables['attributes']['role'] = "radiogroup";
    }
    if (!isset($variables['attributes']['aria-label']) && isset($variables['element']['#title'])) {
      $variables['attributes']['aria-label'] = $variables['element']['#title'];
    }
}

function connect_theme_preprocess_input__radio(&$variables) {
    if (isset($variables['attributes']['aria-describedby'])) {
      unset($variables['attributes']['aria-describedby']);
    }
}

function connect_theme_preprocess_input__checkbox(&$variables) {
  if (isset($variables['attributes']['aria-describedby'], $variables["element"]["#attributes"]["name"])) {
    unset($variables['attributes']['aria-describedby']);
  }
}
